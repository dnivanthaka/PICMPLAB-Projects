

Microchip Technology PIC LITE Macro Assembler V1.30 build 55553 
                                                                                               Thu May 01 17:12:28 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 55553
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,delta=2
    56                           	psect	text42,local,class=CODE,merge=1,delta=2
    57                           	psect	text43,local,class=CODE,merge=1,delta=2
    58                           	psect	text44,local,class=CODE,merge=1,delta=2
    59                           	psect	text45,local,class=CODE,merge=1,delta=2
    60                           	psect	text46,local,class=CODE,merge=1,delta=2
    61                           	psect	text47,local,class=CODE,merge=1,delta=2
    62                           	psect	text48,local,class=CODE,merge=1,delta=2
    63                           	psect	text49,local,class=CODE,merge=1,delta=2
    64                           	psect	text50,local,class=CODE,merge=1,delta=2
    65                           	psect	text51,local,class=CODE,merge=1,delta=2
    66                           	psect	text52,local,class=CODE,merge=1,delta=2
    67                           	psect	text53,local,class=CODE,merge=1,delta=2
    68                           	psect	text54,local,class=CODE,merge=1,delta=2
    69                           	psect	text55,local,class=CODE,merge=1,delta=2
    70                           	psect	text56,local,class=CODE,merge=1,delta=2
    71                           	psect	intentry,global,class=CODE,delta=2
    72                           	dabs	1,0x7E,2
    73  0000                     	;# 
    74  0001                     	;# 
    75  0002                     	;# 
    76  0003                     	;# 
    77  0004                     	;# 
    78  0005                     	;# 
    79  0006                     	;# 
    80  0007                     	;# 
    81  0008                     	;# 
    82  0009                     	;# 
    83  000A                     	;# 
    84  000B                     	;# 
    85  000C                     	;# 
    86  000D                     	;# 
    87  000E                     	;# 
    88  000E                     	;# 
    89  000F                     	;# 
    90  0010                     	;# 
    91  0011                     	;# 
    92  0012                     	;# 
    93  0013                     	;# 
    94  0014                     	;# 
    95  0015                     	;# 
    96  0015                     	;# 
    97  0016                     	;# 
    98  0017                     	;# 
    99  0018                     	;# 
   100  0019                     	;# 
   101  001A                     	;# 
   102  001B                     	;# 
   103  001B                     	;# 
   104  001C                     	;# 
   105  001D                     	;# 
   106  001E                     	;# 
   107  001F                     	;# 
   108  0081                     	;# 
   109  0085                     	;# 
   110  0086                     	;# 
   111  0087                     	;# 
   112  0088                     	;# 
   113  0089                     	;# 
   114  008C                     	;# 
   115  008D                     	;# 
   116  008E                     	;# 
   117  0091                     	;# 
   118  0092                     	;# 
   119  0093                     	;# 
   120  0094                     	;# 
   121  0098                     	;# 
   122  0099                     	;# 
   123  009C                     	;# 
   124  009D                     	;# 
   125  009E                     	;# 
   126  009F                     	;# 
   127  010C                     	;# 
   128  010D                     	;# 
   129  010E                     	;# 
   130  010F                     	;# 
   131  018C                     	;# 
   132  018D                     	;# 
   133  0000                     	;# 
   134  0001                     	;# 
   135  0002                     	;# 
   136  0003                     	;# 
   137  0004                     	;# 
   138  0005                     	;# 
   139  0006                     	;# 
   140  0007                     	;# 
   141  0008                     	;# 
   142  0009                     	;# 
   143  000A                     	;# 
   144  000B                     	;# 
   145  000C                     	;# 
   146  000D                     	;# 
   147  000E                     	;# 
   148  000E                     	;# 
   149  000F                     	;# 
   150  0010                     	;# 
   151  0011                     	;# 
   152  0012                     	;# 
   153  0013                     	;# 
   154  0014                     	;# 
   155  0015                     	;# 
   156  0015                     	;# 
   157  0016                     	;# 
   158  0017                     	;# 
   159  0018                     	;# 
   160  0019                     	;# 
   161  001A                     	;# 
   162  001B                     	;# 
   163  001B                     	;# 
   164  001C                     	;# 
   165  001D                     	;# 
   166  001E                     	;# 
   167  001F                     	;# 
   168  0081                     	;# 
   169  0085                     	;# 
   170  0086                     	;# 
   171  0087                     	;# 
   172  0088                     	;# 
   173  0089                     	;# 
   174  008C                     	;# 
   175  008D                     	;# 
   176  008E                     	;# 
   177  0091                     	;# 
   178  0092                     	;# 
   179  0093                     	;# 
   180  0094                     	;# 
   181  0098                     	;# 
   182  0099                     	;# 
   183  009C                     	;# 
   184  009D                     	;# 
   185  009E                     	;# 
   186  009F                     	;# 
   187  010C                     	;# 
   188  010D                     	;# 
   189  010E                     	;# 
   190  010F                     	;# 
   191  018C                     	;# 
   192  018D                     	;# 
   193  0000                     	;# 
   194  0001                     	;# 
   195  0002                     	;# 
   196  0003                     	;# 
   197  0004                     	;# 
   198  0005                     	;# 
   199  0006                     	;# 
   200  0007                     	;# 
   201  0008                     	;# 
   202  0009                     	;# 
   203  000A                     	;# 
   204  000B                     	;# 
   205  000C                     	;# 
   206  000D                     	;# 
   207  000E                     	;# 
   208  000E                     	;# 
   209  000F                     	;# 
   210  0010                     	;# 
   211  0011                     	;# 
   212  0012                     	;# 
   213  0013                     	;# 
   214  0014                     	;# 
   215  0015                     	;# 
   216  0015                     	;# 
   217  0016                     	;# 
   218  0017                     	;# 
   219  0018                     	;# 
   220  0019                     	;# 
   221  001A                     	;# 
   222  001B                     	;# 
   223  001B                     	;# 
   224  001C                     	;# 
   225  001D                     	;# 
   226  001E                     	;# 
   227  001F                     	;# 
   228  0081                     	;# 
   229  0085                     	;# 
   230  0086                     	;# 
   231  0087                     	;# 
   232  0088                     	;# 
   233  0089                     	;# 
   234  008C                     	;# 
   235  008D                     	;# 
   236  008E                     	;# 
   237  0091                     	;# 
   238  0092                     	;# 
   239  0093                     	;# 
   240  0094                     	;# 
   241  0098                     	;# 
   242  0099                     	;# 
   243  009C                     	;# 
   244  009D                     	;# 
   245  009E                     	;# 
   246  009F                     	;# 
   247  010C                     	;# 
   248  010D                     	;# 
   249  010E                     	;# 
   250  010F                     	;# 
   251  018C                     	;# 
   252  018D                     	;# 
   253  0000                     	;# 
   254  0001                     	;# 
   255  0002                     	;# 
   256  0003                     	;# 
   257  0004                     	;# 
   258  0005                     	;# 
   259  0006                     	;# 
   260  0007                     	;# 
   261  0008                     	;# 
   262  0009                     	;# 
   263  000A                     	;# 
   264  000B                     	;# 
   265  000C                     	;# 
   266  000D                     	;# 
   267  000E                     	;# 
   268  000E                     	;# 
   269  000F                     	;# 
   270  0010                     	;# 
   271  0011                     	;# 
   272  0012                     	;# 
   273  0013                     	;# 
   274  0014                     	;# 
   275  0015                     	;# 
   276  0015                     	;# 
   277  0016                     	;# 
   278  0017                     	;# 
   279  0018                     	;# 
   280  0019                     	;# 
   281  001A                     	;# 
   282  001B                     	;# 
   283  001B                     	;# 
   284  001C                     	;# 
   285  001D                     	;# 
   286  001E                     	;# 
   287  001F                     	;# 
   288  0081                     	;# 
   289  0085                     	;# 
   290  0086                     	;# 
   291  0087                     	;# 
   292  0088                     	;# 
   293  0089                     	;# 
   294  008C                     	;# 
   295  008D                     	;# 
   296  008E                     	;# 
   297  0091                     	;# 
   298  0092                     	;# 
   299  0093                     	;# 
   300  0094                     	;# 
   301  0098                     	;# 
   302  0099                     	;# 
   303  009C                     	;# 
   304  009D                     	;# 
   305  009E                     	;# 
   306  009F                     	;# 
   307  010C                     	;# 
   308  010D                     	;# 
   309  010E                     	;# 
   310  010F                     	;# 
   311  018C                     	;# 
   312  018D                     	;# 
   313  0000                     	;# 
   314  0001                     	;# 
   315  0002                     	;# 
   316  0003                     	;# 
   317  0004                     	;# 
   318  0005                     	;# 
   319  0006                     	;# 
   320  0007                     	;# 
   321  0008                     	;# 
   322  0009                     	;# 
   323  000A                     	;# 
   324  000B                     	;# 
   325  000C                     	;# 
   326  000D                     	;# 
   327  000E                     	;# 
   328  000E                     	;# 
   329  000F                     	;# 
   330  0010                     	;# 
   331  0011                     	;# 
   332  0012                     	;# 
   333  0013                     	;# 
   334  0014                     	;# 
   335  0015                     	;# 
   336  0015                     	;# 
   337  0016                     	;# 
   338  0017                     	;# 
   339  0018                     	;# 
   340  0019                     	;# 
   341  001A                     	;# 
   342  001B                     	;# 
   343  001B                     	;# 
   344  001C                     	;# 
   345  001D                     	;# 
   346  001E                     	;# 
   347  001F                     	;# 
   348  0081                     	;# 
   349  0085                     	;# 
   350  0086                     	;# 
   351  0087                     	;# 
   352  0088                     	;# 
   353  0089                     	;# 
   354  008C                     	;# 
   355  008D                     	;# 
   356  008E                     	;# 
   357  0091                     	;# 
   358  0092                     	;# 
   359  0093                     	;# 
   360  0094                     	;# 
   361  0098                     	;# 
   362  0099                     	;# 
   363  009C                     	;# 
   364  009D                     	;# 
   365  009E                     	;# 
   366  009F                     	;# 
   367  010C                     	;# 
   368  010D                     	;# 
   369  010E                     	;# 
   370  010F                     	;# 
   371  018C                     	;# 
   372  018D                     	;# 
   373                           
   374                           	psect	strings
   375  0800                     __pstrings:	
   376  0800                     stringtab:	
   377  0800                     __stringtab:	
   378                           
   379                           ;	String table - string pointers are 1 byte each
   380  0800  1BFF               	btfsc	btemp+1,7
   381  0801  280A               	ljmp	stringcode
   382  0802  1383               	bcf	3,7
   383  0803  187F               	btfsc	btemp+1,0
   384  0804  1783               	bsf	3,7
   385  0805  0800               	movf	0,w
   386  0806  0A84               	incf	4,f
   387  0807  1903               	skipnz
   388  0808  0AFF               	incf	btemp+1,f
   389  0809  0008               	return
   390  080A                     stringcode:	
   391  080A                     stringdir:	
   392  080A  3008               	movlw	high stringdir
   393  080B  008A               	movwf	10
   394  080C  0804               	movf	4,w
   395  080D  0A84               	incf	4,f
   396  080E  0782               	addwf	2,f
   397  080F                     __stringbase:	
   398  080F  3400               	retlw	0
   399  0810                     __end_of__stringtab:	
   400  0810                     _dpowers:	
   401  0810  3401               	retlw	1
   402  0811  3400               	retlw	0
   403  0812  340A               	retlw	10
   404  0813  3400               	retlw	0
   405  0814  3464               	retlw	100
   406  0815  3400               	retlw	0
   407  0816  34E8               	retlw	232
   408  0817  3403               	retlw	3
   409  0818  3410               	retlw	16
   410  0819  3427               	retlw	39
   411  081A                     __end_of_dpowers:	
   412  081A                     _MUTE_ON:	
   413  081A  3480               	retlw	128
   414  081B                     __end_of_MUTE_ON:	
   415  081B                     _SM_ON:	
   416  081B  3440               	retlw	64
   417  081C                     __end_of_SM_ON:	
   418  081C                     _STBY:	
   419  081C  3440               	retlw	64
   420  081D                     __end_of_STBY:	
   421  081D                     _SUD_UP:	
   422  081D  3480               	retlw	128
   423  081E                     __end_of_SUD_UP:	
   424  000C                     _PIR1bits	set	12
   425  0005                     _PORTA	set	5
   426  0006                     _PORTB	set	6
   427  0007                     _PORTC	set	7
   428  0009                     _PORTE	set	9
   429  001A                     _RCREG	set	26
   430  0013                     _SSPBUF	set	19
   431  0014                     _SSPCON	set	20
   432  0001                     _TMR0	set	1
   433  0019                     _TXREG	set	25
   434  002B                     _RA3	set	43
   435  0031                     _RB1	set	49
   436  0032                     _RB2	set	50
   437  0048                     _RE0	set	72
   438  0049                     _RE1	set	73
   439  004A                     _RE2	set	74
   440  005D                     _TMR0IE	set	93
   441  005A                     _TMR0IF	set	90
   442  009F                     _ADCON1	set	159
   443  0081                     _OPTION_REGbits	set	129
   444  0093                     _SSPADD	set	147
   445  0091                     _SSPCON2bits	set	145
   446  0094                     _SSPSTAT	set	148
   447  0085                     _TRISA	set	133
   448  0086                     _TRISB	set	134
   449  0087                     _TRISCbits	set	135
   450  0089                     _TRISE	set	137
   451  081E                     __stringdata:	
   452  081E                     STR_4:	
   453  081E  344E               	retlw	78	;'N'
   454  081F  346F               	retlw	111	;'o'
   455  0820  3420               	retlw	32	;' '
   456  0821  3452               	retlw	82	;'R'
   457  0822  3465               	retlw	101	;'e'
   458  0823  3461               	retlw	97	;'a'
   459  0824  3464               	retlw	100	;'d'
   460  0825  3420               	retlw	32	;' '
   461  0826  3443               	retlw	67	;'C'
   462  0827  346F               	retlw	111	;'o'
   463  0828  346E               	retlw	110	;'n'
   464  0829  3474               	retlw	116	;'t'
   465  082A  3472               	retlw	114	;'r'
   466  082B  346F               	retlw	111	;'o'
   467  082C  346C               	retlw	108	;'l'
   468  082D  3420               	retlw	32	;' '
   469  082E  3444               	retlw	68	;'D'
   470  082F  3461               	retlw	97	;'a'
   471  0830  3474               	retlw	116	;'t'
   472  0831  3461               	retlw	97	;'a'
   473  0832  3420               	retlw	32	;' '
   474  0833  3441               	retlw	65	;'A'
   475  0834  3443               	retlw	67	;'C'
   476  0835  344B               	retlw	75	;'K'
   477  0836  3420               	retlw	32	;' '
   478  0837  3466               	retlw	102	;'f'
   479  0838  3472               	retlw	114	;'r'
   480  0839  346F               	retlw	111	;'o'
   481  083A  346D               	retlw	109	;'m'
   482  083B  3420               	retlw	32	;' '
   483  083C  3473               	retlw	115	;'s'
   484  083D  346C               	retlw	108	;'l'
   485  083E  3461               	retlw	97	;'a'
   486  083F  3476               	retlw	118	;'v'
   487  0840  3465               	retlw	101	;'e'
   488  0841  3400               	retlw	0
   489  0842                     STR_3:	
   490  0842  344E               	retlw	78	;'N'
   491  0843  346F               	retlw	111	;'o'
   492  0844  3420               	retlw	32	;' '
   493  0845  3444               	retlw	68	;'D'
   494  0846  3461               	retlw	97	;'a'
   495  0847  3474               	retlw	116	;'t'
   496  0848  3461               	retlw	97	;'a'
   497  0849  3420               	retlw	32	;' '
   498  084A  3441               	retlw	65	;'A'
   499  084B  3443               	retlw	67	;'C'
   500  084C  344B               	retlw	75	;'K'
   501  084D  3420               	retlw	32	;' '
   502  084E  3466               	retlw	102	;'f'
   503  084F  3472               	retlw	114	;'r'
   504  0850  346F               	retlw	111	;'o'
   505  0851  346D               	retlw	109	;'m'
   506  0852  3420               	retlw	32	;' '
   507  0853  3473               	retlw	115	;'s'
   508  0854  346C               	retlw	108	;'l'
   509  0855  3461               	retlw	97	;'a'
   510  0856  3476               	retlw	118	;'v'
   511  0857  3465               	retlw	101	;'e'
   512  0858  3400               	retlw	0
   513  0859                     STR_5:	
   514  0859  3449               	retlw	73	;'I'
   515  085A  346E               	retlw	110	;'n'
   516  085B  3476               	retlw	118	;'v'
   517  085C  3461               	retlw	97	;'a'
   518  085D  346C               	retlw	108	;'l'
   519  085E  3469               	retlw	105	;'i'
   520  085F  3464               	retlw	100	;'d'
   521  0860  3420               	retlw	32	;' '
   522  0861  3443               	retlw	67	;'C'
   523  0862  3468               	retlw	104	;'h'
   524  0863  3469               	retlw	105	;'i'
   525  0864  3470               	retlw	112	;'p'
   526  0865  3420               	retlw	32	;' '
   527  0866  3449               	retlw	73	;'I'
   528  0867  3444               	retlw	68	;'D'
   529  0868  3400               	retlw	0
   530  0869                     STR_6:	
   531  0869  3453               	retlw	83	;'S'
   532  086A  3465               	retlw	101	;'e'
   533  086B  3461               	retlw	97	;'a'
   534  086C  3472               	retlw	114	;'r'
   535  086D  3463               	retlw	99	;'c'
   536  086E  3468               	retlw	104	;'h'
   537  086F  3420               	retlw	32	;' '
   538  0870  3443               	retlw	67	;'C'
   539  0871  346F               	retlw	111	;'o'
   540  0872  346D               	retlw	109	;'m'
   541  0873  3470               	retlw	112	;'p'
   542  0874  346C               	retlw	108	;'l'
   543  0875  3465               	retlw	101	;'e'
   544  0876  3474               	retlw	116	;'t'
   545  0877  3465               	retlw	101	;'e'
   546  0878  3400               	retlw	0
   547  0879                     STR_7:	
   548  0879  3453               	retlw	83	;'S'
   549  087A  3461               	retlw	97	;'a'
   550  087B  346D               	retlw	109	;'m'
   551  087C  3465               	retlw	101	;'e'
   552  087D  3420               	retlw	32	;' '
   553  087E  3446               	retlw	70	;'F'
   554  087F  3472               	retlw	114	;'r'
   555  0880  3465               	retlw	101	;'e'
   556  0881  3471               	retlw	113	;'q'
   557  0882  3400               	retlw	0
   558  0883                     STR_9:	
   559  0883  3425               	retlw	37	;'%'
   560  0884  3464               	retlw	100	;'d'
   561  0885  342E               	retlw	46	;'.'
   562  0886  3425               	retlw	37	;'%'
   563  0887  3464               	retlw	100	;'d'
   564  0888  3400               	retlw	0
   565  0889                     STR_2:	
   566  0889  344D               	retlw	77	;'M'
   567  088A  3400               	retlw	0
   568  088B                     STR_1:	
   569  088B  3453               	retlw	83	;'S'
   570  088C  3400               	retlw	0
   571  088D                     __end_of__stringdata:	
   572                           
   573                           ; #config settings
   574  0000                     
   575                           	psect	cinit
   576  0015                     start_initialization:	
   577  0015                     __initialization:	
   578                           
   579                           ; Clear objects allocated to BITCOMMON
   580  0015  01F9               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   581                           
   582                           ; Clear objects allocated to COMMON
   583  0016  01F6               	clrf	__pbssCOMMON& (0+127)
   584  0017  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   585  0018  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   586                           
   587                           ; Clear objects allocated to BANK1
   588  0019  1383               	bcf	3,7	;select IRP bank0
   589  001A  30DA               	movlw	low __pbssBANK1
   590  001B  0084               	movwf	4
   591  001C  30ED               	movlw	low (__pbssBANK1+19)
   592  001D  160A  118A  2611   	fcall	clear_ram0
      +       120A  118A         
   593                           
   594                           ; Clear objects allocated to BANK3
   595  0022  1783               	bsf	3,7	;select IRP bank2
   596  0023  3090               	movlw	low __pbssBANK3
   597  0024  0084               	movwf	4
   598  0025  309D               	movlw	low (__pbssBANK3+13)
   599  0026  160A  118A  2611   	fcall	clear_ram0
   600  0029                     end_of_initialization:	
   601                           ;End of C runtime variable initialization code
   602                           
   603  0029                     __end_of__initialization:	
   604  0029  0183               	clrf	3
   605  002A  120A  158A  2BB3   	ljmp	_main	;jump to C main() function
   606                           
   607                           	psect	bitbssCOMMON
   608  03C8                     __pbitbssCOMMON:	
   609  03C8                     _rs_flag:	
   610  03C8                     	ds	1
   611                           
   612                           	psect	bssCOMMON
   613  0076                     __pbssCOMMON:	
   614  0076                     _errno:	
   615  0076                     	ds	2
   616  0078                     print_signal_level@prev_lvl:	
   617  0078                     	ds	1
   618                           
   619                           	psect	bssBANK1
   620  00DA                     __pbssBANK1:	
   621  00DA                     tea5767@commandbytes:	
   622  00DA                     	ds	5
   623  00DF                     tea5767@responsebytes:	
   624  00DF                     	ds	5
   625  00E4                     tea5767@current_freq:	
   626  00E4                     	ds	3
   627  00E7                     print_freq@dec:	
   628  00E7                     	ds	1
   629  00E8                     _buff:	
   630  00E8                     	ds	5
   631                           
   632                           	psect	bssBANK3
   633  0190                     __pbssBANK3:	
   634  0190                     _commandbytes:	
   635  0190                     	ds	5
   636  0195                     _responsebytes:	
   637  0195                     	ds	5
   638  019A                     _current_freq:	
   639  019A                     	ds	3
   640                           
   641                           	psect	clrtext
   642  1611                     clear_ram0:	
   643                           ;	Called with FSR containing the base address, and
   644                           ;	W with the last address+1
   645                           
   646  1611  0064               	clrwdt	;clear the watchdog before getting into this loop
   647  1612                     clrloop0:	
   648  1612  0180               	clrf	0	;clear RAM location pointed to by FSR
   649  1613  0A84               	incf	4,f	;increment pointer
   650  1614  0604               	xorwf	4,w	;XOR with final address
   651  1615  1903               	btfsc	3,2	;have we reached the end yet?
   652  1616  3400               	retlw	0	;all done for this memory range, return
   653  1617  0604               	xorwf	4,w	;XOR again to restore value
   654  1618  2E12               	goto	clrloop0	;do the next byte
   655                           
   656                           	psect	cstackBANK1
   657  00A0                     __pcstackBANK1:	
   658  00A0                     ?___ftdiv:	
   659  00A0                     ___ftdiv@f2:	
   660                           ; 3 bytes @ 0x0
   661                           
   662                           
   663                           ; 3 bytes @ 0x0
   664  00A0                     	ds	3
   665  00A3                     ___ftdiv@f1:	
   666                           
   667                           ; 3 bytes @ 0x3
   668  00A3                     	ds	3
   669  00A6                     ??_tea5767_getfreq:	
   670  00A6                     ?___fttol:	
   671                           ; 0 bytes @ 0x6
   672                           
   673  00A6                     ___fttol@f1:	
   674                           ; 4 bytes @ 0x6
   675                           
   676                           
   677                           ; 3 bytes @ 0x6
   678  00A6                     	ds	2
   679  00A8                     tea5767_getfreq@byte1:	
   680                           
   681                           ; 1 bytes @ 0x8
   682  00A8                     	ds	1
   683  00A9                     tea5767_getfreq@dta:	
   684                           
   685                           ; 3 bytes @ 0x9
   686  00A9                     	ds	1
   687  00AA                     ??___fttol:	
   688                           
   689                           ; 0 bytes @ 0xA
   690  00AA                     	ds	2
   691  00AC                     _tea5767_getfreq$1037:	
   692                           
   693                           ; 3 bytes @ 0xC
   694  00AC                     	ds	3
   695  00AF                     _tea5767_getfreq$1038:	
   696                           
   697                           ; 3 bytes @ 0xF
   698  00AF                     	ds	5
   699  00B4                     ___fttol@sign1:	
   700                           
   701                           ; 1 bytes @ 0x14
   702  00B4                     	ds	1
   703  00B5                     ___fttol@lval:	
   704                           
   705                           ; 4 bytes @ 0x15
   706  00B5                     	ds	4
   707  00B9                     ___fttol@exp1:	
   708                           
   709                           ; 1 bytes @ 0x19
   710  00B9                     	ds	1
   711  00BA                     ?_tea5767_getpll:	
   712  00BA                     ?_trunc:	
   713                           ; 2 bytes @ 0x1A
   714                           
   715  00BA                     ?_tea5767_round_freq:	
   716                           ; 3 bytes @ 0x1A
   717                           
   718  00BA                     tea5767_getpll@freq:	
   719                           ; 3 bytes @ 0x1A
   720                           
   721  00BA                     tea5767_round_freq@freq:	
   722                           ; 3 bytes @ 0x1A
   723                           
   724  00BA                     trunc@x:	
   725                           ; 3 bytes @ 0x1A
   726                           
   727                           
   728                           ; 3 bytes @ 0x1A
   729  00BA                     	ds	3
   730  00BD                     ??_tea5767_init:	
   731  00BD                     ?_tea5767_tune:	
   732                           ; 0 bytes @ 0x1D
   733                           
   734  00BD                     tea5767_round_freq@d:	
   735                           ; 0 bytes @ 0x1D
   736                           
   737  00BD                     tea5767_tune@freq:	
   738                           ; 3 bytes @ 0x1D
   739                           
   740  00BD                     trunc@i:	
   741                           ; 3 bytes @ 0x1D
   742                           
   743                           
   744                           ; 3 bytes @ 0x1D
   745  00BD                     	ds	3
   746  00C0                     ??_tea5767_tune:	
   747  00C0                     tea5767_init@pll:	
   748                           ; 0 bytes @ 0x20
   749                           
   750  00C0                     trunc@expon:	
   751                           ; 2 bytes @ 0x20
   752                           
   753                           
   754                           ; 2 bytes @ 0x20
   755  00C0                     	ds	1
   756  00C1                     tea5767_tune@pll:	
   757                           
   758                           ; 2 bytes @ 0x21
   759  00C1                     	ds	1
   760  00C2                     ?_tea5767_tuned_freq:	
   761                           
   762                           ; 2 bytes @ 0x22
   763  00C2                     	ds	1
   764  00C3                     ??_tea5767_search:	
   765                           
   766                           ; 0 bytes @ 0x23
   767  00C3                     	ds	1
   768  00C4                     tea5767_search@prev_freq:	
   769  00C4                     _tea5767_tuned_freq$1039:	
   770                           ; 3 bytes @ 0x24
   771                           
   772                           
   773                           ; 3 bytes @ 0x24
   774  00C4                     	ds	3
   775  00C7                     tea5767_tuned_freq@f:	
   776  00C7                     tea5767_search@pll:	
   777                           ; 2 bytes @ 0x27
   778                           
   779                           
   780                           ; 2 bytes @ 0x27
   781  00C7                     	ds	2
   782  00C9                     ??_tea5767_search_up:	
   783  00C9                     tea5767_tuned_freq@tmp:	
   784                           ; 0 bytes @ 0x29
   785                           
   786                           
   787                           ; 3 bytes @ 0x29
   788  00C9                     	ds	3
   789  00CC                     tea5767_tuned_freq@d:	
   790                           
   791                           ; 2 bytes @ 0x2C
   792  00CC                     	ds	2
   793  00CE                     ??_print_freq:	
   794                           
   795                           ; 0 bytes @ 0x2E
   796  00CE                     	ds	2
   797  00D0                     print_freq@fr:	
   798                           
   799                           ; 2 bytes @ 0x30
   800  00D0                     	ds	2
   801  00D2                     print_freq@f:	
   802                           
   803                           ; 2 bytes @ 0x32
   804  00D2                     	ds	2
   805  00D4                     print_freq@i:	
   806                           
   807                           ; 2 bytes @ 0x34
   808  00D4                     	ds	2
   809  00D6                     ??_main:	
   810                           
   811                           ; 0 bytes @ 0x36
   812  00D6                     	ds	3
   813  00D9                     main@button_pressed:	
   814                           
   815                           ; 1 bytes @ 0x39
   816  00D9                     	ds	1
   817                           
   818                           	psect	cstackCOMMON
   819  0070                     __pcstackCOMMON:	
   820  0070                     ?_hd44780_init:	
   821  0070                     ?_tea5767_init:	
   822                           ; 0 bytes @ 0x0
   823                           
   824  0070                     ?_tea5767_read:	
   825                           ; 0 bytes @ 0x0
   826                           
   827  0070                     ?_tea5767_search_up:	
   828                           ; 0 bytes @ 0x0
   829                           
   830  0070                     ?_tea5767_write:	
   831                           ; 0 bytes @ 0x0
   832                           
   833  0070                     ?_tea5767_search:	
   834                           ; 0 bytes @ 0x0
   835                           
   836  0070                     ?_hd44780_busy:	
   837                           ; 0 bytes @ 0x0
   838                           
   839  0070                     ?_hd44780_write:	
   840                           ; 0 bytes @ 0x0
   841                           
   842  0070                     ?_hd44780_newline:	
   843                           ; 0 bytes @ 0x0
   844                           
   845  0070                     ?_serial_init:	
   846                           ; 0 bytes @ 0x0
   847                           
   848  0070                     ?_serial_tx_poll:	
   849                           ; 0 bytes @ 0x0
   850                           
   851  0070                     ?_serial_tx_print:	
   852                           ; 0 bytes @ 0x0
   853                           
   854  0070                     ?_serial_tx_printline:	
   855                           ; 0 bytes @ 0x0
   856                           
   857  0070                     ?_init:	
   858                           ; 0 bytes @ 0x0
   859                           
   860  0070                     ?_tc_int:	
   861                           ; 0 bytes @ 0x0
   862                           
   863  0070                     ??_tc_int:	
   864                           ; 0 bytes @ 0x0
   865                           
   866  0070                     ?_print_freq:	
   867                           ; 0 bytes @ 0x0
   868                           
   869  0070                     ?_print_signal_level:	
   870                           ; 0 bytes @ 0x0
   871                           
   872  0070                     ?_print_mode:	
   873                           ; 0 bytes @ 0x0
   874                           
   875  0070                     ?_i2c_start:	
   876                           ; 0 bytes @ 0x0
   877                           
   878  0070                     ?_i2c_stop:	
   879                           ; 0 bytes @ 0x0
   880                           
   881  0070                     ?_i2c_send_data:	
   882                           ; 0 bytes @ 0x0
   883                           
   884  0070                     ?_i2c_send_ack:	
   885                           ; 0 bytes @ 0x0
   886                           
   887  0070                     ?_i2c_send_nack:	
   888                           ; 0 bytes @ 0x0
   889                           
   890  0070                     ?_hd44780_pulse:	
   891                           ; 0 bytes @ 0x0
   892                           
   893  0070                     ?_hd44780_char:	
   894                           ; 0 bytes @ 0x0
   895                           
   896  0070                     ?_tea5767_signal_level:	
   897                           ; 0 bytes @ 0x0
   898                           
   899  0070                     ?_tea5767_mode:	
   900                           ; 1 bytes @ 0x0
   901                           
   902  0070                     ?_debounce_lo:	
   903                           ; 1 bytes @ 0x0
   904                           
   905  0070                     ?_i2c_read_data:	
   906                           ; 1 bytes @ 0x0
   907                           
   908  0070                     ?_main:	
   909                           ; 1 bytes @ 0x0
   910                           
   911                           
   912                           ; 2 bytes @ 0x0
   913  0070                     	ds	4
   914  0074                     ??_tea5767_signal_level:	
   915  0074                     ??_tea5767_mode:	
   916                           ; 0 bytes @ 0x4
   917                           
   918  0074                     ??_tea5767_getpll:	
   919                           ; 0 bytes @ 0x4
   920                           
   921  0074                     ??_hd44780_busy:	
   922                           ; 0 bytes @ 0x4
   923                           
   924  0074                     ??_hd44780_write:	
   925                           ; 0 bytes @ 0x4
   926                           
   927  0074                     ??_serial_init:	
   928                           ; 0 bytes @ 0x4
   929                           
   930  0074                     ??_serial_tx_poll:	
   931                           ; 0 bytes @ 0x4
   932                           
   933  0074                     ??_debounce_lo:	
   934                           ; 0 bytes @ 0x4
   935                           
   936  0074                     ??_i2c_start:	
   937                           ; 0 bytes @ 0x4
   938                           
   939  0074                     ??_i2c_stop:	
   940                           ; 0 bytes @ 0x4
   941                           
   942  0074                     ?_i2c_send_controlbyte:	
   943                           ; 0 bytes @ 0x4
   944                           
   945  0074                     ??_i2c_send_data:	
   946                           ; 0 bytes @ 0x4
   947                           
   948  0074                     ??_i2c_read_data:	
   949                           ; 0 bytes @ 0x4
   950                           
   951  0074                     ??_i2c_send_ack:	
   952                           ; 0 bytes @ 0x4
   953                           
   954  0074                     ??_i2c_send_nack:	
   955                           ; 0 bytes @ 0x4
   956                           
   957  0074                     ??_tea5767_round_freq:	
   958                           ; 0 bytes @ 0x4
   959                           
   960  0074                     ??_hd44780_pulse:	
   961                           ; 0 bytes @ 0x4
   962                           
   963  0074                     ??___awdiv:	
   964                           ; 0 bytes @ 0x4
   965                           
   966  0074                     ??___ftneg:	
   967                           ; 0 bytes @ 0x4
   968                           
   969  0074                     ??___lwdiv:	
   970                           ; 0 bytes @ 0x4
   971                           
   972  0074                     ??___wmul:	
   973                           ; 0 bytes @ 0x4
   974                           
   975  0074                     serial_tx_poll@val:	
   976                           ; 0 bytes @ 0x4
   977                           
   978  0074                     i2c_send_controlbyte@rw_bit:	
   979                           ; 1 bytes @ 0x4
   980                           
   981  0074                     i2c_send_data@dta:	
   982                           ; 1 bytes @ 0x4
   983                           
   984  0074                     ___wmul@product:	
   985                           ; 1 bytes @ 0x4
   986                           
   987                           
   988                           ; 2 bytes @ 0x4
   989  0074                     	ds	1
   990  0075                     ??_serial_tx_print:	
   991  0075                     ??_i2c_send_controlbyte:	
   992                           ; 0 bytes @ 0x5
   993                           
   994  0075                     ??___lwmod:	
   995                           ; 0 bytes @ 0x5
   996                           
   997                           
   998                           ; 0 bytes @ 0x5
   999  0075                     	ds	1
  1000  0076                     ??_hd44780_printstr:	
  1001  0076                     ??_tea5767_write:	
  1002                           ; 0 bytes @ 0x6
  1003                           
  1004  0076                     ??_hd44780_newline:	
  1005                           ; 0 bytes @ 0x6
  1006                           
  1007  0076                     ??_serial_tx_printline:	
  1008                           ; 0 bytes @ 0x6
  1009                           
  1010  0076                     ??_hd44780_char:	
  1011                           ; 0 bytes @ 0x6
  1012                           
  1013                           
  1014                           	psect	cstackBANK0
  1015  0020                     __pcstackBANK0:	
  1016                           ; 0 bytes @ 0x6
  1017                           
  1018  0020                     ?___ftge:	
  1019  0020                     ?___awdiv:	
  1020                           ; 1 bit 
  1021                           
  1022  0020                     ?___lwdiv:	
  1023                           ; 2 bytes @ 0x0
  1024                           
  1025  0020                     ?___wmul:	
  1026                           ; 2 bytes @ 0x0
  1027                           
  1028  0020                     ?___ftpack:	
  1029                           ; 2 bytes @ 0x0
  1030                           
  1031  0020                     ?_frexp:	
  1032                           ; 3 bytes @ 0x0
  1033                           
  1034  0020                     ?___ftneg:	
  1035                           ; 3 bytes @ 0x0
  1036                           
  1037  0020                     serial_tx_print@str:	
  1038                           ; 3 bytes @ 0x0
  1039                           
  1040  0020                     debounce_lo@prt:	
  1041                           ; 1 bytes @ 0x0
  1042                           
  1043  0020                     i2c_send_controlbyte@addr:	
  1044                           ; 1 bytes @ 0x0
  1045                           
  1046  0020                     hd44780_write@bt:	
  1047                           ; 1 bytes @ 0x0
  1048                           
  1049  0020                     ___awdiv@divisor:	
  1050                           ; 1 bytes @ 0x0
  1051                           
  1052  0020                     ___lwdiv@divisor:	
  1053                           ; 2 bytes @ 0x0
  1054                           
  1055  0020                     ___wmul@multiplier:	
  1056                           ; 2 bytes @ 0x0
  1057                           
  1058  0020                     ___ftpack@arg:	
  1059                           ; 2 bytes @ 0x0
  1060                           
  1061  0020                     frexp@value:	
  1062                           ; 3 bytes @ 0x0
  1063                           
  1064  0020                     ___ftge@ff1:	
  1065                           ; 3 bytes @ 0x0
  1066                           
  1067  0020                     ___ftneg@f1:	
  1068                           ; 3 bytes @ 0x0
  1069                           
  1070                           
  1071                           ; 3 bytes @ 0x0
  1072  0020                     	ds	1
  1073  0021                     serial_tx_printline@str:	
  1074  0021                     debounce_lo@count:	
  1075                           ; 1 bytes @ 0x1
  1076                           
  1077  0021                     hd44780_write@tmp:	
  1078                           ; 1 bytes @ 0x1
  1079                           
  1080                           
  1081                           ; 1 bytes @ 0x1
  1082  0021                     	ds	1
  1083  0022                     ??_hd44780_init:	
  1084  0022                     ??_tea5767_read:	
  1085                           ; 0 bytes @ 0x2
  1086                           
  1087  0022                     hd44780_char@bt:	
  1088                           ; 0 bytes @ 0x2
  1089                           
  1090  0022                     ___awdiv@dividend:	
  1091                           ; 1 bytes @ 0x2
  1092                           
  1093  0022                     ___lwdiv@dividend:	
  1094                           ; 2 bytes @ 0x2
  1095                           
  1096  0022                     ___wmul@multiplicand:	
  1097                           ; 2 bytes @ 0x2
  1098                           
  1099                           
  1100                           ; 2 bytes @ 0x2
  1101  0022                     	ds	1
  1102  0023                     ?_hd44780_block_erase:	
  1103  0023                     ?_hd44780_printstr:	
  1104                           ; 0 bytes @ 0x3
  1105                           
  1106  0023                     hd44780_block_erase@length:	
  1107                           ; 0 bytes @ 0x3
  1108                           
  1109  0023                     ___ftpack@exp:	
  1110                           ; 1 bytes @ 0x3
  1111                           
  1112  0023                     frexp@eptr:	
  1113                           ; 1 bytes @ 0x3
  1114                           
  1115  0023                     hd44780_printstr@dta:	
  1116                           ; 1 bytes @ 0x3
  1117                           
  1118  0023                     ___ftge@ff2:	
  1119                           ; 2 bytes @ 0x3
  1120                           
  1121                           
  1122                           ; 3 bytes @ 0x3
  1123  0023                     	ds	1
  1124  0024                     ??_hd44780_block_erase:	
  1125  0024                     ??_frexp:	
  1126                           ; 0 bytes @ 0x4
  1127                           
  1128  0024                     ??_init:	
  1129                           ; 0 bytes @ 0x4
  1130                           
  1131  0024                     ___awdiv@counter:	
  1132                           ; 0 bytes @ 0x4
  1133                           
  1134  0024                     ___ftpack@sign:	
  1135                           ; 1 bytes @ 0x4
  1136                           
  1137  0024                     ___lwdiv@counter:	
  1138                           ; 1 bytes @ 0x4
  1139                           
  1140                           
  1141                           ; 1 bytes @ 0x4
  1142  0024                     	ds	1
  1143  0025                     ??___ftpack:	
  1144  0025                     hd44780_printstr@loc:	
  1145                           ; 0 bytes @ 0x5
  1146                           
  1147  0025                     hd44780_block_erase@start_loc:	
  1148                           ; 1 bytes @ 0x5
  1149                           
  1150  0025                     ___awdiv@sign:	
  1151                           ; 1 bytes @ 0x5
  1152                           
  1153  0025                     ___lwdiv@quotient:	
  1154                           ; 1 bytes @ 0x5
  1155                           
  1156                           
  1157                           ; 2 bytes @ 0x5
  1158  0025                     	ds	1
  1159  0026                     ??_print_mode:	
  1160  0026                     ??___ftge:	
  1161                           ; 0 bytes @ 0x6
  1162                           
  1163  0026                     hd44780_block_erase@i:	
  1164                           ; 0 bytes @ 0x6
  1165                           
  1166  0026                     ___awdiv@quotient:	
  1167                           ; 2 bytes @ 0x6
  1168                           
  1169                           
  1170                           ; 2 bytes @ 0x6
  1171  0026                     	ds	1
  1172  0027                     ?___lwmod:	
  1173  0027                     ___lwmod@divisor:	
  1174                           ; 2 bytes @ 0x7
  1175                           
  1176                           
  1177                           ; 2 bytes @ 0x7
  1178  0027                     	ds	1
  1179  0028                     ?___altoft:	
  1180  0028                     ?___awtoft:	
  1181                           ; 3 bytes @ 0x8
  1182                           
  1183  0028                     print_mode@mode:	
  1184                           ; 3 bytes @ 0x8
  1185                           
  1186  0028                     ___awtoft@c:	
  1187                           ; 2 bytes @ 0x8
  1188                           
  1189  0028                     ___altoft@c:	
  1190                           ; 2 bytes @ 0x8
  1191                           
  1192                           
  1193                           ; 4 bytes @ 0x8
  1194  0028                     	ds	1
  1195  0029                     ___lwmod@dividend:	
  1196                           
  1197                           ; 2 bytes @ 0x9
  1198  0029                     	ds	2
  1199  002B                     ??___awtoft:	
  1200  002B                     ___lwmod@counter:	
  1201                           ; 0 bytes @ 0xB
  1202                           
  1203                           
  1204                           ; 1 bytes @ 0xB
  1205  002B                     	ds	1
  1206  002C                     ??___altoft:	
  1207  002C                     ?_sprintf:	
  1208                           ; 0 bytes @ 0xC
  1209                           
  1210  002C                     sprintf@f:	
  1211                           ; 2 bytes @ 0xC
  1212                           
  1213                           
  1214                           ; 1 bytes @ 0xC
  1215  002C                     	ds	2
  1216  002E                     ___awtoft@sign:	
  1217                           
  1218                           ; 1 bytes @ 0xE
  1219  002E                     	ds	1
  1220  002F                     ?___ftadd:	
  1221  002F                     ___ftadd@f1:	
  1222                           ; 3 bytes @ 0xF
  1223                           
  1224                           
  1225                           ; 3 bytes @ 0xF
  1226  002F                     	ds	1
  1227  0030                     ___altoft@exp:	
  1228                           
  1229                           ; 1 bytes @ 0x10
  1230  0030                     	ds	1
  1231  0031                     ??_sprintf:	
  1232  0031                     ___altoft@sign:	
  1233                           ; 0 bytes @ 0x11
  1234                           
  1235                           
  1236                           ; 1 bytes @ 0x11
  1237  0031                     	ds	1
  1238  0032                     ___ftadd@f2:	
  1239                           
  1240                           ; 3 bytes @ 0x12
  1241  0032                     	ds	2
  1242  0034                     sprintf@ap:	
  1243                           
  1244                           ; 1 bytes @ 0x14
  1245  0034                     	ds	1
  1246  0035                     ??___ftadd:	
  1247  0035                     sprintf@flag:	
  1248                           ; 0 bytes @ 0x15
  1249                           
  1250                           
  1251                           ; 1 bytes @ 0x15
  1252  0035                     	ds	1
  1253  0036                     sprintf@prec:	
  1254                           
  1255                           ; 1 bytes @ 0x16
  1256  0036                     	ds	1
  1257  0037                     sprintf@_val:	
  1258                           
  1259                           ; 4 bytes @ 0x17
  1260  0037                     	ds	4
  1261  003B                     sprintf@sp:	
  1262                           
  1263                           ; 1 bytes @ 0x1B
  1264  003B                     	ds	1
  1265  003C                     sprintf@c:	
  1266  003C                     ___ftadd@sign:	
  1267                           ; 1 bytes @ 0x1C
  1268                           
  1269                           
  1270                           ; 1 bytes @ 0x1C
  1271  003C                     	ds	1
  1272  003D                     ?_hd44780_printdecimal:	
  1273  003D                     ?_hd44780_printint:	
  1274                           ; 0 bytes @ 0x1D
  1275                           
  1276  003D                     ___ftadd@exp2:	
  1277                           ; 0 bytes @ 0x1D
  1278                           
  1279  003D                     hd44780_printint@dta:	
  1280                           ; 1 bytes @ 0x1D
  1281                           
  1282  003D                     hd44780_printdecimal@i:	
  1283                           ; 2 bytes @ 0x1D
  1284                           
  1285                           
  1286                           ; 2 bytes @ 0x1D
  1287  003D                     	ds	1
  1288  003E                     ___ftadd@exp1:	
  1289                           
  1290                           ; 1 bytes @ 0x1E
  1291  003E                     	ds	1
  1292  003F                     ?_ceil:	
  1293  003F                     hd44780_printint@loc:	
  1294                           ; 3 bytes @ 0x1F
  1295                           
  1296  003F                     hd44780_printdecimal@d:	
  1297                           ; 1 bytes @ 0x1F
  1298                           
  1299  003F                     ceil@x:	
  1300                           ; 2 bytes @ 0x1F
  1301                           
  1302                           
  1303                           ; 3 bytes @ 0x1F
  1304  003F                     	ds	1
  1305  0040                     ??_hd44780_printint:	
  1306                           
  1307                           ; 0 bytes @ 0x20
  1308  0040                     	ds	1
  1309  0041                     ??_print_signal_level:	
  1310  0041                     hd44780_printdecimal@loc:	
  1311                           ; 0 bytes @ 0x21
  1312                           
  1313                           
  1314                           ; 1 bytes @ 0x21
  1315  0041                     	ds	1
  1316  0042                     ??_hd44780_printdecimal:	
  1317  0042                     ??_ceil:	
  1318                           ; 0 bytes @ 0x22
  1319                           
  1320                           
  1321                           ; 0 bytes @ 0x22
  1322  0042                     	ds	1
  1323  0043                     print_signal_level@lvl:	
  1324                           
  1325                           ; 2 bytes @ 0x23
  1326  0043                     	ds	5
  1327  0048                     ceil@i:	
  1328                           
  1329                           ; 3 bytes @ 0x28
  1330  0048                     	ds	3
  1331  004B                     ceil@expon:	
  1332                           
  1333                           ; 2 bytes @ 0x2B
  1334  004B                     	ds	2
  1335  004D                     ?___ftmul:	
  1336  004D                     ___ftmul@f1:	
  1337                           ; 3 bytes @ 0x2D
  1338                           
  1339                           
  1340                           ; 3 bytes @ 0x2D
  1341  004D                     	ds	3
  1342  0050                     ___ftmul@f2:	
  1343                           
  1344                           ; 3 bytes @ 0x30
  1345  0050                     	ds	3
  1346  0053                     ??___ftmul:	
  1347                           
  1348                           ; 0 bytes @ 0x33
  1349  0053                     	ds	10
  1350  005D                     ??___ftdiv:	
  1351                           
  1352                           ; 0 bytes @ 0x3D
  1353  005D                     	ds	6
  1354  0063                     ___ftmul@exp:	
  1355                           
  1356                           ; 1 bytes @ 0x43
  1357  0063                     	ds	1
  1358  0064                     ___ftmul@f3_as_product:	
  1359                           
  1360                           ; 3 bytes @ 0x44
  1361  0064                     	ds	3
  1362  0067                     ___ftdiv@cntr:	
  1363  0067                     ___ftmul@cntr:	
  1364                           ; 1 bytes @ 0x47
  1365                           
  1366                           
  1367                           ; 1 bytes @ 0x47
  1368  0067                     	ds	1
  1369  0068                     ___ftmul@sign:	
  1370  0068                     ___ftdiv@f3:	
  1371                           ; 1 bytes @ 0x48
  1372                           
  1373                           
  1374                           ; 3 bytes @ 0x48
  1375  0068                     	ds	3
  1376  006B                     ___ftdiv@exp:	
  1377                           
  1378                           ; 1 bytes @ 0x4B
  1379  006B                     	ds	1
  1380  006C                     ___ftdiv@sign:	
  1381                           
  1382                           ; 1 bytes @ 0x4C
  1383  006C                     	ds	1
  1384  006D                     ??_trunc:	
  1385  006D                     ?_tea5767_getfreq:	
  1386                           ; 0 bytes @ 0x4D
  1387                           
  1388  006D                     tea5767_getfreq@byte2:	
  1389                           ; 3 bytes @ 0x4D
  1390                           
  1391  006D                     _tea5767_getpll$1036:	
  1392                           ; 1 bytes @ 0x4D
  1393                           
  1394                           
  1395                           ; 3 bytes @ 0x4D
  1396  006D                     	ds	1
  1397  006E                     ??_tea5767_tuned_freq:	
  1398                           
  1399                           ; 0 bytes @ 0x4E
  1400  006E                     	ds	2
  1401                           
  1402                           	psect	maintext
  1403  0BB3                     __pmaintext:	
  1404 ;;
  1405 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1406 ;;
  1407 ;; *************** function _main *****************
  1408 ;; Defined at:
  1409 ;;		line 163 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\main.c"
  1410 ;; Parameters:    Size  Location     Type
  1411 ;;		None
  1412 ;; Auto vars:     Size  Location     Type
  1413 ;;  button_press    1   57[BANK1 ] unsigned char 
  1414 ;; Return value:  Size  Location     Type
  1415 ;;                  2  153[COMMON] int 
  1416 ;; Registers used:
  1417 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1418 ;; Tracked objects:
  1419 ;;		On entry : 17F/0
  1420 ;;		On exit  : 0/0
  1421 ;;		Unchanged: 0/0
  1422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1423 ;;      Params:         0       0       0       0       0
  1424 ;;      Locals:         0       0       1       0       0
  1425 ;;      Temps:          0       0       3       0       0
  1426 ;;      Totals:         0       0       4       0       0
  1427 ;;Total ram usage:        4 bytes
  1428 ;; Hardware stack levels required when called:    8
  1429 ;; This function calls:
  1430 ;;		_debounce_lo
  1431 ;;		_init
  1432 ;;		_print_freq
  1433 ;;		_print_mode
  1434 ;;		_print_signal_level
  1435 ;;		_tea5767_init
  1436 ;;		_tea5767_read
  1437 ;;		_tea5767_search_up
  1438 ;; This function is called by:
  1439 ;;		Startup code after reset
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443                           
  1444                           ;psect for function _main
  1445  0BB3                     _main:	
  1446                           
  1447                           ;main.c: 166: uint8_t button_pressed = 0;
  1448                           
  1449                           ;incstack = 0
  1450                           ; Regs used in _main: [allreg]
  1451  0BB3  1683               	bsf	3,5	;RP0=1, select bank1
  1452  0BB4  1303               	bcf	3,6	;RP1=0, select bank1
  1453  0BB5  01D9               	clrf	main@button_pressed^(0+128)
  1454                           
  1455                           ;main.c: 168: init();
  1456  0BB6  120A  158A  2141   	fcall	_init
      +       120A  158A         
  1457                           
  1458                           ;main.c: 169: tea5767_init();
  1459  0BBB  120A  158A  21F6   	fcall	_tea5767_init
      +       120A  158A         
  1460  0BC0                     l5220:	
  1461                           ;main.c: 245: while( 1 ){
  1462                           
  1463                           
  1464                           ;main.c: 257: tea5767_read();
  1465  0BC0  120A  158A  2640   	fcall	_tea5767_read
      +       120A  158A         
  1466                           
  1467                           ;main.c: 258: print_signal_level();
  1468  0BC5  120A  158A  20CE   	fcall	_print_signal_level
      +       120A  158A         
  1469                           
  1470                           ;main.c: 259: print_freq();
  1471  0BCA  120A  118A  254D   	fcall	_print_freq
      +       120A  158A         
  1472                           
  1473                           ;main.c: 260: print_mode();
  1474  0BCF  160A  118A  2784   	fcall	_print_mode
      +       120A  158A         
  1475                           
  1476                           ;main.c: 267: if( !button_pressed && debounce_lo( RB1 ) ){
  1477  0BD4  1683               	bsf	3,5	;RP0=1, select bank1
  1478  0BD5  1303               	bcf	3,6	;RP1=0, select bank1
  1479  0BD6  08D9               	movf	main@button_pressed^(0+128),f
  1480  0BD7  1D03               	skipz
  1481  0BD8  2BF3               	goto	l155
  1482  0BD9  3000               	movlw	0
  1483  0BDA  1283               	bcf	3,5	;RP0=0, select bank0
  1484  0BDB  1303               	bcf	3,6	;RP1=0, select bank0
  1485  0BDC  1886               	btfsc	6,1	;volatile
  1486  0BDD  3001               	movlw	1
  1487  0BDE  160A  118A  2715   	fcall	_debounce_lo
      +       120A  158A         
  1488  0BE3  3A00               	xorlw	0
  1489  0BE4  1903               	skipnz
  1490  0BE5  2BF3               	goto	l155
  1491                           
  1492                           ;main.c: 268: RB2 = 0x01;
  1493  0BE6  1283               	bcf	3,5	;RP0=0, select bank0
  1494  0BE7  1303               	bcf	3,6	;RP1=0, select bank0
  1495  0BE8  1506               	bsf	6,2	;volatile
  1496                           
  1497                           ;main.c: 271: tea5767_search_up();
  1498  0BE9  160A  118A  268B   	fcall	_tea5767_search_up
      +       120A  158A         
  1499                           
  1500                           ;main.c: 272: button_pressed = 1;
  1501  0BEE  1683               	bsf	3,5	;RP0=1, select bank1
  1502  0BEF  1303               	bcf	3,6	;RP1=0, select bank1
  1503  0BF0  01D9               	clrf	main@button_pressed^(0+128)
  1504  0BF1  0AD9               	incf	main@button_pressed^(0+128),f
  1505                           
  1506                           ;main.c: 277: }else{
  1507  0BF2  2C04               	goto	l5242
  1508  0BF3                     l155:	
  1509                           
  1510                           ;main.c: 278: RB2 = 0x00;
  1511  0BF3  1283               	bcf	3,5	;RP0=0, select bank0
  1512  0BF4  1303               	bcf	3,6	;RP1=0, select bank0
  1513  0BF5  1106               	bcf	6,2	;volatile
  1514                           
  1515                           ;main.c: 279: if(!debounce_lo( RB1 ))
  1516  0BF6  3000               	movlw	0
  1517  0BF7  1886               	btfsc	6,1	;volatile
  1518  0BF8  3001               	movlw	1
  1519  0BF9  160A  118A  2715   	fcall	_debounce_lo
      +       120A  158A         
  1520  0BFE  3800               	iorlw	0
  1521  0BFF  1D03               	skipz
  1522  0C00  2C04               	goto	l5242
  1523                           
  1524                           ;main.c: 280: button_pressed = 0;
  1525  0C01  1683               	bsf	3,5	;RP0=1, select bank1
  1526  0C02  1303               	bcf	3,6	;RP1=0, select bank1
  1527  0C03  01D9               	clrf	main@button_pressed^(0+128)
  1528  0C04                     l5242:	
  1529                           
  1530                           ;main.c: 281: }
  1531                           ;main.c: 283: _delay((unsigned long)((100)*(20000000/4000.0)));
  1532  0C04  3003               	movlw	3
  1533  0C05  1683               	bsf	3,5	;RP0=1, select bank1
  1534  0C06  1303               	bcf	3,6	;RP1=0, select bank1
  1535  0C07  00D8               	movwf	(??_main^(0+128)+2)
  1536  0C08  308A               	movlw	138
  1537  0C09  00D7               	movwf	(??_main^(0+128)+1)
  1538  0C0A  3056               	movlw	86
  1539  0C0B  00D6               	movwf	??_main^(0+128)
  1540  0C0C                     u5177:	
  1541  0C0C  0BD6               	decfsz	??_main^(0+128),f
  1542  0C0D  2C0C               	goto	u5177
  1543  0C0E  0BD7               	decfsz	(??_main^(0+128)+1),f
  1544  0C0F  2C0C               	goto	u5177
  1545  0C10  0BD8               	decfsz	(??_main^(0+128)+2),f
  1546  0C11  2C0C               	goto	u5177
  1547  0C12  2C13               	nop2
  1548  0C13  2BC0               	goto	l5220
  1549  0C14                     __end_of_main:	
  1550                           ;main.c: 284: }
  1551                           ;main.c: 286: return 0;
  1552                           ;	Return value of _main is never used
  1553                           
  1554                           
  1555                           	psect	text1
  1556  168B                     __ptext1:	
  1557 ;; *************** function _tea5767_search_up *****************
  1558 ;; Defined at:
  1559 ;;		line 214 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\tea5767.c"
  1560 ;; Parameters:    Size  Location     Type
  1561 ;;		None
  1562 ;; Auto vars:     Size  Location     Type
  1563 ;;		None
  1564 ;; Return value:  Size  Location     Type
  1565 ;;		None               void
  1566 ;; Registers used:
  1567 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1568 ;; Tracked objects:
  1569 ;;		On entry : 0/0
  1570 ;;		On exit  : 0/0
  1571 ;;		Unchanged: 0/0
  1572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1573 ;;      Params:         0       0       0       0       0
  1574 ;;      Locals:         0       0       0       0       0
  1575 ;;      Temps:          0       0       1       0       0
  1576 ;;      Totals:         0       0       1       0       0
  1577 ;;Total ram usage:        1 bytes
  1578 ;; Hardware stack levels used:    1
  1579 ;; Hardware stack levels required when called:    7
  1580 ;; This function calls:
  1581 ;;		_tea5767_search
  1582 ;; This function is called by:
  1583 ;;		_main
  1584 ;; This function uses a non-reentrant model
  1585 ;;
  1586                           
  1587                           
  1588                           ;psect for function _tea5767_search_up
  1589  168B                     _tea5767_search_up:	
  1590                           
  1591                           ;tea5767.c: 216: commandbytes[2] |= SUD_UP;
  1592                           
  1593                           ;incstack = 0
  1594 ;; using string table level
  1595                           ; Regs used in _tea5767_search_up: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1596  168B  300E               	movlw	_SUD_UP-__stringbase
  1597  168C  0084               	movwf	4
  1598  168D  120A  158A  200A   	fcall	stringdir
      +       160A  118A         
  1599  1692  1683               	bsf	3,5	;RP0=1, select bank1
  1600  1693  1303               	bcf	3,6	;RP1=0, select bank1
  1601  1694  00C9               	movwf	??_tea5767_search_up^(0+128)
  1602  1695  0849               	movf	??_tea5767_search_up^(0+128),w
  1603  1696  04DC               	iorwf	(tea5767@commandbytes^(0+128)+2),f
  1604                           
  1605                           ;tea5767.c: 217: tea5767_search();
  1606  1697  120A  118A  202D   	fcall	_tea5767_search
  1607  169A  0008               	return
  1608  169B                     __end_of_tea5767_search_up:	
  1609                           
  1610                           	psect	text2
  1611  002D                     __ptext2:	
  1612 ;; *************** function _tea5767_search *****************
  1613 ;; Defined at:
  1614 ;;		line 228 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\tea5767.c"
  1615 ;; Parameters:    Size  Location     Type
  1616 ;;		None
  1617 ;; Auto vars:     Size  Location     Type
  1618 ;;  prev_freq       3   36[BANK1 ] int 
  1619 ;;  pll             2   39[BANK1 ] unsigned int 
  1620 ;; Return value:  Size  Location     Type
  1621 ;;		None               void
  1622 ;; Registers used:
  1623 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1624 ;; Tracked objects:
  1625 ;;		On entry : 0/0
  1626 ;;		On exit  : 0/0
  1627 ;;		Unchanged: 0/0
  1628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1629 ;;      Params:         0       0       0       0       0
  1630 ;;      Locals:         0       0       5       0       0
  1631 ;;      Temps:          0       0       1       0       0
  1632 ;;      Totals:         0       0       6       0       0
  1633 ;;Total ram usage:        6 bytes
  1634 ;; Hardware stack levels used:    1
  1635 ;; Hardware stack levels required when called:    6
  1636 ;; This function calls:
  1637 ;;		___ftadd
  1638 ;;		___ftge
  1639 ;;		___ftneg
  1640 ;;		_serial_tx_printline
  1641 ;;		_tea5767_getfreq
  1642 ;;		_tea5767_getpll
  1643 ;;		_tea5767_read
  1644 ;;		_tea5767_round_freq
  1645 ;;		_tea5767_tune
  1646 ;;		_tea5767_write
  1647 ;; This function is called by:
  1648 ;;		_tea5767_search_up
  1649 ;;		_tea5767_search_down
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652                           
  1653                           
  1654                           ;psect for function _tea5767_search
  1655  002D                     _tea5767_search:	
  1656                           
  1657                           ;tea5767.c: 231: double prev_freq;
  1658                           ;tea5767.c: 233: current_freq += 0.1;
  1659                           
  1660                           ;incstack = 0
  1661 ;; using string table level
  1662                           ; Regs used in _tea5767_search: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1663  002D  30CD               	movlw	205
  1664  002E  1283               	bcf	3,5	;RP0=0, select bank0
  1665  002F  1303               	bcf	3,6	;RP1=0, select bank0
  1666  0030  00AF               	movwf	___ftadd@f1
  1667  0031  30CC               	movlw	204
  1668  0032  00B0               	movwf	___ftadd@f1+1
  1669  0033  303D               	movlw	61
  1670  0034  00B1               	movwf	___ftadd@f1+2
  1671  0035  1683               	bsf	3,5	;RP0=1, select bank1
  1672  0036  1303               	bcf	3,6	;RP1=0, select bank1
  1673  0037  0864               	movf	tea5767@current_freq^(0+128),w
  1674  0038  1283               	bcf	3,5	;RP0=0, select bank0
  1675  0039  1303               	bcf	3,6	;RP1=0, select bank0
  1676  003A  00B2               	movwf	___ftadd@f2
  1677  003B  1683               	bsf	3,5	;RP0=1, select bank1
  1678  003C  1303               	bcf	3,6	;RP1=0, select bank1
  1679  003D  0865               	movf	(tea5767@current_freq+1)^(0+128),w
  1680  003E  1283               	bcf	3,5	;RP0=0, select bank0
  1681  003F  1303               	bcf	3,6	;RP1=0, select bank0
  1682  0040  00B3               	movwf	___ftadd@f2+1
  1683  0041  1683               	bsf	3,5	;RP0=1, select bank1
  1684  0042  1303               	bcf	3,6	;RP1=0, select bank1
  1685  0043  0866               	movf	(tea5767@current_freq+2)^(0+128),w
  1686  0044  1283               	bcf	3,5	;RP0=0, select bank0
  1687  0045  1303               	bcf	3,6	;RP1=0, select bank0
  1688  0046  00B4               	movwf	___ftadd@f2+2
  1689  0047  120A  118A  2184   	fcall	___ftadd
      +       120A  118A         
  1690  004C  1283               	bcf	3,5	;RP0=0, select bank0
  1691  004D  1303               	bcf	3,6	;RP1=0, select bank0
  1692  004E  082F               	movf	?___ftadd,w
  1693  004F  1683               	bsf	3,5	;RP0=1, select bank1
  1694  0050  1303               	bcf	3,6	;RP1=0, select bank1
  1695  0051  00E4               	movwf	tea5767@current_freq^(0+128)
  1696  0052  1283               	bcf	3,5	;RP0=0, select bank0
  1697  0053  1303               	bcf	3,6	;RP1=0, select bank0
  1698  0054  0830               	movf	?___ftadd+1,w
  1699  0055  1683               	bsf	3,5	;RP0=1, select bank1
  1700  0056  1303               	bcf	3,6	;RP1=0, select bank1
  1701  0057  00E5               	movwf	(tea5767@current_freq+1)^(0+128)
  1702  0058  1283               	bcf	3,5	;RP0=0, select bank0
  1703  0059  1303               	bcf	3,6	;RP1=0, select bank0
  1704  005A  0831               	movf	?___ftadd+2,w
  1705  005B  1683               	bsf	3,5	;RP0=1, select bank1
  1706  005C  1303               	bcf	3,6	;RP1=0, select bank1
  1707  005D  00E6               	movwf	(tea5767@current_freq+2)^(0+128)
  1708                           
  1709                           ;tea5767.c: 235: if( current_freq > 108.0 ){
  1710  005E  3000               	movlw	0
  1711  005F  1283               	bcf	3,5	;RP0=0, select bank0
  1712  0060  1303               	bcf	3,6	;RP1=0, select bank0
  1713  0061  00A0               	movwf	___ftge@ff1
  1714  0062  30D8               	movlw	216
  1715  0063  00A1               	movwf	___ftge@ff1+1
  1716  0064  3042               	movlw	66
  1717  0065  00A2               	movwf	___ftge@ff1+2
  1718  0066  1683               	bsf	3,5	;RP0=1, select bank1
  1719  0067  1303               	bcf	3,6	;RP1=0, select bank1
  1720  0068  0864               	movf	tea5767@current_freq^(0+128),w
  1721  0069  1283               	bcf	3,5	;RP0=0, select bank0
  1722  006A  1303               	bcf	3,6	;RP1=0, select bank0
  1723  006B  00A3               	movwf	___ftge@ff2
  1724  006C  1683               	bsf	3,5	;RP0=1, select bank1
  1725  006D  1303               	bcf	3,6	;RP1=0, select bank1
  1726  006E  0865               	movf	(tea5767@current_freq+1)^(0+128),w
  1727  006F  1283               	bcf	3,5	;RP0=0, select bank0
  1728  0070  1303               	bcf	3,6	;RP1=0, select bank0
  1729  0071  00A4               	movwf	___ftge@ff2+1
  1730  0072  1683               	bsf	3,5	;RP0=1, select bank1
  1731  0073  1303               	bcf	3,6	;RP1=0, select bank1
  1732  0074  0866               	movf	(tea5767@current_freq+2)^(0+128),w
  1733  0075  1283               	bcf	3,5	;RP0=0, select bank0
  1734  0076  1303               	bcf	3,6	;RP1=0, select bank0
  1735  0077  00A5               	movwf	___ftge@ff2+2
  1736  0078  120A  158A  2354   	fcall	___ftge
      +       120A  118A         
  1737  007D  1803               	btfsc	3,0
  1738  007E  2887               	goto	l5320
  1739                           
  1740                           ;tea5767.c: 236: current_freq = 87.0;
  1741  007F  3000               	movlw	0
  1742  0080  1683               	bsf	3,5	;RP0=1, select bank1
  1743  0081  1303               	bcf	3,6	;RP1=0, select bank1
  1744  0082  00E4               	movwf	tea5767@current_freq^(0+128)
  1745  0083  30AE               	movlw	174
  1746  0084  00E5               	movwf	(tea5767@current_freq+1)^(0+128)
  1747  0085  3042               	movlw	66
  1748  0086  00E6               	movwf	(tea5767@current_freq+2)^(0+128)
  1749  0087                     l5320:	
  1750                           
  1751                           ;tea5767.c: 237: }
  1752                           ;tea5767.c: 239: unsigned int pll = tea5767_getpll( current_freq );
  1753  0087  1683               	bsf	3,5	;RP0=1, select bank1
  1754  0088  1303               	bcf	3,6	;RP1=0, select bank1
  1755  0089  0864               	movf	tea5767@current_freq^(0+128),w
  1756  008A  00BA               	movwf	tea5767_getpll@freq^(0+128)
  1757  008B  0865               	movf	(tea5767@current_freq+1)^(0+128),w
  1758  008C  00BB               	movwf	(tea5767_getpll@freq+1)^(0+128)
  1759  008D  0866               	movf	(tea5767@current_freq+2)^(0+128),w
  1760  008E  00BC               	movwf	(tea5767_getpll@freq+2)^(0+128)
  1761  008F  120A  158A  25C6   	fcall	_tea5767_getpll
      +       120A  118A         
  1762  0094  1683               	bsf	3,5	;RP0=1, select bank1
  1763  0095  1303               	bcf	3,6	;RP1=0, select bank1
  1764  0096  083B               	movf	(?_tea5767_getpll+1)^(0+128),w
  1765  0097  01C8               	clrf	(tea5767_search@pll+1)^(0+128)
  1766  0098  07C8               	addwf	(tea5767_search@pll+1)^(0+128),f
  1767  0099  083A               	movf	?_tea5767_getpll^(0+128),w
  1768  009A  01C7               	clrf	tea5767_search@pll^(0+128)
  1769  009B  07C7               	addwf	tea5767_search@pll^(0+128),f
  1770                           
  1771                           ;tea5767.c: 241: commandbytes[0] = (pll >> 8);
  1772  009C  0848               	movf	(tea5767_search@pll+1)^(0+128),w
  1773  009D  00C3               	movwf	??_tea5767_search^(0+128)
  1774  009E  0843               	movf	??_tea5767_search^(0+128),w
  1775  009F  00DA               	movwf	tea5767@commandbytes^(0+128)
  1776                           
  1777                           ;tea5767.c: 242: commandbytes[0] |= SM_ON;
  1778  00A0  300C               	movlw	_SM_ON-__stringbase
  1779  00A1  0084               	movwf	4
  1780  00A2  120A  158A  200A   	fcall	stringdir
      +       120A  118A         
  1781  00A7  00C3               	movwf	??_tea5767_search^(0+128)
  1782  00A8  0843               	movf	??_tea5767_search^(0+128),w
  1783  00A9  04DA               	iorwf	tea5767@commandbytes^(0+128),f
  1784                           
  1785                           ;tea5767.c: 243: commandbytes[0] |= MUTE_ON;
  1786  00AA  300B               	movlw	_MUTE_ON-__stringbase
  1787  00AB  0084               	movwf	4
  1788  00AC  120A  158A  200A   	fcall	stringdir
      +       120A  118A         
  1789  00B1  00C3               	movwf	??_tea5767_search^(0+128)
  1790  00B2  0843               	movf	??_tea5767_search^(0+128),w
  1791  00B3  04DA               	iorwf	tea5767@commandbytes^(0+128),f
  1792                           
  1793                           ;tea5767.c: 244: commandbytes[1] = (pll & 0xFF);
  1794  00B4  0847               	movf	tea5767_search@pll^(0+128),w
  1795  00B5  00C3               	movwf	??_tea5767_search^(0+128)
  1796  00B6  0843               	movf	??_tea5767_search^(0+128),w
  1797  00B7  00DB               	movwf	(tea5767@commandbytes^(0+128)+1)
  1798                           
  1799                           ;tea5767.c: 246: tea5767_write();
  1800  00B8  120A  118A  27AB   	fcall	_tea5767_write
      +       120A  118A         
  1801                           
  1802                           ;tea5767.c: 249: responsebytes[0] = 0x00;
  1803  00BD  1683               	bsf	3,5	;RP0=1, select bank1
  1804  00BE  1303               	bcf	3,6	;RP1=0, select bank1
  1805  00BF  01DF               	clrf	tea5767@responsebytes^(0+128)
  1806  00C0                     l5336:	
  1807                           ;tea5767.c: 255: while( (responsebytes[0] & 0x80) == 0 && (responsebytes[0] & 0x40) == 0
      +                           ){
  1808                           
  1809                           ;tea5767.c: 252: tea5767_read();
  1810                           
  1811                           
  1812                           ;tea5767.c: 257: tea5767_read();
  1813  00C0  120A  158A  2640   	fcall	_tea5767_read
      +       120A  118A         
  1814  00C5  1683               	bsf	3,5	;RP0=1, select bank1
  1815  00C6  1303               	bcf	3,6	;RP1=0, select bank1
  1816  00C7  1BDF               	btfsc	tea5767@responsebytes^(0+128),7
  1817  00C8  28CB               	goto	l5342
  1818  00C9  1F5F               	btfss	tea5767@responsebytes^(0+128),6
  1819  00CA  28C0               	goto	l5336
  1820  00CB                     l5342:	
  1821                           
  1822                           ;tea5767.c: 261: }
  1823                           ;tea5767.c: 265: serial_tx_printline( "Search Complete" );
  1824  00CB  305A               	movlw	(STR_6-__stringbase)& (0+255)
  1825  00CC  160A  118A  26C1   	fcall	_serial_tx_printline
      +       120A  118A         
  1826                           
  1827                           ;tea5767.c: 272: prev_freq = current_freq;
  1828  00D1  1683               	bsf	3,5	;RP0=1, select bank1
  1829  00D2  1303               	bcf	3,6	;RP1=0, select bank1
  1830  00D3  0864               	movf	tea5767@current_freq^(0+128),w
  1831  00D4  00C4               	movwf	tea5767_search@prev_freq^(0+128)
  1832  00D5  0865               	movf	(tea5767@current_freq+1)^(0+128),w
  1833  00D6  00C5               	movwf	(tea5767_search@prev_freq+1)^(0+128)
  1834  00D7  0866               	movf	(tea5767@current_freq+2)^(0+128),w
  1835  00D8  00C6               	movwf	(tea5767_search@prev_freq+2)^(0+128)
  1836                           
  1837                           ;tea5767.c: 274: current_freq = tea5767_round_freq(
  1838                           ;tea5767.c: 275: tea5767_getfreq( responsebytes[0], responsebytes[1] ));
  1839  00D9  0860               	movf	(tea5767@responsebytes^(0+128)+1),w
  1840  00DA  00C3               	movwf	??_tea5767_search^(0+128)
  1841  00DB  0843               	movf	??_tea5767_search^(0+128),w
  1842  00DC  1283               	bcf	3,5	;RP0=0, select bank0
  1843  00DD  1303               	bcf	3,6	;RP1=0, select bank0
  1844  00DE  00ED               	movwf	tea5767_getfreq@byte2
  1845  00DF  1683               	bsf	3,5	;RP0=1, select bank1
  1846  00E0  1303               	bcf	3,6	;RP1=0, select bank1
  1847  00E1  085F               	movf	tea5767@responsebytes^(0+128),w
  1848  00E2  120A  118A  238E   	fcall	_tea5767_getfreq
      +       120A  118A         
  1849  00E7  1283               	bcf	3,5	;RP0=0, select bank0
  1850  00E8  1303               	bcf	3,6	;RP1=0, select bank0
  1851  00E9  086D               	movf	?_tea5767_getfreq,w
  1852  00EA  1683               	bsf	3,5	;RP0=1, select bank1
  1853  00EB  1303               	bcf	3,6	;RP1=0, select bank1
  1854  00EC  00BA               	movwf	tea5767_round_freq@freq^(0+128)
  1855  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  1856  00EE  1303               	bcf	3,6	;RP1=0, select bank0
  1857  00EF  086E               	movf	?_tea5767_getfreq+1,w
  1858  00F0  1683               	bsf	3,5	;RP0=1, select bank1
  1859  00F1  1303               	bcf	3,6	;RP1=0, select bank1
  1860  00F2  00BB               	movwf	(tea5767_round_freq@freq+1)^(0+128)
  1861  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  1862  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  1863  00F5  086F               	movf	?_tea5767_getfreq+2,w
  1864  00F6  1683               	bsf	3,5	;RP0=1, select bank1
  1865  00F7  1303               	bcf	3,6	;RP1=0, select bank1
  1866  00F8  00BC               	movwf	(tea5767_round_freq@freq+2)^(0+128)
  1867  00F9  120A  158A  2550   	fcall	_tea5767_round_freq
      +       120A  118A         
  1868  00FE  1683               	bsf	3,5	;RP0=1, select bank1
  1869  00FF  1303               	bcf	3,6	;RP1=0, select bank1
  1870  0100  083A               	movf	?_tea5767_round_freq^(0+128),w
  1871  0101  00E4               	movwf	tea5767@current_freq^(0+128)
  1872  0102  083B               	movf	(?_tea5767_round_freq+1)^(0+128),w
  1873  0103  00E5               	movwf	(tea5767@current_freq+1)^(0+128)
  1874  0104  083C               	movf	(?_tea5767_round_freq+2)^(0+128),w
  1875  0105  00E6               	movwf	(tea5767@current_freq+2)^(0+128)
  1876                           
  1877                           ;tea5767.c: 277: if( current_freq - prev_freq == 0 ){
  1878  0106  0864               	movf	tea5767@current_freq^(0+128),w
  1879  0107  1283               	bcf	3,5	;RP0=0, select bank0
  1880  0108  1303               	bcf	3,6	;RP1=0, select bank0
  1881  0109  00AF               	movwf	___ftadd@f1
  1882  010A  1683               	bsf	3,5	;RP0=1, select bank1
  1883  010B  1303               	bcf	3,6	;RP1=0, select bank1
  1884  010C  0865               	movf	(tea5767@current_freq+1)^(0+128),w
  1885  010D  1283               	bcf	3,5	;RP0=0, select bank0
  1886  010E  1303               	bcf	3,6	;RP1=0, select bank0
  1887  010F  00B0               	movwf	___ftadd@f1+1
  1888  0110  1683               	bsf	3,5	;RP0=1, select bank1
  1889  0111  1303               	bcf	3,6	;RP1=0, select bank1
  1890  0112  0866               	movf	(tea5767@current_freq+2)^(0+128),w
  1891  0113  1283               	bcf	3,5	;RP0=0, select bank0
  1892  0114  1303               	bcf	3,6	;RP1=0, select bank0
  1893  0115  00B1               	movwf	___ftadd@f1+2
  1894  0116  1683               	bsf	3,5	;RP0=1, select bank1
  1895  0117  1303               	bcf	3,6	;RP1=0, select bank1
  1896  0118  0844               	movf	tea5767_search@prev_freq^(0+128),w
  1897  0119  1283               	bcf	3,5	;RP0=0, select bank0
  1898  011A  1303               	bcf	3,6	;RP1=0, select bank0
  1899  011B  00A0               	movwf	___ftneg@f1
  1900  011C  1683               	bsf	3,5	;RP0=1, select bank1
  1901  011D  1303               	bcf	3,6	;RP1=0, select bank1
  1902  011E  0845               	movf	(tea5767_search@prev_freq+1)^(0+128),w
  1903  011F  1283               	bcf	3,5	;RP0=0, select bank0
  1904  0120  1303               	bcf	3,6	;RP1=0, select bank0
  1905  0121  00A1               	movwf	___ftneg@f1+1
  1906  0122  1683               	bsf	3,5	;RP0=1, select bank1
  1907  0123  1303               	bcf	3,6	;RP1=0, select bank1
  1908  0124  0846               	movf	(tea5767_search@prev_freq+2)^(0+128),w
  1909  0125  1283               	bcf	3,5	;RP0=0, select bank0
  1910  0126  1303               	bcf	3,6	;RP1=0, select bank0
  1911  0127  00A2               	movwf	___ftneg@f1+2
  1912  0128  160A  118A  2640   	fcall	___ftneg
      +       120A  118A         
  1913  012D  1283               	bcf	3,5	;RP0=0, select bank0
  1914  012E  1303               	bcf	3,6	;RP1=0, select bank0
  1915  012F  0820               	movf	?___ftneg,w
  1916  0130  00B2               	movwf	___ftadd@f2
  1917  0131  0821               	movf	?___ftneg+1,w
  1918  0132  00B3               	movwf	___ftadd@f2+1
  1919  0133  0822               	movf	?___ftneg+2,w
  1920  0134  00B4               	movwf	___ftadd@f2+2
  1921  0135  120A  118A  2184   	fcall	___ftadd
      +       120A  118A         
  1922  013A  1283               	bcf	3,5	;RP0=0, select bank0
  1923  013B  1303               	bcf	3,6	;RP1=0, select bank0
  1924  013C  0831               	movf	?___ftadd+2,w
  1925  013D  0430               	iorwf	?___ftadd+1,w
  1926  013E  042F               	iorwf	?___ftadd,w
  1927  013F  1D03               	skipz
  1928  0140  2978               	goto	l5354
  1929                           
  1930                           ;tea5767.c: 278: serial_tx_printline( "Same Freq" );
  1931  0141  306A               	movlw	(STR_7-__stringbase)& (0+255)
  1932  0142  160A  118A  26C1   	fcall	_serial_tx_printline
      +       120A  118A         
  1933                           
  1934                           ;tea5767.c: 279: current_freq += 0.1;
  1935  0147  30CD               	movlw	205
  1936  0148  1283               	bcf	3,5	;RP0=0, select bank0
  1937  0149  1303               	bcf	3,6	;RP1=0, select bank0
  1938  014A  00AF               	movwf	___ftadd@f1
  1939  014B  30CC               	movlw	204
  1940  014C  00B0               	movwf	___ftadd@f1+1
  1941  014D  303D               	movlw	61
  1942  014E  00B1               	movwf	___ftadd@f1+2
  1943  014F  1683               	bsf	3,5	;RP0=1, select bank1
  1944  0150  1303               	bcf	3,6	;RP1=0, select bank1
  1945  0151  0864               	movf	tea5767@current_freq^(0+128),w
  1946  0152  1283               	bcf	3,5	;RP0=0, select bank0
  1947  0153  1303               	bcf	3,6	;RP1=0, select bank0
  1948  0154  00B2               	movwf	___ftadd@f2
  1949  0155  1683               	bsf	3,5	;RP0=1, select bank1
  1950  0156  1303               	bcf	3,6	;RP1=0, select bank1
  1951  0157  0865               	movf	(tea5767@current_freq+1)^(0+128),w
  1952  0158  1283               	bcf	3,5	;RP0=0, select bank0
  1953  0159  1303               	bcf	3,6	;RP1=0, select bank0
  1954  015A  00B3               	movwf	___ftadd@f2+1
  1955  015B  1683               	bsf	3,5	;RP0=1, select bank1
  1956  015C  1303               	bcf	3,6	;RP1=0, select bank1
  1957  015D  0866               	movf	(tea5767@current_freq+2)^(0+128),w
  1958  015E  1283               	bcf	3,5	;RP0=0, select bank0
  1959  015F  1303               	bcf	3,6	;RP1=0, select bank0
  1960  0160  00B4               	movwf	___ftadd@f2+2
  1961  0161  120A  118A  2184   	fcall	___ftadd
      +       120A  118A         
  1962  0166  1283               	bcf	3,5	;RP0=0, select bank0
  1963  0167  1303               	bcf	3,6	;RP1=0, select bank0
  1964  0168  082F               	movf	?___ftadd,w
  1965  0169  1683               	bsf	3,5	;RP0=1, select bank1
  1966  016A  1303               	bcf	3,6	;RP1=0, select bank1
  1967  016B  00E4               	movwf	tea5767@current_freq^(0+128)
  1968  016C  1283               	bcf	3,5	;RP0=0, select bank0
  1969  016D  1303               	bcf	3,6	;RP1=0, select bank0
  1970  016E  0830               	movf	?___ftadd+1,w
  1971  016F  1683               	bsf	3,5	;RP0=1, select bank1
  1972  0170  1303               	bcf	3,6	;RP1=0, select bank1
  1973  0171  00E5               	movwf	(tea5767@current_freq+1)^(0+128)
  1974  0172  1283               	bcf	3,5	;RP0=0, select bank0
  1975  0173  1303               	bcf	3,6	;RP1=0, select bank0
  1976  0174  0831               	movf	?___ftadd+2,w
  1977  0175  1683               	bsf	3,5	;RP0=1, select bank1
  1978  0176  1303               	bcf	3,6	;RP1=0, select bank1
  1979  0177  00E6               	movwf	(tea5767@current_freq+2)^(0+128)
  1980  0178                     l5354:	
  1981                           
  1982                           ;tea5767.c: 280: }
  1983                           ;tea5767.c: 286: tea5767_tune( current_freq );
  1984  0178  1683               	bsf	3,5	;RP0=1, select bank1
  1985  0179  1303               	bcf	3,6	;RP1=0, select bank1
  1986  017A  0864               	movf	tea5767@current_freq^(0+128),w
  1987  017B  00BD               	movwf	tea5767_tune@freq^(0+128)
  1988  017C  0865               	movf	(tea5767@current_freq+1)^(0+128),w
  1989  017D  00BE               	movwf	(tea5767_tune@freq+1)^(0+128)
  1990  017E  0866               	movf	(tea5767@current_freq+2)^(0+128),w
  1991  017F  00BF               	movwf	(tea5767_tune@freq+2)^(0+128)
  1992  0180  120A  158A  21B9   	fcall	_tea5767_tune
  1993  0183  0008               	return
  1994  0184                     __end_of_tea5767_search:	
  1995                           
  1996                           	psect	text3
  1997  09B9                     __ptext3:	
  1998 ;; *************** function _tea5767_tune *****************
  1999 ;; Defined at:
  2000 ;;		line 65 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\tea5767.c"
  2001 ;; Parameters:    Size  Location     Type
  2002 ;;  freq            3   29[BANK1 ] unsigned int 
  2003 ;; Auto vars:     Size  Location     Type
  2004 ;;  pll             2   33[BANK1 ] unsigned int 
  2005 ;; Return value:  Size  Location     Type
  2006 ;;		None               void
  2007 ;; Registers used:
  2008 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2009 ;; Tracked objects:
  2010 ;;		On entry : 0/0
  2011 ;;		On exit  : 0/0
  2012 ;;		Unchanged: 0/0
  2013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2014 ;;      Params:         0       0       3       0       0
  2015 ;;      Locals:         0       0       2       0       0
  2016 ;;      Temps:          0       0       1       0       0
  2017 ;;      Totals:         0       0       6       0       0
  2018 ;;Total ram usage:        6 bytes
  2019 ;; Hardware stack levels used:    1
  2020 ;; Hardware stack levels required when called:    5
  2021 ;; This function calls:
  2022 ;;		_tea5767_getpll
  2023 ;;		_tea5767_write
  2024 ;; This function is called by:
  2025 ;;		_tea5767_search
  2026 ;; This function uses a non-reentrant model
  2027 ;;
  2028                           
  2029                           
  2030                           ;psect for function _tea5767_tune
  2031  09B9                     _tea5767_tune:	
  2032                           
  2033                           ;tea5767.c: 69: unsigned int pll = tea5767_getpll( freq );
  2034                           
  2035                           ;incstack = 0
  2036 ;; using string table level
  2037                           ; Regs used in _tea5767_tune: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2038  09B9  1683               	bsf	3,5	;RP0=1, select bank1
  2039  09BA  1303               	bcf	3,6	;RP1=0, select bank1
  2040  09BB  083D               	movf	tea5767_tune@freq^(0+128),w
  2041  09BC  00BA               	movwf	tea5767_getpll@freq^(0+128)
  2042  09BD  083E               	movf	(tea5767_tune@freq+1)^(0+128),w
  2043  09BE  00BB               	movwf	(tea5767_getpll@freq+1)^(0+128)
  2044  09BF  083F               	movf	(tea5767_tune@freq+2)^(0+128),w
  2045  09C0  00BC               	movwf	(tea5767_getpll@freq+2)^(0+128)
  2046  09C1  120A  158A  25C6   	fcall	_tea5767_getpll
      +       120A  158A         
  2047  09C6  1683               	bsf	3,5	;RP0=1, select bank1
  2048  09C7  1303               	bcf	3,6	;RP1=0, select bank1
  2049  09C8  083B               	movf	(?_tea5767_getpll+1)^(0+128),w
  2050  09C9  01C2               	clrf	(tea5767_tune@pll+1)^(0+128)
  2051  09CA  07C2               	addwf	(tea5767_tune@pll+1)^(0+128),f
  2052  09CB  083A               	movf	?_tea5767_getpll^(0+128),w
  2053  09CC  01C1               	clrf	tea5767_tune@pll^(0+128)
  2054  09CD  07C1               	addwf	tea5767_tune@pll^(0+128),f
  2055                           
  2056                           ;tea5767.c: 70: current_freq = freq;
  2057  09CE  083D               	movf	tea5767_tune@freq^(0+128),w
  2058  09CF  00E4               	movwf	tea5767@current_freq^(0+128)
  2059  09D0  083E               	movf	(tea5767_tune@freq+1)^(0+128),w
  2060  09D1  00E5               	movwf	(tea5767@current_freq+1)^(0+128)
  2061  09D2  083F               	movf	(tea5767_tune@freq+2)^(0+128),w
  2062  09D3  00E6               	movwf	(tea5767@current_freq+2)^(0+128)
  2063                           
  2064                           ;tea5767.c: 72: commandbytes[0] = (pll >> 8);
  2065  09D4  0842               	movf	(tea5767_tune@pll+1)^(0+128),w
  2066  09D5  00C0               	movwf	??_tea5767_tune^(0+128)
  2067  09D6  0840               	movf	??_tea5767_tune^(0+128),w
  2068  09D7  00DA               	movwf	tea5767@commandbytes^(0+128)
  2069                           
  2070                           ;tea5767.c: 73: commandbytes[0] &= ~SM_ON;
  2071  09D8  300C               	movlw	_SM_ON-__stringbase
  2072  09D9  0084               	movwf	4
  2073  09DA  120A  158A  200A   	fcall	stringdir
      +       120A  158A         
  2074  09DF  3AFF               	xorlw	255
  2075  09E0  00C0               	movwf	??_tea5767_tune^(0+128)
  2076  09E1  0840               	movf	??_tea5767_tune^(0+128),w
  2077  09E2  05DA               	andwf	tea5767@commandbytes^(0+128),f
  2078                           
  2079                           ;tea5767.c: 74: commandbytes[0] &= ~MUTE_ON;
  2080  09E3  300B               	movlw	_MUTE_ON-__stringbase
  2081  09E4  0084               	movwf	4
  2082  09E5  120A  158A  200A   	fcall	stringdir
      +       120A  158A         
  2083  09EA  3AFF               	xorlw	255
  2084  09EB  00C0               	movwf	??_tea5767_tune^(0+128)
  2085  09EC  0840               	movf	??_tea5767_tune^(0+128),w
  2086  09ED  05DA               	andwf	tea5767@commandbytes^(0+128),f
  2087                           
  2088                           ;tea5767.c: 75: commandbytes[1] = pll & 0xFF;
  2089  09EE  0841               	movf	tea5767_tune@pll^(0+128),w
  2090  09EF  00C0               	movwf	??_tea5767_tune^(0+128)
  2091  09F0  0840               	movf	??_tea5767_tune^(0+128),w
  2092  09F1  00DB               	movwf	(tea5767@commandbytes^(0+128)+1)
  2093                           
  2094                           ;tea5767.c: 77: tea5767_write();
  2095  09F2  120A  118A  27AB   	fcall	_tea5767_write
  2096  09F5  0008               	return
  2097  09F6                     __end_of_tea5767_tune:	
  2098                           
  2099                           	psect	text4
  2100  0D50                     __ptext4:	
  2101 ;; *************** function _tea5767_round_freq *****************
  2102 ;; Defined at:
  2103 ;;		line 45 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\tea5767.c"
  2104 ;; Parameters:    Size  Location     Type
  2105 ;;  freq            3   26[BANK1 ] unsigned int 
  2106 ;; Auto vars:     Size  Location     Type
  2107 ;;  d               3   29[BANK1 ] unsigned int 
  2108 ;; Return value:  Size  Location     Type
  2109 ;;                  3   26[BANK1 ] unsigned int 
  2110 ;; Registers used:
  2111 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2112 ;; Tracked objects:
  2113 ;;		On entry : 0/0
  2114 ;;		On exit  : 0/0
  2115 ;;		Unchanged: 0/0
  2116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2117 ;;      Params:         0       0       3       0       0
  2118 ;;      Locals:         0       0       3       0       0
  2119 ;;      Temps:          0       0       0       0       0
  2120 ;;      Totals:         0       0       6       0       0
  2121 ;;Total ram usage:        6 bytes
  2122 ;; Hardware stack levels used:    1
  2123 ;; Hardware stack levels required when called:    4
  2124 ;; This function calls:
  2125 ;;		___ftdiv
  2126 ;;		___ftmul
  2127 ;;		_ceil
  2128 ;; This function is called by:
  2129 ;;		_tea5767_search
  2130 ;; This function uses a non-reentrant model
  2131 ;;
  2132                           
  2133                           
  2134                           ;psect for function _tea5767_round_freq
  2135  0D50                     _tea5767_round_freq:	
  2136                           
  2137                           ;tea5767.c: 48: double d = freq * 10;
  2138                           
  2139                           ;incstack = 0
  2140                           ; Regs used in _tea5767_round_freq: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2141  0D50  3000               	movlw	0
  2142  0D51  1283               	bcf	3,5	;RP0=0, select bank0
  2143  0D52  1303               	bcf	3,6	;RP1=0, select bank0
  2144  0D53  00CD               	movwf	___ftmul@f1
  2145  0D54  3020               	movlw	32
  2146  0D55  00CE               	movwf	___ftmul@f1+1
  2147  0D56  3041               	movlw	65
  2148  0D57  00CF               	movwf	___ftmul@f1+2
  2149  0D58  1683               	bsf	3,5	;RP0=1, select bank1
  2150  0D59  1303               	bcf	3,6	;RP1=0, select bank1
  2151  0D5A  083A               	movf	tea5767_round_freq@freq^(0+128),w
  2152  0D5B  1283               	bcf	3,5	;RP0=0, select bank0
  2153  0D5C  1303               	bcf	3,6	;RP1=0, select bank0
  2154  0D5D  00D0               	movwf	___ftmul@f2
  2155  0D5E  1683               	bsf	3,5	;RP0=1, select bank1
  2156  0D5F  1303               	bcf	3,6	;RP1=0, select bank1
  2157  0D60  083B               	movf	(tea5767_round_freq@freq+1)^(0+128),w
  2158  0D61  1283               	bcf	3,5	;RP0=0, select bank0
  2159  0D62  1303               	bcf	3,6	;RP1=0, select bank0
  2160  0D63  00D1               	movwf	___ftmul@f2+1
  2161  0D64  1683               	bsf	3,5	;RP0=1, select bank1
  2162  0D65  1303               	bcf	3,6	;RP1=0, select bank1
  2163  0D66  083C               	movf	(tea5767_round_freq@freq+2)^(0+128),w
  2164  0D67  1283               	bcf	3,5	;RP0=0, select bank0
  2165  0D68  1303               	bcf	3,6	;RP1=0, select bank0
  2166  0D69  00D2               	movwf	___ftmul@f2+2
  2167  0D6A  120A  118A  2622   	fcall	___ftmul
      +       120A  158A         
  2168  0D6F  1283               	bcf	3,5	;RP0=0, select bank0
  2169  0D70  1303               	bcf	3,6	;RP1=0, select bank0
  2170  0D71  084D               	movf	?___ftmul,w
  2171  0D72  1683               	bsf	3,5	;RP0=1, select bank1
  2172  0D73  1303               	bcf	3,6	;RP1=0, select bank1
  2173  0D74  00BD               	movwf	tea5767_round_freq@d^(0+128)
  2174  0D75  1283               	bcf	3,5	;RP0=0, select bank0
  2175  0D76  1303               	bcf	3,6	;RP1=0, select bank0
  2176  0D77  084E               	movf	?___ftmul+1,w
  2177  0D78  1683               	bsf	3,5	;RP0=1, select bank1
  2178  0D79  1303               	bcf	3,6	;RP1=0, select bank1
  2179  0D7A  00BE               	movwf	(tea5767_round_freq@d+1)^(0+128)
  2180  0D7B  1283               	bcf	3,5	;RP0=0, select bank0
  2181  0D7C  1303               	bcf	3,6	;RP1=0, select bank0
  2182  0D7D  084F               	movf	?___ftmul+2,w
  2183  0D7E  1683               	bsf	3,5	;RP0=1, select bank1
  2184  0D7F  1303               	bcf	3,6	;RP1=0, select bank1
  2185  0D80  00BF               	movwf	(tea5767_round_freq@d+2)^(0+128)
  2186                           
  2187                           ;tea5767.c: 49: d = ceil(d);
  2188  0D81  083D               	movf	tea5767_round_freq@d^(0+128),w
  2189  0D82  1283               	bcf	3,5	;RP0=0, select bank0
  2190  0D83  1303               	bcf	3,6	;RP1=0, select bank0
  2191  0D84  00BF               	movwf	ceil@x
  2192  0D85  1683               	bsf	3,5	;RP0=1, select bank1
  2193  0D86  1303               	bcf	3,6	;RP1=0, select bank1
  2194  0D87  083E               	movf	(tea5767_round_freq@d+1)^(0+128),w
  2195  0D88  1283               	bcf	3,5	;RP0=0, select bank0
  2196  0D89  1303               	bcf	3,6	;RP1=0, select bank0
  2197  0D8A  00C0               	movwf	ceil@x+1
  2198  0D8B  1683               	bsf	3,5	;RP0=1, select bank1
  2199  0D8C  1303               	bcf	3,6	;RP1=0, select bank1
  2200  0D8D  083F               	movf	(tea5767_round_freq@d+2)^(0+128),w
  2201  0D8E  1283               	bcf	3,5	;RP0=0, select bank0
  2202  0D8F  1303               	bcf	3,6	;RP1=0, select bank0
  2203  0D90  00C1               	movwf	ceil@x+2
  2204  0D91  120A  158A  274F   	fcall	_ceil
      +       120A  158A         
  2205  0D96  1283               	bcf	3,5	;RP0=0, select bank0
  2206  0D97  1303               	bcf	3,6	;RP1=0, select bank0
  2207  0D98  083F               	movf	?_ceil,w
  2208  0D99  1683               	bsf	3,5	;RP0=1, select bank1
  2209  0D9A  1303               	bcf	3,6	;RP1=0, select bank1
  2210  0D9B  00BD               	movwf	tea5767_round_freq@d^(0+128)
  2211  0D9C  1283               	bcf	3,5	;RP0=0, select bank0
  2212  0D9D  1303               	bcf	3,6	;RP1=0, select bank0
  2213  0D9E  0840               	movf	?_ceil+1,w
  2214  0D9F  1683               	bsf	3,5	;RP0=1, select bank1
  2215  0DA0  1303               	bcf	3,6	;RP1=0, select bank1
  2216  0DA1  00BE               	movwf	(tea5767_round_freq@d+1)^(0+128)
  2217  0DA2  1283               	bcf	3,5	;RP0=0, select bank0
  2218  0DA3  1303               	bcf	3,6	;RP1=0, select bank0
  2219  0DA4  0841               	movf	?_ceil+2,w
  2220  0DA5  1683               	bsf	3,5	;RP0=1, select bank1
  2221  0DA6  1303               	bcf	3,6	;RP1=0, select bank1
  2222  0DA7  00BF               	movwf	(tea5767_round_freq@d+2)^(0+128)
  2223                           
  2224                           ;tea5767.c: 55: d = d / 10.0;
  2225  0DA8  3000               	movlw	0
  2226  0DA9  00A0               	movwf	___ftdiv@f2^(0+128)
  2227  0DAA  3020               	movlw	32
  2228  0DAB  00A1               	movwf	(___ftdiv@f2+1)^(0+128)
  2229  0DAC  3041               	movlw	65
  2230  0DAD  00A2               	movwf	(___ftdiv@f2+2)^(0+128)
  2231  0DAE  083D               	movf	tea5767_round_freq@d^(0+128),w
  2232  0DAF  00A3               	movwf	___ftdiv@f1^(0+128)
  2233  0DB0  083E               	movf	(tea5767_round_freq@d+1)^(0+128),w
  2234  0DB1  00A4               	movwf	(___ftdiv@f1+1)^(0+128)
  2235  0DB2  083F               	movf	(tea5767_round_freq@d+2)^(0+128),w
  2236  0DB3  00A5               	movwf	(___ftdiv@f1+2)^(0+128)
  2237  0DB4  120A  118A  228D   	fcall	___ftdiv
  2238  0DB7  1683               	bsf	3,5	;RP0=1, select bank1
  2239  0DB8  1303               	bcf	3,6	;RP1=0, select bank1
  2240  0DB9  0820               	movf	?___ftdiv^(0+128),w
  2241  0DBA  00BD               	movwf	tea5767_round_freq@d^(0+128)
  2242  0DBB  0821               	movf	(?___ftdiv+1)^(0+128),w
  2243  0DBC  00BE               	movwf	(tea5767_round_freq@d+1)^(0+128)
  2244  0DBD  0822               	movf	(?___ftdiv+2)^(0+128),w
  2245  0DBE  00BF               	movwf	(tea5767_round_freq@d+2)^(0+128)
  2246                           
  2247                           ;tea5767.c: 56: return d;
  2248  0DBF  083D               	movf	tea5767_round_freq@d^(0+128),w
  2249  0DC0  00BA               	movwf	?_tea5767_round_freq^(0+128)
  2250  0DC1  083E               	movf	(tea5767_round_freq@d+1)^(0+128),w
  2251  0DC2  00BB               	movwf	(?_tea5767_round_freq+1)^(0+128)
  2252  0DC3  083F               	movf	(tea5767_round_freq@d+2)^(0+128),w
  2253  0DC4  00BC               	movwf	(?_tea5767_round_freq+2)^(0+128)
  2254  0DC5  0008               	return
  2255  0DC6                     __end_of_tea5767_round_freq:	
  2256                           
  2257                           	psect	text5
  2258  0E40                     __ptext5:	
  2259 ;; *************** function _tea5767_read *****************
  2260 ;; Defined at:
  2261 ;;		line 176 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\tea5767.c"
  2262 ;; Parameters:    Size  Location     Type
  2263 ;;		None
  2264 ;; Auto vars:     Size  Location     Type
  2265 ;;  i               2    0        int 
  2266 ;; Return value:  Size  Location     Type
  2267 ;;		None               void
  2268 ;; Registers used:
  2269 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2270 ;; Tracked objects:
  2271 ;;		On entry : 0/0
  2272 ;;		On exit  : 0/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2275 ;;      Params:         0       0       0       0       0
  2276 ;;      Locals:         0       0       0       0       0
  2277 ;;      Temps:          0       1       0       0       0
  2278 ;;      Totals:         0       1       0       0       0
  2279 ;;Total ram usage:        1 bytes
  2280 ;; Hardware stack levels used:    1
  2281 ;; Hardware stack levels required when called:    4
  2282 ;; This function calls:
  2283 ;;		_i2c_read_data
  2284 ;;		_i2c_send_ack
  2285 ;;		_i2c_send_controlbyte
  2286 ;;		_i2c_send_nack
  2287 ;;		_i2c_start
  2288 ;;		_i2c_stop
  2289 ;;		_serial_tx_printline
  2290 ;; This function is called by:
  2291 ;;		_main
  2292 ;;		_tea5767_search
  2293 ;; This function uses a non-reentrant model
  2294 ;;
  2295                           
  2296                           
  2297                           ;psect for function _tea5767_read
  2298  0E40                     _tea5767_read:	
  2299                           
  2300                           ;tea5767.c: 178: int i;
  2301                           ;tea5767.c: 180: i2c_start();
  2302                           
  2303                           ;incstack = 0
  2304                           ; Regs used in _tea5767_read: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2305  0E40  160A  118A  262C   	fcall	_i2c_start
      +       120A  158A         
  2306                           
  2307                           ;tea5767.c: 181: i2c_send_controlbyte( 0x60, 1 );
  2308  0E45  01F4               	clrf	i2c_send_controlbyte@rw_bit
  2309  0E46  0AF4               	incf	i2c_send_controlbyte@rw_bit,f
  2310  0E47  3060               	movlw	96
  2311  0E48  160A  118A  269B   	fcall	_i2c_send_controlbyte
      +       120A  158A         
  2312                           
  2313                           ;tea5767.c: 183: if( SSPCON2bits.ACKSTAT == 1 ){
  2314  0E4D  1683               	bsf	3,5	;RP0=1, select bank1
  2315  0E4E  1303               	bcf	3,6	;RP1=0, select bank1
  2316  0E4F  1F11               	btfss	17,6	;volatile
  2317  0E50  2E57               	goto	l3896
  2318                           
  2319                           ;tea5767.c: 184: serial_tx_printline( "No Read Control Data ACK from slave" );
  2320  0E51  300F               	movlw	(STR_4-__stringbase)& (0+255)
  2321  0E52  160A  118A  26C1   	fcall	_serial_tx_printline
      +       120A  158A         
  2322  0E57                     l3896:	
  2323                           
  2324                           ;tea5767.c: 185: }
  2325                           ;tea5767.c: 193: responsebytes[0] = i2c_read_data();
  2326  0E57  160A  118A  264A   	fcall	_i2c_read_data
      +       120A  158A         
  2327  0E5C  1283               	bcf	3,5	;RP0=0, select bank0
  2328  0E5D  1303               	bcf	3,6	;RP1=0, select bank0
  2329  0E5E  00A2               	movwf	??_tea5767_read
  2330  0E5F  0822               	movf	??_tea5767_read,w
  2331  0E60  1683               	bsf	3,5	;RP0=1, select bank1
  2332  0E61  1303               	bcf	3,6	;RP1=0, select bank1
  2333  0E62  00DF               	movwf	tea5767@responsebytes^(0+128)
  2334                           
  2335                           ;tea5767.c: 194: i2c_send_ack();
  2336  0E63  160A  118A  2655   	fcall	_i2c_send_ack
      +       120A  158A         
  2337                           
  2338                           ;tea5767.c: 195: responsebytes[1] = i2c_read_data();
  2339  0E68  160A  118A  264A   	fcall	_i2c_read_data
      +       120A  158A         
  2340  0E6D  1283               	bcf	3,5	;RP0=0, select bank0
  2341  0E6E  1303               	bcf	3,6	;RP1=0, select bank0
  2342  0E6F  00A2               	movwf	??_tea5767_read
  2343  0E70  0822               	movf	??_tea5767_read,w
  2344  0E71  1683               	bsf	3,5	;RP0=1, select bank1
  2345  0E72  1303               	bcf	3,6	;RP1=0, select bank1
  2346  0E73  00E0               	movwf	(tea5767@responsebytes^(0+128)+1)
  2347                           
  2348                           ;tea5767.c: 196: i2c_send_ack();
  2349  0E74  160A  118A  2655   	fcall	_i2c_send_ack
      +       120A  158A         
  2350                           
  2351                           ;tea5767.c: 197: responsebytes[2] = i2c_read_data();
  2352  0E79  160A  118A  264A   	fcall	_i2c_read_data
      +       120A  158A         
  2353  0E7E  1283               	bcf	3,5	;RP0=0, select bank0
  2354  0E7F  1303               	bcf	3,6	;RP1=0, select bank0
  2355  0E80  00A2               	movwf	??_tea5767_read
  2356  0E81  0822               	movf	??_tea5767_read,w
  2357  0E82  1683               	bsf	3,5	;RP0=1, select bank1
  2358  0E83  1303               	bcf	3,6	;RP1=0, select bank1
  2359  0E84  00E1               	movwf	(tea5767@responsebytes^(0+128)+2)
  2360                           
  2361                           ;tea5767.c: 198: i2c_send_ack();
  2362  0E85  160A  118A  2655   	fcall	_i2c_send_ack
      +       120A  158A         
  2363                           
  2364                           ;tea5767.c: 199: responsebytes[3] = i2c_read_data();
  2365  0E8A  160A  118A  264A   	fcall	_i2c_read_data
      +       120A  158A         
  2366  0E8F  1283               	bcf	3,5	;RP0=0, select bank0
  2367  0E90  1303               	bcf	3,6	;RP1=0, select bank0
  2368  0E91  00A2               	movwf	??_tea5767_read
  2369  0E92  0822               	movf	??_tea5767_read,w
  2370  0E93  1683               	bsf	3,5	;RP0=1, select bank1
  2371  0E94  1303               	bcf	3,6	;RP1=0, select bank1
  2372  0E95  00E2               	movwf	(tea5767@responsebytes^(0+128)+3)
  2373                           
  2374                           ;tea5767.c: 200: i2c_send_ack();
  2375  0E96  160A  118A  2655   	fcall	_i2c_send_ack
      +       120A  158A         
  2376                           
  2377                           ;tea5767.c: 201: responsebytes[4] = i2c_read_data();
  2378  0E9B  160A  118A  264A   	fcall	_i2c_read_data
      +       120A  158A         
  2379  0EA0  1283               	bcf	3,5	;RP0=0, select bank0
  2380  0EA1  1303               	bcf	3,6	;RP1=0, select bank0
  2381  0EA2  00A2               	movwf	??_tea5767_read
  2382  0EA3  0822               	movf	??_tea5767_read,w
  2383  0EA4  1683               	bsf	3,5	;RP0=1, select bank1
  2384  0EA5  1303               	bcf	3,6	;RP1=0, select bank1
  2385  0EA6  00E3               	movwf	(tea5767@responsebytes^(0+128)+4)
  2386                           
  2387                           ;tea5767.c: 202: i2c_send_ack();
  2388  0EA7  160A  118A  2655   	fcall	_i2c_send_ack
      +       120A  158A         
  2389                           
  2390                           ;tea5767.c: 205: i2c_send_nack();
  2391  0EAC  120A  158A  208D   	fcall	_i2c_send_nack
      +       120A  158A         
  2392                           
  2393                           ;tea5767.c: 206: i2c_stop();
  2394  0EB1  160A  118A  2636   	fcall	_i2c_stop
      +       120A  158A         
  2395                           
  2396                           ;tea5767.c: 208: if( (responsebytes[3] & 0x0F) != 0x00 ){
  2397  0EB6  1683               	bsf	3,5	;RP0=1, select bank1
  2398  0EB7  1303               	bcf	3,6	;RP1=0, select bank1
  2399  0EB8  0862               	movf	(tea5767@responsebytes^(0+128)+3),w
  2400  0EB9  390F               	andlw	15
  2401  0EBA  1903               	btfsc	3,2
  2402  0EBB  0008               	return
  2403                           
  2404                           ;tea5767.c: 209: serial_tx_printline( "Invalid Chip ID" );
  2405  0EBC  304A               	movlw	(STR_5-__stringbase)& (0+255)
  2406  0EBD  160A  118A  26C1   	fcall	_serial_tx_printline
  2407  0EC0  0008               	return
  2408  0EC1                     __end_of_tea5767_read:	
  2409                           
  2410                           	psect	text6
  2411  088D                     __ptext6:	
  2412 ;; *************** function _i2c_send_nack *****************
  2413 ;; Defined at:
  2414 ;;		line 77 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\i2c.c"
  2415 ;; Parameters:    Size  Location     Type
  2416 ;;		None
  2417 ;; Auto vars:     Size  Location     Type
  2418 ;;		None
  2419 ;; Return value:  Size  Location     Type
  2420 ;;		None               void
  2421 ;; Registers used:
  2422 ;;		None
  2423 ;; Tracked objects:
  2424 ;;		On entry : 0/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2428 ;;      Params:         0       0       0       0       0
  2429 ;;      Locals:         0       0       0       0       0
  2430 ;;      Temps:          0       0       0       0       0
  2431 ;;      Totals:         0       0       0       0       0
  2432 ;;Total ram usage:        0 bytes
  2433 ;; Hardware stack levels used:    1
  2434 ;; Hardware stack levels required when called:    1
  2435 ;; This function calls:
  2436 ;;		Nothing
  2437 ;; This function is called by:
  2438 ;;		_tea5767_read
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           
  2443                           ;psect for function _i2c_send_nack
  2444  088D                     _i2c_send_nack:	
  2445                           
  2446                           ;i2c.c: 79: PIR1bits.SSPIF = 0;
  2447                           
  2448                           ;incstack = 0
  2449                           ; Regs used in _i2c_send_nack: []
  2450  088D  1283               	bcf	3,5	;RP0=0, select bank0
  2451  088E  1303               	bcf	3,6	;RP1=0, select bank0
  2452  088F  118C               	bcf	12,3	;volatile
  2453                           
  2454                           ;i2c.c: 80: SSPCON2bits.ACKDT = 1;
  2455  0890  1683               	bsf	3,5	;RP0=1, select bank1
  2456  0891  1303               	bcf	3,6	;RP1=0, select bank1
  2457  0892  1691               	bsf	17,5	;volatile
  2458                           
  2459                           ;i2c.c: 81: SSPCON2bits.ACKEN = 1;
  2460  0893  1611               	bsf	17,4	;volatile
  2461  0894                     l224:	
  2462                           ;i2c.c: 82: while( !PIR1bits.SSPIF );
  2463                           
  2464  0894  1283               	bcf	3,5	;RP0=0, select bank0
  2465  0895  198C               	btfsc	12,3	;volatile
  2466  0896  0008               	return
  2467  0897  2894               	goto	l224
  2468  0898                     __end_of_i2c_send_nack:	
  2469                           
  2470                           	psect	text7
  2471  1655                     __ptext7:	
  2472 ;; *************** function _i2c_send_ack *****************
  2473 ;; Defined at:
  2474 ;;		line 69 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\i2c.c"
  2475 ;; Parameters:    Size  Location     Type
  2476 ;;		None
  2477 ;; Auto vars:     Size  Location     Type
  2478 ;;		None
  2479 ;; Return value:  Size  Location     Type
  2480 ;;		None               void
  2481 ;; Registers used:
  2482 ;;		None
  2483 ;; Tracked objects:
  2484 ;;		On entry : 0/0
  2485 ;;		On exit  : 0/0
  2486 ;;		Unchanged: 0/0
  2487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2488 ;;      Params:         0       0       0       0       0
  2489 ;;      Locals:         0       0       0       0       0
  2490 ;;      Temps:          0       0       0       0       0
  2491 ;;      Totals:         0       0       0       0       0
  2492 ;;Total ram usage:        0 bytes
  2493 ;; Hardware stack levels used:    1
  2494 ;; Hardware stack levels required when called:    1
  2495 ;; This function calls:
  2496 ;;		Nothing
  2497 ;; This function is called by:
  2498 ;;		_tea5767_read
  2499 ;; This function uses a non-reentrant model
  2500 ;;
  2501                           
  2502                           
  2503                           ;psect for function _i2c_send_ack
  2504  1655                     _i2c_send_ack:	
  2505                           
  2506                           ;i2c.c: 71: PIR1bits.SSPIF = 0;
  2507                           
  2508                           ;incstack = 0
  2509                           ; Regs used in _i2c_send_ack: []
  2510  1655  1283               	bcf	3,5	;RP0=0, select bank0
  2511  1656  1303               	bcf	3,6	;RP1=0, select bank0
  2512  1657  118C               	bcf	12,3	;volatile
  2513                           
  2514                           ;i2c.c: 72: SSPCON2bits.ACKDT = 0;
  2515  1658  1683               	bsf	3,5	;RP0=1, select bank1
  2516  1659  1303               	bcf	3,6	;RP1=0, select bank1
  2517  165A  1291               	bcf	17,5	;volatile
  2518                           
  2519                           ;i2c.c: 73: SSPCON2bits.ACKEN = 1;
  2520  165B  1611               	bsf	17,4	;volatile
  2521  165C                     l218:	
  2522                           ;i2c.c: 74: while( !PIR1bits.SSPIF );
  2523                           
  2524  165C  1283               	bcf	3,5	;RP0=0, select bank0
  2525  165D  198C               	btfsc	12,3	;volatile
  2526  165E  0008               	return
  2527  165F  2E5C               	goto	l218
  2528  1660                     __end_of_i2c_send_ack:	
  2529                           
  2530                           	psect	text8
  2531  164A                     __ptext8:	
  2532 ;; *************** function _i2c_read_data *****************
  2533 ;; Defined at:
  2534 ;;		line 46 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\i2c.c"
  2535 ;; Parameters:    Size  Location     Type
  2536 ;;		None
  2537 ;; Auto vars:     Size  Location     Type
  2538 ;;		None
  2539 ;; Return value:  Size  Location     Type
  2540 ;;                  1    wreg      unsigned char 
  2541 ;; Registers used:
  2542 ;;		wreg
  2543 ;; Tracked objects:
  2544 ;;		On entry : 0/0
  2545 ;;		On exit  : 0/0
  2546 ;;		Unchanged: 0/0
  2547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2548 ;;      Params:         0       0       0       0       0
  2549 ;;      Locals:         0       0       0       0       0
  2550 ;;      Temps:          0       0       0       0       0
  2551 ;;      Totals:         0       0       0       0       0
  2552 ;;Total ram usage:        0 bytes
  2553 ;; Hardware stack levels used:    1
  2554 ;; Hardware stack levels required when called:    1
  2555 ;; This function calls:
  2556 ;;		Nothing
  2557 ;; This function is called by:
  2558 ;;		_tea5767_read
  2559 ;; This function uses a non-reentrant model
  2560 ;;
  2561                           
  2562                           
  2563                           ;psect for function _i2c_read_data
  2564  164A                     _i2c_read_data:	
  2565                           
  2566                           ;i2c.c: 50: PIR1bits.SSPIF = 0;
  2567                           
  2568                           ;incstack = 0
  2569                           ; Regs used in _i2c_read_data: [wreg]
  2570  164A  1283               	bcf	3,5	;RP0=0, select bank0
  2571  164B  1303               	bcf	3,6	;RP1=0, select bank0
  2572  164C  118C               	bcf	12,3	;volatile
  2573                           
  2574                           ;i2c.c: 55: SSPCON2bits.RCEN = 1;
  2575  164D  1683               	bsf	3,5	;RP0=1, select bank1
  2576  164E  1303               	bcf	3,6	;RP1=0, select bank1
  2577  164F  1591               	bsf	17,3	;volatile
  2578  1650                     l206:	
  2579                           ;i2c.c: 56: while( !PIR1bits.SSPIF );
  2580                           
  2581  1650  1283               	bcf	3,5	;RP0=0, select bank0
  2582  1651  1D8C               	btfss	12,3	;volatile
  2583  1652  2E50               	goto	l206
  2584                           
  2585                           ;i2c.c: 58: return SSPBUF;
  2586  1653  0813               	movf	19,w	;volatile
  2587  1654  0008               	return
  2588  1655                     __end_of_i2c_read_data:	
  2589                           
  2590                           	psect	text9
  2591  038E                     __ptext9:	
  2592 ;; *************** function _tea5767_getfreq *****************
  2593 ;; Defined at:
  2594 ;;		line 38 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\tea5767.c"
  2595 ;; Parameters:    Size  Location     Type
  2596 ;;  byte1           1    wreg     unsigned char 
  2597 ;;  byte2           1   77[BANK0 ] unsigned char 
  2598 ;; Auto vars:     Size  Location     Type
  2599 ;;  byte1           1    8[BANK1 ] unsigned char 
  2600 ;;  dta             3    9[BANK1 ] unsigned char 
  2601 ;; Return value:  Size  Location     Type
  2602 ;;                  3   77[BANK0 ] unsigned char 
  2603 ;; Registers used:
  2604 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2605 ;; Tracked objects:
  2606 ;;		On entry : 0/0
  2607 ;;		On exit  : 0/0
  2608 ;;		Unchanged: 0/0
  2609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2610 ;;      Params:         0       3       0       0       0
  2611 ;;      Locals:         0       0      10       0       0
  2612 ;;      Temps:          0       0       2       0       0
  2613 ;;      Totals:         0       3      12       0       0
  2614 ;;Total ram usage:       15 bytes
  2615 ;; Hardware stack levels used:    1
  2616 ;; Hardware stack levels required when called:    4
  2617 ;; This function calls:
  2618 ;;		___awtoft
  2619 ;;		___ftadd
  2620 ;;		___ftdiv
  2621 ;;		___ftmul
  2622 ;;		_ceil
  2623 ;; This function is called by:
  2624 ;;		_tea5767_search
  2625 ;; This function uses a non-reentrant model
  2626 ;;
  2627                           
  2628                           
  2629                           ;psect for function _tea5767_getfreq
  2630  038E                     _tea5767_getfreq:	
  2631                           
  2632                           ;incstack = 0
  2633                           ; Regs used in _tea5767_getfreq: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2634                           ;tea5767_getfreq@byte1 stored from wreg
  2635  038E  1683               	bsf	3,5	;RP0=1, select bank1
  2636  038F  1303               	bcf	3,6	;RP1=0, select bank1
  2637  0390  00A8               	movwf	tea5767_getfreq@byte1^(0+128)
  2638                           
  2639                           ;tea5767.c: 40: double dta = (ceil(ceil(((byte1 & 0x3F) << 8) + byte2) * 32768 / 4 - 225
      +                          000) / 1000000);
  2640  0391  3000               	movlw	0
  2641  0392  00A0               	movwf	___ftdiv@f2^(0+128)
  2642  0393  3080               	movlw	128
  2643  0394  00A1               	movwf	(___ftdiv@f2+1)^(0+128)
  2644  0395  3040               	movlw	64
  2645  0396  00A2               	movwf	(___ftdiv@f2+2)^(0+128)
  2646  0397  3000               	movlw	0
  2647  0398  1283               	bcf	3,5	;RP0=0, select bank0
  2648  0399  1303               	bcf	3,6	;RP1=0, select bank0
  2649  039A  00CD               	movwf	___ftmul@f1
  2650  039B  3000               	movlw	0
  2651  039C  00CE               	movwf	___ftmul@f1+1
  2652  039D  3047               	movlw	71
  2653  039E  00CF               	movwf	___ftmul@f1+2
  2654  039F  1683               	bsf	3,5	;RP0=1, select bank1
  2655  03A0  1303               	bcf	3,6	;RP1=0, select bank1
  2656  03A1  0828               	movf	tea5767_getfreq@byte1^(0+128),w
  2657  03A2  393F               	andlw	63
  2658  03A3  00A6               	movwf	??_tea5767_getfreq^(0+128)
  2659  03A4  01A7               	clrf	(??_tea5767_getfreq^(0+128)+1)
  2660  03A5  0826               	movf	??_tea5767_getfreq^(0+128),w
  2661  03A6  00A7               	movwf	(??_tea5767_getfreq^(0+128)+1)
  2662  03A7  01A6               	clrf	??_tea5767_getfreq^(0+128)
  2663  03A8  1283               	bcf	3,5	;RP0=0, select bank0
  2664  03A9  1303               	bcf	3,6	;RP1=0, select bank0
  2665  03AA  086D               	movf	tea5767_getfreq@byte2,w
  2666  03AB  1683               	bsf	3,5	;RP0=1, select bank1
  2667  03AC  1303               	bcf	3,6	;RP1=0, select bank1
  2668  03AD  0726               	addwf	??_tea5767_getfreq^(0+128),w
  2669  03AE  1283               	bcf	3,5	;RP0=0, select bank0
  2670  03AF  1303               	bcf	3,6	;RP1=0, select bank0
  2671  03B0  00A8               	movwf	___awtoft@c
  2672  03B1  3000               	movlw	0
  2673  03B2  1803               	skipnc
  2674  03B3  3001               	movlw	1
  2675  03B4  1683               	bsf	3,5	;RP0=1, select bank1
  2676  03B5  1303               	bcf	3,6	;RP1=0, select bank1
  2677  03B6  0727               	addwf	(??_tea5767_getfreq+1)^(0+128),w
  2678  03B7  1283               	bcf	3,5	;RP0=0, select bank0
  2679  03B8  1303               	bcf	3,6	;RP1=0, select bank0
  2680  03B9  00A9               	movwf	___awtoft@c+1
  2681  03BA  160A  118A  275F   	fcall	___awtoft
      +       120A  118A         
  2682  03BF  1283               	bcf	3,5	;RP0=0, select bank0
  2683  03C0  1303               	bcf	3,6	;RP1=0, select bank0
  2684  03C1  0828               	movf	?___awtoft,w
  2685  03C2  00BF               	movwf	ceil@x
  2686  03C3  0829               	movf	?___awtoft+1,w
  2687  03C4  00C0               	movwf	ceil@x+1
  2688  03C5  082A               	movf	?___awtoft+2,w
  2689  03C6  00C1               	movwf	ceil@x+2
  2690  03C7  120A  158A  274F   	fcall	_ceil
      +       120A  118A         
  2691  03CC  1283               	bcf	3,5	;RP0=0, select bank0
  2692  03CD  1303               	bcf	3,6	;RP1=0, select bank0
  2693  03CE  083F               	movf	?_ceil,w
  2694  03CF  00D0               	movwf	___ftmul@f2
  2695  03D0  0840               	movf	?_ceil+1,w
  2696  03D1  00D1               	movwf	___ftmul@f2+1
  2697  03D2  0841               	movf	?_ceil+2,w
  2698  03D3  00D2               	movwf	___ftmul@f2+2
  2699  03D4  120A  118A  2622   	fcall	___ftmul
      +       120A  118A         
  2700  03D9  1283               	bcf	3,5	;RP0=0, select bank0
  2701  03DA  1303               	bcf	3,6	;RP1=0, select bank0
  2702  03DB  084D               	movf	?___ftmul,w
  2703  03DC  1683               	bsf	3,5	;RP0=1, select bank1
  2704  03DD  1303               	bcf	3,6	;RP1=0, select bank1
  2705  03DE  00A3               	movwf	___ftdiv@f1^(0+128)
  2706  03DF  1283               	bcf	3,5	;RP0=0, select bank0
  2707  03E0  1303               	bcf	3,6	;RP1=0, select bank0
  2708  03E1  084E               	movf	?___ftmul+1,w
  2709  03E2  1683               	bsf	3,5	;RP0=1, select bank1
  2710  03E3  1303               	bcf	3,6	;RP1=0, select bank1
  2711  03E4  00A4               	movwf	(___ftdiv@f1+1)^(0+128)
  2712  03E5  1283               	bcf	3,5	;RP0=0, select bank0
  2713  03E6  1303               	bcf	3,6	;RP1=0, select bank0
  2714  03E7  084F               	movf	?___ftmul+2,w
  2715  03E8  1683               	bsf	3,5	;RP0=1, select bank1
  2716  03E9  1303               	bcf	3,6	;RP1=0, select bank1
  2717  03EA  00A5               	movwf	(___ftdiv@f1+2)^(0+128)
  2718  03EB  120A  118A  228D   	fcall	___ftdiv
      +       120A  118A         
  2719  03F0  1683               	bsf	3,5	;RP0=1, select bank1
  2720  03F1  1303               	bcf	3,6	;RP1=0, select bank1
  2721  03F2  0820               	movf	?___ftdiv^(0+128),w
  2722  03F3  00AC               	movwf	_tea5767_getfreq$1037^(0+128)
  2723  03F4  0821               	movf	(?___ftdiv+1)^(0+128),w
  2724  03F5  00AD               	movwf	(_tea5767_getfreq$1037+1)^(0+128)
  2725  03F6  0822               	movf	(?___ftdiv+2)^(0+128),w
  2726  03F7  00AE               	movwf	(_tea5767_getfreq$1037+2)^(0+128)
  2727                           
  2728                           ;tea5767.c: 40: double dta = (ceil(ceil(((byte1 & 0x3F) << 8) + byte2) * 32768 / 4 - 225
      +                          000) / 1000000);
  2729  03F8  30BA               	movlw	186
  2730  03F9  1283               	bcf	3,5	;RP0=0, select bank0
  2731  03FA  1303               	bcf	3,6	;RP1=0, select bank0
  2732  03FB  00AF               	movwf	___ftadd@f1
  2733  03FC  305B               	movlw	91
  2734  03FD  00B0               	movwf	___ftadd@f1+1
  2735  03FE  30C8               	movlw	200
  2736  03FF  00B1               	movwf	___ftadd@f1+2
  2737  0400  1683               	bsf	3,5	;RP0=1, select bank1
  2738  0401  1303               	bcf	3,6	;RP1=0, select bank1
  2739  0402  082C               	movf	_tea5767_getfreq$1037^(0+128),w
  2740  0403  1283               	bcf	3,5	;RP0=0, select bank0
  2741  0404  1303               	bcf	3,6	;RP1=0, select bank0
  2742  0405  00B2               	movwf	___ftadd@f2
  2743  0406  1683               	bsf	3,5	;RP0=1, select bank1
  2744  0407  1303               	bcf	3,6	;RP1=0, select bank1
  2745  0408  082D               	movf	(_tea5767_getfreq$1037+1)^(0+128),w
  2746  0409  1283               	bcf	3,5	;RP0=0, select bank0
  2747  040A  1303               	bcf	3,6	;RP1=0, select bank0
  2748  040B  00B3               	movwf	___ftadd@f2+1
  2749  040C  1683               	bsf	3,5	;RP0=1, select bank1
  2750  040D  1303               	bcf	3,6	;RP1=0, select bank1
  2751  040E  082E               	movf	(_tea5767_getfreq$1037+2)^(0+128),w
  2752  040F  1283               	bcf	3,5	;RP0=0, select bank0
  2753  0410  1303               	bcf	3,6	;RP1=0, select bank0
  2754  0411  00B4               	movwf	___ftadd@f2+2
  2755  0412  120A  118A  2184   	fcall	___ftadd
      +       120A  118A         
  2756  0417  1283               	bcf	3,5	;RP0=0, select bank0
  2757  0418  1303               	bcf	3,6	;RP1=0, select bank0
  2758  0419  082F               	movf	?___ftadd,w
  2759  041A  1683               	bsf	3,5	;RP0=1, select bank1
  2760  041B  1303               	bcf	3,6	;RP1=0, select bank1
  2761  041C  00AF               	movwf	_tea5767_getfreq$1038^(0+128)
  2762  041D  1283               	bcf	3,5	;RP0=0, select bank0
  2763  041E  1303               	bcf	3,6	;RP1=0, select bank0
  2764  041F  0830               	movf	?___ftadd+1,w
  2765  0420  1683               	bsf	3,5	;RP0=1, select bank1
  2766  0421  1303               	bcf	3,6	;RP1=0, select bank1
  2767  0422  00B0               	movwf	(_tea5767_getfreq$1038+1)^(0+128)
  2768  0423  1283               	bcf	3,5	;RP0=0, select bank0
  2769  0424  1303               	bcf	3,6	;RP1=0, select bank0
  2770  0425  0831               	movf	?___ftadd+2,w
  2771  0426  1683               	bsf	3,5	;RP0=1, select bank1
  2772  0427  1303               	bcf	3,6	;RP1=0, select bank1
  2773  0428  00B1               	movwf	(_tea5767_getfreq$1038+2)^(0+128)
  2774                           
  2775                           ;tea5767.c: 40: double dta = (ceil(ceil(((byte1 & 0x3F) << 8) + byte2) * 32768 / 4 - 225
      +                          000) / 1000000);
  2776  0429  3024               	movlw	36
  2777  042A  00A0               	movwf	___ftdiv@f2^(0+128)
  2778  042B  3074               	movlw	116
  2779  042C  00A1               	movwf	(___ftdiv@f2+1)^(0+128)
  2780  042D  3049               	movlw	73
  2781  042E  00A2               	movwf	(___ftdiv@f2+2)^(0+128)
  2782  042F  082F               	movf	_tea5767_getfreq$1038^(0+128),w
  2783  0430  1283               	bcf	3,5	;RP0=0, select bank0
  2784  0431  1303               	bcf	3,6	;RP1=0, select bank0
  2785  0432  00BF               	movwf	ceil@x
  2786  0433  1683               	bsf	3,5	;RP0=1, select bank1
  2787  0434  1303               	bcf	3,6	;RP1=0, select bank1
  2788  0435  0830               	movf	(_tea5767_getfreq$1038+1)^(0+128),w
  2789  0436  1283               	bcf	3,5	;RP0=0, select bank0
  2790  0437  1303               	bcf	3,6	;RP1=0, select bank0
  2791  0438  00C0               	movwf	ceil@x+1
  2792  0439  1683               	bsf	3,5	;RP0=1, select bank1
  2793  043A  1303               	bcf	3,6	;RP1=0, select bank1
  2794  043B  0831               	movf	(_tea5767_getfreq$1038+2)^(0+128),w
  2795  043C  1283               	bcf	3,5	;RP0=0, select bank0
  2796  043D  1303               	bcf	3,6	;RP1=0, select bank0
  2797  043E  00C1               	movwf	ceil@x+2
  2798  043F  120A  158A  274F   	fcall	_ceil
      +       120A  118A         
  2799  0444  1283               	bcf	3,5	;RP0=0, select bank0
  2800  0445  1303               	bcf	3,6	;RP1=0, select bank0
  2801  0446  083F               	movf	?_ceil,w
  2802  0447  1683               	bsf	3,5	;RP0=1, select bank1
  2803  0448  1303               	bcf	3,6	;RP1=0, select bank1
  2804  0449  00A3               	movwf	___ftdiv@f1^(0+128)
  2805  044A  1283               	bcf	3,5	;RP0=0, select bank0
  2806  044B  1303               	bcf	3,6	;RP1=0, select bank0
  2807  044C  0840               	movf	?_ceil+1,w
  2808  044D  1683               	bsf	3,5	;RP0=1, select bank1
  2809  044E  1303               	bcf	3,6	;RP1=0, select bank1
  2810  044F  00A4               	movwf	(___ftdiv@f1+1)^(0+128)
  2811  0450  1283               	bcf	3,5	;RP0=0, select bank0
  2812  0451  1303               	bcf	3,6	;RP1=0, select bank0
  2813  0452  0841               	movf	?_ceil+2,w
  2814  0453  1683               	bsf	3,5	;RP0=1, select bank1
  2815  0454  1303               	bcf	3,6	;RP1=0, select bank1
  2816  0455  00A5               	movwf	(___ftdiv@f1+2)^(0+128)
  2817  0456  120A  118A  228D   	fcall	___ftdiv
  2818  0459  1683               	bsf	3,5	;RP0=1, select bank1
  2819  045A  1303               	bcf	3,6	;RP1=0, select bank1
  2820  045B  0820               	movf	?___ftdiv^(0+128),w
  2821  045C  00A9               	movwf	tea5767_getfreq@dta^(0+128)
  2822  045D  0821               	movf	(?___ftdiv+1)^(0+128),w
  2823  045E  00AA               	movwf	(tea5767_getfreq@dta+1)^(0+128)
  2824  045F  0822               	movf	(?___ftdiv+2)^(0+128),w
  2825  0460  00AB               	movwf	(tea5767_getfreq@dta+2)^(0+128)
  2826                           
  2827                           ;tea5767.c: 41: return dta;
  2828  0461  0829               	movf	tea5767_getfreq@dta^(0+128),w
  2829  0462  1283               	bcf	3,5	;RP0=0, select bank0
  2830  0463  1303               	bcf	3,6	;RP1=0, select bank0
  2831  0464  00ED               	movwf	?_tea5767_getfreq
  2832  0465  1683               	bsf	3,5	;RP0=1, select bank1
  2833  0466  1303               	bcf	3,6	;RP1=0, select bank1
  2834  0467  082A               	movf	(tea5767_getfreq@dta+1)^(0+128),w
  2835  0468  1283               	bcf	3,5	;RP0=0, select bank0
  2836  0469  1303               	bcf	3,6	;RP1=0, select bank0
  2837  046A  00EE               	movwf	?_tea5767_getfreq+1
  2838  046B  1683               	bsf	3,5	;RP0=1, select bank1
  2839  046C  1303               	bcf	3,6	;RP1=0, select bank1
  2840  046D  082B               	movf	(tea5767_getfreq@dta+2)^(0+128),w
  2841  046E  1283               	bcf	3,5	;RP0=0, select bank0
  2842  046F  1303               	bcf	3,6	;RP1=0, select bank0
  2843  0470  00EF               	movwf	?_tea5767_getfreq+2
  2844  0471  0008               	return
  2845  0472                     __end_of_tea5767_getfreq:	
  2846                           
  2847                           	psect	text10
  2848  0F4F                     __ptext10:	
  2849 ;; *************** function _ceil *****************
  2850 ;; Defined at:
  2851 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\ceil.c"
  2852 ;; Parameters:    Size  Location     Type
  2853 ;;  x               3   31[BANK0 ] unsigned char 
  2854 ;; Auto vars:     Size  Location     Type
  2855 ;;  i               3   40[BANK0 ] unsigned char 
  2856 ;;  expon           2   43[BANK0 ] int 
  2857 ;; Return value:  Size  Location     Type
  2858 ;;                  3   31[BANK0 ] int 
  2859 ;; Registers used:
  2860 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2861 ;; Tracked objects:
  2862 ;;		On entry : 0/0
  2863 ;;		On exit  : 0/0
  2864 ;;		Unchanged: 0/0
  2865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2866 ;;      Params:         0       3       0       0       0
  2867 ;;      Locals:         0      10       0       0       0
  2868 ;;      Temps:          0       1       0       0       0
  2869 ;;      Totals:         0      14       0       0       0
  2870 ;;Total ram usage:       14 bytes
  2871 ;; Hardware stack levels used:    1
  2872 ;; Hardware stack levels required when called:    3
  2873 ;; This function calls:
  2874 ;;		___altoft
  2875 ;;		___ftadd
  2876 ;;		___ftge
  2877 ;;		___fttol
  2878 ;;		_frexp
  2879 ;; This function is called by:
  2880 ;;		_tea5767_getfreq
  2881 ;;		_tea5767_round_freq
  2882 ;; This function uses a non-reentrant model
  2883 ;;
  2884                           
  2885                           
  2886                           ;psect for function _ceil
  2887  0F4F                     _ceil:	
  2888                           
  2889                           ;incstack = 0
  2890                           ; Regs used in _ceil: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2891  0F4F  1283               	bcf	3,5	;RP0=0, select bank0
  2892  0F50  1303               	bcf	3,6	;RP1=0, select bank0
  2893  0F51  083F               	movf	ceil@x,w
  2894  0F52  00A0               	movwf	frexp@value
  2895  0F53  0840               	movf	ceil@x+1,w
  2896  0F54  00A1               	movwf	frexp@value+1
  2897  0F55  0841               	movf	ceil@x+2,w
  2898  0F56  00A2               	movwf	frexp@value+2
  2899  0F57  304B               	movlw	ceil@expon& (0+255)
  2900  0F58  00C2               	movwf	??_ceil
  2901  0F59  0842               	movf	??_ceil,w
  2902  0F5A  00A3               	movwf	frexp@eptr
  2903  0F5B  120A  158A  217D   	fcall	_frexp
      +       120A  158A         
  2904  0F60  1283               	bcf	3,5	;RP0=0, select bank0
  2905  0F61  1303               	bcf	3,6	;RP1=0, select bank0
  2906  0F62  1FCC               	btfss	ceil@expon+1,7
  2907  0F63  2F89               	goto	l5274
  2908  0F64  3000               	movlw	0
  2909  0F65  00A0               	movwf	___ftge@ff1
  2910  0F66  3000               	movlw	0
  2911  0F67  00A1               	movwf	___ftge@ff1+1
  2912  0F68  3000               	movlw	0
  2913  0F69  00A2               	movwf	___ftge@ff1+2
  2914  0F6A  083F               	movf	ceil@x,w
  2915  0F6B  00A3               	movwf	___ftge@ff2
  2916  0F6C  0840               	movf	ceil@x+1,w
  2917  0F6D  00A4               	movwf	___ftge@ff2+1
  2918  0F6E  0841               	movf	ceil@x+2,w
  2919  0F6F  00A5               	movwf	___ftge@ff2+2
  2920  0F70  120A  158A  2354   	fcall	___ftge
      +       120A  158A         
  2921  0F75  1C03               	btfss	3,0
  2922  0F76  2F80               	goto	l5270
  2923  0F77  3000               	movlw	0
  2924  0F78  1283               	bcf	3,5	;RP0=0, select bank0
  2925  0F79  1303               	bcf	3,6	;RP1=0, select bank0
  2926  0F7A  00BF               	movwf	?_ceil
  2927  0F7B  3000               	movlw	0
  2928  0F7C  00C0               	movwf	?_ceil+1
  2929  0F7D  3000               	movlw	0
  2930  0F7E  00C1               	movwf	?_ceil+2
  2931  0F7F  0008               	return
  2932  0F80                     l5270:	
  2933  0F80  3000               	movlw	0
  2934  0F81  1283               	bcf	3,5	;RP0=0, select bank0
  2935  0F82  1303               	bcf	3,6	;RP1=0, select bank0
  2936  0F83  00BF               	movwf	?_ceil
  2937  0F84  3080               	movlw	128
  2938  0F85  00C0               	movwf	?_ceil+1
  2939  0F86  303F               	movlw	63
  2940  0F87  00C1               	movwf	?_ceil+2
  2941  0F88  0008               	return
  2942  0F89                     l5274:	
  2943  0F89  3000               	movlw	0
  2944  0F8A  024C               	subwf	ceil@expon+1,w
  2945  0F8B  3015               	movlw	21
  2946  0F8C  1903               	skipnz
  2947  0F8D  024B               	subwf	ceil@expon,w
  2948  0F8E  1803               	btfsc	3,0
  2949  0F8F  0008               	return
  2950  0F90  083F               	movf	ceil@x,w
  2951  0F91  1683               	bsf	3,5	;RP0=1, select bank1
  2952  0F92  1303               	bcf	3,6	;RP1=0, select bank1
  2953  0F93  00A6               	movwf	___fttol@f1^(0+128)
  2954  0F94  1283               	bcf	3,5	;RP0=0, select bank0
  2955  0F95  1303               	bcf	3,6	;RP1=0, select bank0
  2956  0F96  0840               	movf	ceil@x+1,w
  2957  0F97  1683               	bsf	3,5	;RP0=1, select bank1
  2958  0F98  1303               	bcf	3,6	;RP1=0, select bank1
  2959  0F99  00A7               	movwf	(___fttol@f1+1)^(0+128)
  2960  0F9A  1283               	bcf	3,5	;RP0=0, select bank0
  2961  0F9B  1303               	bcf	3,6	;RP1=0, select bank0
  2962  0F9C  0841               	movf	ceil@x+2,w
  2963  0F9D  1683               	bsf	3,5	;RP0=1, select bank1
  2964  0F9E  1303               	bcf	3,6	;RP1=0, select bank1
  2965  0F9F  00A8               	movwf	(___fttol@f1+2)^(0+128)
  2966  0FA0  120A  158A  26C1   	fcall	___fttol
      +       120A  158A         
  2967  0FA5  1683               	bsf	3,5	;RP0=1, select bank1
  2968  0FA6  1303               	bcf	3,6	;RP1=0, select bank1
  2969  0FA7  0829               	movf	(?___fttol+3)^(0+128),w
  2970  0FA8  1283               	bcf	3,5	;RP0=0, select bank0
  2971  0FA9  1303               	bcf	3,6	;RP1=0, select bank0
  2972  0FAA  00AB               	movwf	___altoft@c+3
  2973  0FAB  1683               	bsf	3,5	;RP0=1, select bank1
  2974  0FAC  1303               	bcf	3,6	;RP1=0, select bank1
  2975  0FAD  0828               	movf	(?___fttol+2)^(0+128),w
  2976  0FAE  1283               	bcf	3,5	;RP0=0, select bank0
  2977  0FAF  1303               	bcf	3,6	;RP1=0, select bank0
  2978  0FB0  00AA               	movwf	___altoft@c+2
  2979  0FB1  1683               	bsf	3,5	;RP0=1, select bank1
  2980  0FB2  1303               	bcf	3,6	;RP1=0, select bank1
  2981  0FB3  0827               	movf	(?___fttol+1)^(0+128),w
  2982  0FB4  1283               	bcf	3,5	;RP0=0, select bank0
  2983  0FB5  1303               	bcf	3,6	;RP1=0, select bank0
  2984  0FB6  00A9               	movwf	___altoft@c+1
  2985  0FB7  1683               	bsf	3,5	;RP0=1, select bank1
  2986  0FB8  1303               	bcf	3,6	;RP1=0, select bank1
  2987  0FB9  0826               	movf	?___fttol^(0+128),w
  2988  0FBA  1283               	bcf	3,5	;RP0=0, select bank0
  2989  0FBB  1303               	bcf	3,6	;RP1=0, select bank0
  2990  0FBC  00A8               	movwf	___altoft@c
  2991  0FBD  120A  158A  22B5   	fcall	___altoft
      +       120A  158A         
  2992  0FC2  1283               	bcf	3,5	;RP0=0, select bank0
  2993  0FC3  1303               	bcf	3,6	;RP1=0, select bank0
  2994  0FC4  0828               	movf	?___altoft,w
  2995  0FC5  00C8               	movwf	ceil@i
  2996  0FC6  0829               	movf	?___altoft+1,w
  2997  0FC7  00C9               	movwf	ceil@i+1
  2998  0FC8  082A               	movf	?___altoft+2,w
  2999  0FC9  00CA               	movwf	ceil@i+2
  3000  0FCA  0848               	movf	ceil@i,w
  3001  0FCB  00A0               	movwf	___ftge@ff1
  3002  0FCC  0849               	movf	ceil@i+1,w
  3003  0FCD  00A1               	movwf	___ftge@ff1+1
  3004  0FCE  084A               	movf	ceil@i+2,w
  3005  0FCF  00A2               	movwf	___ftge@ff1+2
  3006  0FD0  083F               	movf	ceil@x,w
  3007  0FD1  00A3               	movwf	___ftge@ff2
  3008  0FD2  0840               	movf	ceil@x+1,w
  3009  0FD3  00A4               	movwf	___ftge@ff2+1
  3010  0FD4  0841               	movf	ceil@x+2,w
  3011  0FD5  00A5               	movwf	___ftge@ff2+2
  3012  0FD6  120A  158A  2354   	fcall	___ftge
      +       120A  158A         
  3013  0FDB  1803               	btfsc	3,0
  3014  0FDC  2FF7               	goto	l5284
  3015  0FDD  3000               	movlw	0
  3016  0FDE  1283               	bcf	3,5	;RP0=0, select bank0
  3017  0FDF  1303               	bcf	3,6	;RP1=0, select bank0
  3018  0FE0  00AF               	movwf	___ftadd@f1
  3019  0FE1  3080               	movlw	128
  3020  0FE2  00B0               	movwf	___ftadd@f1+1
  3021  0FE3  303F               	movlw	63
  3022  0FE4  00B1               	movwf	___ftadd@f1+2
  3023  0FE5  0848               	movf	ceil@i,w
  3024  0FE6  00B2               	movwf	___ftadd@f2
  3025  0FE7  0849               	movf	ceil@i+1,w
  3026  0FE8  00B3               	movwf	___ftadd@f2+1
  3027  0FE9  084A               	movf	ceil@i+2,w
  3028  0FEA  00B4               	movwf	___ftadd@f2+2
  3029  0FEB  120A  118A  2184   	fcall	___ftadd
  3030  0FEE  1283               	bcf	3,5	;RP0=0, select bank0
  3031  0FEF  1303               	bcf	3,6	;RP1=0, select bank0
  3032  0FF0  082F               	movf	?___ftadd,w
  3033  0FF1  00BF               	movwf	?_ceil
  3034  0FF2  0830               	movf	?___ftadd+1,w
  3035  0FF3  00C0               	movwf	?_ceil+1
  3036  0FF4  0831               	movf	?___ftadd+2,w
  3037  0FF5  00C1               	movwf	?_ceil+2
  3038  0FF6  0008               	return
  3039  0FF7                     l5284:	
  3040  0FF7  1283               	bcf	3,5	;RP0=0, select bank0
  3041  0FF8  1303               	bcf	3,6	;RP1=0, select bank0
  3042  0FF9  0848               	movf	ceil@i,w
  3043  0FFA  00BF               	movwf	?_ceil
  3044  0FFB  0849               	movf	ceil@i+1,w
  3045  0FFC  00C0               	movwf	?_ceil+1
  3046  0FFD  084A               	movf	ceil@i+2,w
  3047  0FFE  00C1               	movwf	?_ceil+2
  3048  0FFF  0008               	return
  3049  1000                     __end_of_ceil:	
  3050                           
  3051                           	psect	text11
  3052  0B54                     __ptext11:	
  3053 ;; *************** function ___ftge *****************
  3054 ;; Defined at:
  3055 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\ftge.c"
  3056 ;; Parameters:    Size  Location     Type
  3057 ;;  ff1             3    0[BANK0 ] float 
  3058 ;;  ff2             3    3[BANK0 ] float 
  3059 ;; Auto vars:     Size  Location     Type
  3060 ;;		None
  3061 ;; Return value:  Size  Location     Type
  3062 ;;		None               void
  3063 ;; Registers used:
  3064 ;;		wreg, status,2, status,0
  3065 ;; Tracked objects:
  3066 ;;		On entry : 0/0
  3067 ;;		On exit  : 0/0
  3068 ;;		Unchanged: 0/0
  3069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3070 ;;      Params:         0       6       0       0       0
  3071 ;;      Locals:         0       0       0       0       0
  3072 ;;      Temps:          0       6       0       0       0
  3073 ;;      Totals:         0      12       0       0       0
  3074 ;;Total ram usage:       12 bytes
  3075 ;; Hardware stack levels used:    1
  3076 ;; Hardware stack levels required when called:    1
  3077 ;; This function calls:
  3078 ;;		Nothing
  3079 ;; This function is called by:
  3080 ;;		_tea5767_search
  3081 ;;		_ceil
  3082 ;; This function uses a non-reentrant model
  3083 ;;
  3084                           
  3085                           
  3086                           ;psect for function ___ftge
  3087  0B54                     ___ftge:	
  3088                           
  3089                           ;incstack = 0
  3090                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  3091  0B54  1283               	bcf	3,5	;RP0=0, select bank0
  3092  0B55  1303               	bcf	3,6	;RP1=0, select bank0
  3093  0B56  1FA2               	btfss	___ftge@ff1+2,7
  3094  0B57  2B7D               	goto	l4426
  3095  0B58  3000               	movlw	0
  3096  0B59  00A6               	movwf	??___ftge
  3097  0B5A  3000               	movlw	0
  3098  0B5B  00A7               	movwf	??___ftge+1
  3099  0B5C  3080               	movlw	128
  3100  0B5D  00A8               	movwf	??___ftge+2
  3101  0B5E  0920               	comf	___ftge@ff1,w
  3102  0B5F  00A9               	movwf	??___ftge+3
  3103  0B60  0921               	comf	___ftge@ff1+1,w
  3104  0B61  00AA               	movwf	??___ftge+4
  3105  0B62  0922               	comf	___ftge@ff1+2,w
  3106  0B63  00AB               	movwf	??___ftge+5
  3107  0B64  0AA9               	incf	??___ftge+3,f
  3108  0B65  1903               	skipnz
  3109  0B66  0AAA               	incf	??___ftge+4,f
  3110  0B67  1903               	skipnz
  3111  0B68  0AAB               	incf	??___ftge+5,f
  3112  0B69  0829               	movf	??___ftge+3,w
  3113  0B6A  07A6               	addwf	??___ftge,f
  3114  0B6B  082A               	movf	??___ftge+4,w
  3115  0B6C  1803               	skipnc
  3116  0B6D  0F2A               	incfsz	??___ftge+4,w
  3117  0B6E  2B70               	goto	u4201
  3118  0B6F  2B71               	goto	u4202
  3119  0B70                     u4201:	
  3120  0B70  07A7               	addwf	??___ftge+1,f
  3121  0B71                     u4202:	
  3122  0B71  082B               	movf	??___ftge+5,w
  3123  0B72  1803               	skipnc
  3124  0B73  0F2B               	incfsz	??___ftge+5,w
  3125  0B74  2B76               	goto	u4203
  3126  0B75  2B77               	goto	u4204
  3127  0B76                     u4203:	
  3128  0B76  07A8               	addwf	??___ftge+2,f
  3129  0B77                     u4204:	
  3130  0B77  0826               	movf	??___ftge,w
  3131  0B78  00A0               	movwf	___ftge@ff1
  3132  0B79  0827               	movf	??___ftge+1,w
  3133  0B7A  00A1               	movwf	___ftge@ff1+1
  3134  0B7B  0828               	movf	??___ftge+2,w
  3135  0B7C  00A2               	movwf	___ftge@ff1+2
  3136  0B7D                     l4426:	
  3137  0B7D  1FA5               	btfss	___ftge@ff2+2,7
  3138  0B7E  2BA4               	goto	l4430
  3139  0B7F  3000               	movlw	0
  3140  0B80  00A6               	movwf	??___ftge
  3141  0B81  3000               	movlw	0
  3142  0B82  00A7               	movwf	??___ftge+1
  3143  0B83  3080               	movlw	128
  3144  0B84  00A8               	movwf	??___ftge+2
  3145  0B85  0923               	comf	___ftge@ff2,w
  3146  0B86  00A9               	movwf	??___ftge+3
  3147  0B87  0924               	comf	___ftge@ff2+1,w
  3148  0B88  00AA               	movwf	??___ftge+4
  3149  0B89  0925               	comf	___ftge@ff2+2,w
  3150  0B8A  00AB               	movwf	??___ftge+5
  3151  0B8B  0AA9               	incf	??___ftge+3,f
  3152  0B8C  1903               	skipnz
  3153  0B8D  0AAA               	incf	??___ftge+4,f
  3154  0B8E  1903               	skipnz
  3155  0B8F  0AAB               	incf	??___ftge+5,f
  3156  0B90  0829               	movf	??___ftge+3,w
  3157  0B91  07A6               	addwf	??___ftge,f
  3158  0B92  082A               	movf	??___ftge+4,w
  3159  0B93  1803               	skipnc
  3160  0B94  0F2A               	incfsz	??___ftge+4,w
  3161  0B95  2B97               	goto	u4221
  3162  0B96  2B98               	goto	u4222
  3163  0B97                     u4221:	
  3164  0B97  07A7               	addwf	??___ftge+1,f
  3165  0B98                     u4222:	
  3166  0B98  082B               	movf	??___ftge+5,w
  3167  0B99  1803               	skipnc
  3168  0B9A  0F2B               	incfsz	??___ftge+5,w
  3169  0B9B  2B9D               	goto	u4223
  3170  0B9C  2B9E               	goto	u4224
  3171  0B9D                     u4223:	
  3172  0B9D  07A8               	addwf	??___ftge+2,f
  3173  0B9E                     u4224:	
  3174  0B9E  0826               	movf	??___ftge,w
  3175  0B9F  00A3               	movwf	___ftge@ff2
  3176  0BA0  0827               	movf	??___ftge+1,w
  3177  0BA1  00A4               	movwf	___ftge@ff2+1
  3178  0BA2  0828               	movf	??___ftge+2,w
  3179  0BA3  00A5               	movwf	___ftge@ff2+2
  3180  0BA4                     l4430:	
  3181  0BA4  3080               	movlw	128
  3182  0BA5  06A2               	xorwf	___ftge@ff1+2,f
  3183  0BA6  3080               	movlw	128
  3184  0BA7  06A5               	xorwf	___ftge@ff2+2,f
  3185  0BA8  0825               	movf	___ftge@ff2+2,w
  3186  0BA9  0222               	subwf	___ftge@ff1+2,w
  3187  0BAA  1D03               	skipz
  3188  0BAB  0008               	return
  3189  0BAC  0824               	movf	___ftge@ff2+1,w
  3190  0BAD  0221               	subwf	___ftge@ff1+1,w
  3191  0BAE  1D03               	skipz
  3192  0BAF  0008               	return
  3193  0BB0  0823               	movf	___ftge@ff2,w
  3194  0BB1  0220               	subwf	___ftge@ff1,w
  3195  0BB2  0008               	return
  3196  0BB3                     __end_of___ftge:	
  3197                           
  3198                           	psect	text12
  3199  175F                     __ptext12:	
  3200 ;; *************** function ___awtoft *****************
  3201 ;; Defined at:
  3202 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\awtoft.c"
  3203 ;; Parameters:    Size  Location     Type
  3204 ;;  c               2    8[BANK0 ] int 
  3205 ;; Auto vars:     Size  Location     Type
  3206 ;;  sign            1   14[BANK0 ] unsigned char 
  3207 ;; Return value:  Size  Location     Type
  3208 ;;                  3    8[BANK0 ] float 
  3209 ;; Registers used:
  3210 ;;		wreg, status,2, status,0, pclath, cstack
  3211 ;; Tracked objects:
  3212 ;;		On entry : 0/0
  3213 ;;		On exit  : 0/0
  3214 ;;		Unchanged: 0/0
  3215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3216 ;;      Params:         0       3       0       0       0
  3217 ;;      Locals:         0       2       0       0       0
  3218 ;;      Temps:          0       2       0       0       0
  3219 ;;      Totals:         0       7       0       0       0
  3220 ;;Total ram usage:        7 bytes
  3221 ;; Hardware stack levels used:    1
  3222 ;; Hardware stack levels required when called:    2
  3223 ;; This function calls:
  3224 ;;		___ftpack
  3225 ;; This function is called by:
  3226 ;;		_tea5767_getfreq
  3227 ;; This function uses a non-reentrant model
  3228 ;;
  3229                           
  3230                           
  3231                           ;psect for function ___awtoft
  3232  175F                     ___awtoft:	
  3233                           
  3234                           ;incstack = 0
  3235                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  3236  175F  1283               	bcf	3,5	;RP0=0, select bank0
  3237  1760  1303               	bcf	3,6	;RP1=0, select bank0
  3238  1761  01AE               	clrf	___awtoft@sign
  3239  1762  1FA9               	btfss	___awtoft@c+1,7
  3240  1763  2F6B               	goto	l5384
  3241  1764  09A8               	comf	___awtoft@c,f
  3242  1765  09A9               	comf	___awtoft@c+1,f
  3243  1766  0AA8               	incf	___awtoft@c,f
  3244  1767  1903               	skipnz
  3245  1768  0AA9               	incf	___awtoft@c+1,f
  3246  1769  01AE               	clrf	___awtoft@sign
  3247  176A  0AAE               	incf	___awtoft@sign,f
  3248  176B                     l5384:	
  3249  176B  0828               	movf	___awtoft@c,w
  3250  176C  00A0               	movwf	___ftpack@arg
  3251  176D  0829               	movf	___awtoft@c+1,w
  3252  176E  00A1               	movwf	___ftpack@arg+1
  3253  176F  01A2               	clrf	___ftpack@arg+2
  3254  1770  308E               	movlw	142
  3255  1771  00AB               	movwf	??___awtoft
  3256  1772  082B               	movf	??___awtoft,w
  3257  1773  00A3               	movwf	___ftpack@exp
  3258  1774  082E               	movf	___awtoft@sign,w
  3259  1775  00AC               	movwf	??___awtoft+1
  3260  1776  082C               	movf	??___awtoft+1,w
  3261  1777  00A4               	movwf	___ftpack@sign
  3262  1778  120A  158A  247A   	fcall	___ftpack
  3263  177B  1283               	bcf	3,5	;RP0=0, select bank0
  3264  177C  1303               	bcf	3,6	;RP1=0, select bank0
  3265  177D  0820               	movf	?___ftpack,w
  3266  177E  00A8               	movwf	?___awtoft
  3267  177F  0821               	movf	?___ftpack+1,w
  3268  1780  00A9               	movwf	?___awtoft+1
  3269  1781  0822               	movf	?___ftpack+2,w
  3270  1782  00AA               	movwf	?___awtoft+2
  3271  1783  0008               	return
  3272  1784                     __end_of___awtoft:	
  3273                           
  3274                           	psect	text13
  3275  1640                     __ptext13:	
  3276 ;; *************** function ___ftneg *****************
  3277 ;; Defined at:
  3278 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\ftneg.c"
  3279 ;; Parameters:    Size  Location     Type
  3280 ;;  f1              3    0[BANK0 ] float 
  3281 ;; Auto vars:     Size  Location     Type
  3282 ;;		None
  3283 ;; Return value:  Size  Location     Type
  3284 ;;                  3    0[BANK0 ] float 
  3285 ;; Registers used:
  3286 ;;		wreg
  3287 ;; Tracked objects:
  3288 ;;		On entry : 0/0
  3289 ;;		On exit  : 0/0
  3290 ;;		Unchanged: 0/0
  3291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3292 ;;      Params:         0       3       0       0       0
  3293 ;;      Locals:         0       0       0       0       0
  3294 ;;      Temps:          0       0       0       0       0
  3295 ;;      Totals:         0       3       0       0       0
  3296 ;;Total ram usage:        3 bytes
  3297 ;; Hardware stack levels used:    1
  3298 ;; Hardware stack levels required when called:    1
  3299 ;; This function calls:
  3300 ;;		Nothing
  3301 ;; This function is called by:
  3302 ;;		_tea5767_search
  3303 ;; This function uses a non-reentrant model
  3304 ;;
  3305                           
  3306                           
  3307                           ;psect for function ___ftneg
  3308  1640                     ___ftneg:	
  3309                           
  3310                           ;incstack = 0
  3311                           ; Regs used in ___ftneg: [wreg]
  3312  1640  1283               	bcf	3,5	;RP0=0, select bank0
  3313  1641  1303               	bcf	3,6	;RP1=0, select bank0
  3314  1642  0822               	movf	___ftneg@f1+2,w
  3315  1643  0421               	iorwf	___ftneg@f1+1,w
  3316  1644  0420               	iorwf	___ftneg@f1,w
  3317  1645  1903               	skipnz
  3318  1646  0008               	return
  3319  1647  3080               	movlw	128
  3320  1648  06A2               	xorwf	___ftneg@f1+2,f
  3321  1649  0008               	return
  3322  164A                     __end_of___ftneg:	
  3323                           
  3324                           	psect	text14
  3325  09F6                     __ptext14:	
  3326 ;; *************** function _tea5767_init *****************
  3327 ;; Defined at:
  3328 ;;		line 12 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\tea5767.c"
  3329 ;; Parameters:    Size  Location     Type
  3330 ;;		None
  3331 ;; Auto vars:     Size  Location     Type
  3332 ;;  pll             2   32[BANK1 ] unsigned int 
  3333 ;; Return value:  Size  Location     Type
  3334 ;;		None               void
  3335 ;; Registers used:
  3336 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3337 ;; Tracked objects:
  3338 ;;		On entry : 0/0
  3339 ;;		On exit  : 0/0
  3340 ;;		Unchanged: 0/0
  3341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3342 ;;      Params:         0       0       0       0       0
  3343 ;;      Locals:         0       0       2       0       0
  3344 ;;      Temps:          0       0       3       0       0
  3345 ;;      Totals:         0       0       5       0       0
  3346 ;;Total ram usage:        5 bytes
  3347 ;; Hardware stack levels used:    1
  3348 ;; Hardware stack levels required when called:    5
  3349 ;; This function calls:
  3350 ;;		_tea5767_getpll
  3351 ;;		_tea5767_write
  3352 ;; This function is called by:
  3353 ;;		_main
  3354 ;; This function uses a non-reentrant model
  3355 ;;
  3356                           
  3357                           
  3358                           ;psect for function _tea5767_init
  3359  09F6                     _tea5767_init:	
  3360                           
  3361                           ;tea5767.c: 15: _delay((unsigned long)((100)*(20000000/4000.0)));
  3362                           
  3363                           ;incstack = 0
  3364                           ; Regs used in _tea5767_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3365  09F6  3003               	movlw	3
  3366  09F7  1683               	bsf	3,5	;RP0=1, select bank1
  3367  09F8  1303               	bcf	3,6	;RP1=0, select bank1
  3368  09F9  00BF               	movwf	(??_tea5767_init^(0+128)+2)
  3369  09FA  308A               	movlw	138
  3370  09FB  00BE               	movwf	(??_tea5767_init^(0+128)+1)
  3371  09FC  3056               	movlw	86
  3372  09FD  00BD               	movwf	??_tea5767_init^(0+128)
  3373  09FE                     u5187:	
  3374  09FE  0BBD               	decfsz	??_tea5767_init^(0+128),f
  3375  09FF  29FE               	goto	u5187
  3376  0A00  0BBE               	decfsz	(??_tea5767_init^(0+128)+1),f
  3377  0A01  29FE               	goto	u5187
  3378  0A02  0BBF               	decfsz	(??_tea5767_init^(0+128)+2),f
  3379  0A03  29FE               	goto	u5187
  3380  0A04  2A05               	nop2
  3381                           
  3382                           ;tea5767.c: 17: current_freq = 87.0;
  3383  0A05  3000               	movlw	0
  3384  0A06  1683               	bsf	3,5	;RP0=1, select bank1
  3385  0A07  1303               	bcf	3,6	;RP1=0, select bank1
  3386  0A08  00E4               	movwf	tea5767@current_freq^(0+128)
  3387  0A09  30AE               	movlw	174
  3388  0A0A  00E5               	movwf	(tea5767@current_freq+1)^(0+128)
  3389  0A0B  3042               	movlw	66
  3390  0A0C  00E6               	movwf	(tea5767@current_freq+2)^(0+128)
  3391                           
  3392                           ;tea5767.c: 18: unsigned int pll = tea5767_getpll( current_freq );
  3393  0A0D  0864               	movf	tea5767@current_freq^(0+128),w
  3394  0A0E  00BA               	movwf	tea5767_getpll@freq^(0+128)
  3395  0A0F  0865               	movf	(tea5767@current_freq+1)^(0+128),w
  3396  0A10  00BB               	movwf	(tea5767_getpll@freq+1)^(0+128)
  3397  0A11  0866               	movf	(tea5767@current_freq+2)^(0+128),w
  3398  0A12  00BC               	movwf	(tea5767_getpll@freq+2)^(0+128)
  3399  0A13  120A  158A  25C6   	fcall	_tea5767_getpll
      +       120A  158A         
  3400  0A18  1683               	bsf	3,5	;RP0=1, select bank1
  3401  0A19  1303               	bcf	3,6	;RP1=0, select bank1
  3402  0A1A  083B               	movf	(?_tea5767_getpll+1)^(0+128),w
  3403  0A1B  01C1               	clrf	(tea5767_init@pll+1)^(0+128)
  3404  0A1C  07C1               	addwf	(tea5767_init@pll+1)^(0+128),f
  3405  0A1D  083A               	movf	?_tea5767_getpll^(0+128),w
  3406  0A1E  01C0               	clrf	tea5767_init@pll^(0+128)
  3407  0A1F  07C0               	addwf	tea5767_init@pll^(0+128),f
  3408                           
  3409                           ;tea5767.c: 20: commandbytes[0] = (pll >> 8);
  3410  0A20  0841               	movf	(tea5767_init@pll+1)^(0+128),w
  3411  0A21  00BD               	movwf	??_tea5767_init^(0+128)
  3412  0A22  083D               	movf	??_tea5767_init^(0+128),w
  3413  0A23  00DA               	movwf	tea5767@commandbytes^(0+128)
  3414                           
  3415                           ;tea5767.c: 21: commandbytes[1] = pll & 0xFF;
  3416  0A24  0840               	movf	tea5767_init@pll^(0+128),w
  3417  0A25  00BD               	movwf	??_tea5767_init^(0+128)
  3418  0A26  083D               	movf	??_tea5767_init^(0+128),w
  3419  0A27  00DB               	movwf	(tea5767@commandbytes^(0+128)+1)
  3420                           
  3421                           ;tea5767.c: 23: commandbytes[2] = 0xD0;
  3422  0A28  30D0               	movlw	208
  3423  0A29  00BD               	movwf	??_tea5767_init^(0+128)
  3424  0A2A  083D               	movf	??_tea5767_init^(0+128),w
  3425  0A2B  00DC               	movwf	(tea5767@commandbytes^(0+128)+2)
  3426                           
  3427                           ;tea5767.c: 24: commandbytes[3] = 0x10;
  3428  0A2C  3010               	movlw	16
  3429  0A2D  00BD               	movwf	??_tea5767_init^(0+128)
  3430  0A2E  083D               	movf	??_tea5767_init^(0+128),w
  3431  0A2F  00DD               	movwf	(tea5767@commandbytes^(0+128)+3)
  3432                           
  3433                           ;tea5767.c: 25: commandbytes[4] = 0x00;
  3434  0A30  01DE               	clrf	(tea5767@commandbytes^(0+128)+4)
  3435                           
  3436                           ;tea5767.c: 27: tea5767_write();
  3437  0A31  120A  118A  27AB   	fcall	_tea5767_write
  3438  0A34  0008               	return
  3439  0A35                     __end_of_tea5767_init:	
  3440                           
  3441                           	psect	text15
  3442  07AB                     __ptext15:	
  3443 ;; *************** function _tea5767_write *****************
  3444 ;; Defined at:
  3445 ;;		line 123 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\tea5767.c"
  3446 ;; Parameters:    Size  Location     Type
  3447 ;;		None
  3448 ;; Auto vars:     Size  Location     Type
  3449 ;;  i               2    0        int 
  3450 ;; Return value:  Size  Location     Type
  3451 ;;		None               void
  3452 ;; Registers used:
  3453 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3454 ;; Tracked objects:
  3455 ;;		On entry : 0/0
  3456 ;;		On exit  : 0/0
  3457 ;;		Unchanged: 0/0
  3458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3459 ;;      Params:         0       0       0       0       0
  3460 ;;      Locals:         0       0       0       0       0
  3461 ;;      Temps:          0       0       0       0       0
  3462 ;;      Totals:         0       0       0       0       0
  3463 ;;Total ram usage:        0 bytes
  3464 ;; Hardware stack levels used:    1
  3465 ;; Hardware stack levels required when called:    4
  3466 ;; This function calls:
  3467 ;;		_i2c_send_controlbyte
  3468 ;;		_i2c_send_data
  3469 ;;		_i2c_start
  3470 ;;		_i2c_stop
  3471 ;;		_serial_tx_printline
  3472 ;; This function is called by:
  3473 ;;		_tea5767_init
  3474 ;;		_tea5767_tune
  3475 ;;		_tea5767_search
  3476 ;; This function uses a non-reentrant model
  3477 ;;
  3478                           
  3479                           
  3480                           ;psect for function _tea5767_write
  3481  07AB                     _tea5767_write:	
  3482                           
  3483                           ;tea5767.c: 125: int i;
  3484                           ;tea5767.c: 127: i2c_start();
  3485                           
  3486                           ;incstack = 0
  3487                           ; Regs used in _tea5767_write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3488  07AB  160A  118A  262C   	fcall	_i2c_start
      +       120A  118A         
  3489                           
  3490                           ;tea5767.c: 128: i2c_send_controlbyte( 0x60, 0 );
  3491  07B0  01F4               	clrf	i2c_send_controlbyte@rw_bit
  3492  07B1  3060               	movlw	96
  3493  07B2  160A  118A  269B   	fcall	_i2c_send_controlbyte
      +       120A  118A         
  3494                           
  3495                           ;tea5767.c: 135: i2c_send_data( commandbytes[0] );
  3496  07B7  1683               	bsf	3,5	;RP0=1, select bank1
  3497  07B8  1303               	bcf	3,6	;RP1=0, select bank1
  3498  07B9  085A               	movf	tea5767@commandbytes^(0+128),w
  3499  07BA  160A  118A  2619   	fcall	_i2c_send_data
      +       120A  118A         
  3500                           
  3501                           ;tea5767.c: 136: i2c_send_data( commandbytes[1] );
  3502  07BF  1683               	bsf	3,5	;RP0=1, select bank1
  3503  07C0  1303               	bcf	3,6	;RP1=0, select bank1
  3504  07C1  085B               	movf	(tea5767@commandbytes^(0+128)+1),w
  3505  07C2  160A  118A  2619   	fcall	_i2c_send_data
      +       120A  118A         
  3506                           
  3507                           ;tea5767.c: 137: i2c_send_data( commandbytes[2] );
  3508  07C7  1683               	bsf	3,5	;RP0=1, select bank1
  3509  07C8  1303               	bcf	3,6	;RP1=0, select bank1
  3510  07C9  085C               	movf	(tea5767@commandbytes^(0+128)+2),w
  3511  07CA  160A  118A  2619   	fcall	_i2c_send_data
      +       120A  118A         
  3512                           
  3513                           ;tea5767.c: 138: i2c_send_data( commandbytes[3] );
  3514  07CF  1683               	bsf	3,5	;RP0=1, select bank1
  3515  07D0  1303               	bcf	3,6	;RP1=0, select bank1
  3516  07D1  085D               	movf	(tea5767@commandbytes^(0+128)+3),w
  3517  07D2  160A  118A  2619   	fcall	_i2c_send_data
      +       120A  118A         
  3518                           
  3519                           ;tea5767.c: 139: i2c_send_data( commandbytes[4] );
  3520  07D7  1683               	bsf	3,5	;RP0=1, select bank1
  3521  07D8  1303               	bcf	3,6	;RP1=0, select bank1
  3522  07D9  085E               	movf	(tea5767@commandbytes^(0+128)+4),w
  3523  07DA  160A  118A  2619   	fcall	_i2c_send_data
      +       120A  118A         
  3524                           
  3525                           ;tea5767.c: 142: if( SSPCON2bits.ACKSTAT == 1 ){
  3526  07DF  1683               	bsf	3,5	;RP0=1, select bank1
  3527  07E0  1303               	bcf	3,6	;RP1=0, select bank1
  3528  07E1  1F11               	btfss	17,6	;volatile
  3529  07E2  2FE9               	goto	l3954
  3530                           
  3531                           ;tea5767.c: 143: serial_tx_printline( "No Data ACK from slave" );
  3532  07E3  3033               	movlw	(STR_3-__stringbase)& (0+255)
  3533  07E4  160A  118A  26C1   	fcall	_serial_tx_printline
      +       120A  118A         
  3534  07E9                     l3954:	
  3535                           
  3536                           ;tea5767.c: 144: }
  3537                           ;tea5767.c: 146: i2c_stop();
  3538  07E9  160A  118A  2636   	fcall	_i2c_stop
  3539  07EC  0008               	return
  3540  07ED                     __end_of_tea5767_write:	
  3541                           
  3542                           	psect	text16
  3543  16C1                     __ptext16:	
  3544 ;; *************** function _serial_tx_printline *****************
  3545 ;; Defined at:
  3546 ;;		line 57 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\serial.c"
  3547 ;; Parameters:    Size  Location     Type
  3548 ;;  str             1    wreg     PTR unsigned char 
  3549 ;;		 -> STR_7(10), STR_6(16), STR_5(16), STR_4(36), 
  3550 ;;		 -> STR_3(23), 
  3551 ;; Auto vars:     Size  Location     Type
  3552 ;;  str             1    1[BANK0 ] PTR unsigned char 
  3553 ;;		 -> STR_7(10), STR_6(16), STR_5(16), STR_4(36), 
  3554 ;;		 -> STR_3(23), 
  3555 ;; Return value:  Size  Location     Type
  3556 ;;		None               void
  3557 ;; Registers used:
  3558 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3559 ;; Tracked objects:
  3560 ;;		On entry : 0/0
  3561 ;;		On exit  : 0/0
  3562 ;;		Unchanged: 0/0
  3563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3564 ;;      Params:         0       0       0       0       0
  3565 ;;      Locals:         0       1       0       0       0
  3566 ;;      Temps:          0       0       0       0       0
  3567 ;;      Totals:         0       1       0       0       0
  3568 ;;Total ram usage:        1 bytes
  3569 ;; Hardware stack levels used:    1
  3570 ;; Hardware stack levels required when called:    3
  3571 ;; This function calls:
  3572 ;;		_serial_tx_poll
  3573 ;;		_serial_tx_print
  3574 ;; This function is called by:
  3575 ;;		_tea5767_write
  3576 ;;		_tea5767_read
  3577 ;;		_tea5767_search
  3578 ;; This function uses a non-reentrant model
  3579 ;;
  3580                           
  3581                           
  3582                           ;psect for function _serial_tx_printline
  3583  16C1                     _serial_tx_printline:	
  3584                           
  3585                           ;incstack = 0
  3586                           ; Regs used in _serial_tx_printline: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3587                           ;serial_tx_printline@str stored from wreg
  3588  16C1  1283               	bcf	3,5	;RP0=0, select bank0
  3589  16C2  1303               	bcf	3,6	;RP1=0, select bank0
  3590  16C3  00A1               	movwf	serial_tx_printline@str
  3591                           
  3592                           ;serial.c: 59: serial_tx_print( str );
  3593  16C4  0821               	movf	serial_tx_printline@str,w
  3594  16C5  160A  118A  26F5   	fcall	_serial_tx_print
      +       160A  118A         
  3595                           
  3596                           ;serial.c: 62: serial_tx_poll( 0x0D );
  3597  16CA  300D               	movlw	13
  3598  16CB  160A  118A  2609   	fcall	_serial_tx_poll
      +       160A  118A         
  3599                           
  3600                           ;serial.c: 64: serial_tx_poll( 0x0A );
  3601  16D0  300A               	movlw	10
  3602  16D1  160A  118A  2609   	fcall	_serial_tx_poll
  3603  16D4  0008               	return
  3604  16D5                     __end_of_serial_tx_printline:	
  3605                           
  3606                           	psect	text17
  3607  16F5                     __ptext17:	
  3608 ;; *************** function _serial_tx_print *****************
  3609 ;; Defined at:
  3610 ;;		line 49 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\serial.c"
  3611 ;; Parameters:    Size  Location     Type
  3612 ;;  str             1    wreg     PTR unsigned char 
  3613 ;;		 -> STR_7(10), STR_6(16), STR_5(16), STR_4(36), 
  3614 ;;		 -> STR_3(23), 
  3615 ;; Auto vars:     Size  Location     Type
  3616 ;;  str             1    0[BANK0 ] PTR unsigned char 
  3617 ;;		 -> STR_7(10), STR_6(16), STR_5(16), STR_4(36), 
  3618 ;;		 -> STR_3(23), 
  3619 ;; Return value:  Size  Location     Type
  3620 ;;		None               void
  3621 ;; Registers used:
  3622 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3623 ;; Tracked objects:
  3624 ;;		On entry : 0/0
  3625 ;;		On exit  : 0/0
  3626 ;;		Unchanged: 0/0
  3627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3628 ;;      Params:         0       0       0       0       0
  3629 ;;      Locals:         0       1       0       0       0
  3630 ;;      Temps:          1       0       0       0       0
  3631 ;;      Totals:         1       1       0       0       0
  3632 ;;Total ram usage:        2 bytes
  3633 ;; Hardware stack levels used:    1
  3634 ;; Hardware stack levels required when called:    2
  3635 ;; This function calls:
  3636 ;;		_serial_tx_poll
  3637 ;; This function is called by:
  3638 ;;		_serial_tx_printline
  3639 ;; This function uses a non-reentrant model
  3640 ;;
  3641                           
  3642                           
  3643                           ;psect for function _serial_tx_print
  3644  16F5                     _serial_tx_print:	
  3645                           
  3646                           ;incstack = 0
  3647                           ; Regs used in _serial_tx_print: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3648                           ;serial_tx_print@str stored from wreg
  3649  16F5  1283               	bcf	3,5	;RP0=0, select bank0
  3650  16F6  1303               	bcf	3,6	;RP1=0, select bank0
  3651  16F7  00A0               	movwf	serial_tx_print@str
  3652  16F8                     l3648:	
  3653                           ;serial.c: 51: while( *(str) != '\0' ){
  3654                           
  3655  16F8  0820               	movf	serial_tx_print@str,w
  3656  16F9  0084               	movwf	4
  3657  16FA  120A  158A  200A   	fcall	stringdir
      +       160A  118A         
  3658  16FF  3800               	iorlw	0
  3659  1700  1903               	btfsc	3,2
  3660  1701  0008               	return
  3661                           
  3662                           ;serial.c: 53: str = str++;
  3663  1702  0820               	movf	serial_tx_print@str,w
  3664  1703  0084               	movwf	4
  3665  1704  120A  158A  200A   	fcall	stringdir
      +       160A  118A         
  3666  1709  160A  118A  2609   	fcall	_serial_tx_poll
      +       160A  118A         
  3667  170E  3001               	movlw	1
  3668  170F  00F5               	movwf	??_serial_tx_print
  3669  1710  0875               	movf	??_serial_tx_print,w
  3670  1711  1283               	bcf	3,5	;RP0=0, select bank0
  3671  1712  1303               	bcf	3,6	;RP1=0, select bank0
  3672  1713  07A0               	addwf	serial_tx_print@str,f
  3673  1714  2EF8               	goto	l3648
  3674  1715                     __end_of_serial_tx_print:	
  3675                           
  3676                           	psect	text18
  3677  1609                     __ptext18:	
  3678 ;; *************** function _serial_tx_poll *****************
  3679 ;; Defined at:
  3680 ;;		line 32 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\serial.c"
  3681 ;; Parameters:    Size  Location     Type
  3682 ;;  val             1    wreg     unsigned char 
  3683 ;; Auto vars:     Size  Location     Type
  3684 ;;  val             1    4[COMMON] unsigned char 
  3685 ;; Return value:  Size  Location     Type
  3686 ;;		None               void
  3687 ;; Registers used:
  3688 ;;		wreg
  3689 ;; Tracked objects:
  3690 ;;		On entry : 0/0
  3691 ;;		On exit  : 0/0
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3694 ;;      Params:         0       0       0       0       0
  3695 ;;      Locals:         1       0       0       0       0
  3696 ;;      Temps:          0       0       0       0       0
  3697 ;;      Totals:         1       0       0       0       0
  3698 ;;Total ram usage:        1 bytes
  3699 ;; Hardware stack levels used:    1
  3700 ;; Hardware stack levels required when called:    1
  3701 ;; This function calls:
  3702 ;;		Nothing
  3703 ;; This function is called by:
  3704 ;;		_serial_tx_print
  3705 ;;		_serial_tx_printline
  3706 ;;		_serial_tx_newline
  3707 ;;		_serial_rx_readline
  3708 ;; This function uses a non-reentrant model
  3709 ;;
  3710                           
  3711                           
  3712                           ;psect for function _serial_tx_poll
  3713  1609                     _serial_tx_poll:	
  3714                           
  3715                           ;incstack = 0
  3716                           ; Regs used in _serial_tx_poll: [wreg]
  3717                           ;serial_tx_poll@val stored from wreg
  3718  1609  00F4               	movwf	serial_tx_poll@val
  3719  160A                     l12:	
  3720                           ;serial.c: 34: while( PIR1bits.TXIF == 0 );
  3721                           
  3722  160A  1283               	bcf	3,5	;RP0=0, select bank0
  3723  160B  1303               	bcf	3,6	;RP1=0, select bank0
  3724  160C  1E0C               	btfss	12,4	;volatile
  3725  160D  2E0A               	goto	l12
  3726                           
  3727                           ;serial.c: 36: TXREG = val;
  3728  160E  0874               	movf	serial_tx_poll@val,w
  3729  160F  0099               	movwf	25	;volatile
  3730  1610  0008               	return
  3731  1611                     __end_of_serial_tx_poll:	
  3732                           
  3733                           	psect	text19
  3734  1636                     __ptext19:	
  3735 ;; *************** function _i2c_stop *****************
  3736 ;; Defined at:
  3737 ;;		line 25 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\i2c.c"
  3738 ;; Parameters:    Size  Location     Type
  3739 ;;		None
  3740 ;; Auto vars:     Size  Location     Type
  3741 ;;		None
  3742 ;; Return value:  Size  Location     Type
  3743 ;;		None               void
  3744 ;; Registers used:
  3745 ;;		None
  3746 ;; Tracked objects:
  3747 ;;		On entry : 0/0
  3748 ;;		On exit  : 0/0
  3749 ;;		Unchanged: 0/0
  3750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3751 ;;      Params:         0       0       0       0       0
  3752 ;;      Locals:         0       0       0       0       0
  3753 ;;      Temps:          0       0       0       0       0
  3754 ;;      Totals:         0       0       0       0       0
  3755 ;;Total ram usage:        0 bytes
  3756 ;; Hardware stack levels used:    1
  3757 ;; Hardware stack levels required when called:    1
  3758 ;; This function calls:
  3759 ;;		Nothing
  3760 ;; This function is called by:
  3761 ;;		_tea5767_write
  3762 ;;		_tea5767_read
  3763 ;; This function uses a non-reentrant model
  3764 ;;
  3765                           
  3766                           
  3767                           ;psect for function _i2c_stop
  3768  1636                     _i2c_stop:	
  3769                           
  3770                           ;i2c.c: 27: PIR1bits.SSPIF = 0;
  3771                           
  3772                           ;incstack = 0
  3773                           ; Regs used in _i2c_stop: []
  3774  1636  1283               	bcf	3,5	;RP0=0, select bank0
  3775  1637  1303               	bcf	3,6	;RP1=0, select bank0
  3776  1638  118C               	bcf	12,3	;volatile
  3777                           
  3778                           ;i2c.c: 28: SSPCON2bits.PEN = 1;
  3779  1639  1683               	bsf	3,5	;RP0=1, select bank1
  3780  163A  1303               	bcf	3,6	;RP1=0, select bank1
  3781  163B  1511               	bsf	17,2	;volatile
  3782  163C                     l188:	
  3783                           ;i2c.c: 29: while( !PIR1bits.SSPIF );
  3784                           
  3785  163C  1283               	bcf	3,5	;RP0=0, select bank0
  3786  163D  198C               	btfsc	12,3	;volatile
  3787  163E  0008               	return
  3788  163F  2E3C               	goto	l188
  3789  1640                     __end_of_i2c_stop:	
  3790                           
  3791                           	psect	text20
  3792  162C                     __ptext20:	
  3793 ;; *************** function _i2c_start *****************
  3794 ;; Defined at:
  3795 ;;		line 18 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\i2c.c"
  3796 ;; Parameters:    Size  Location     Type
  3797 ;;		None
  3798 ;; Auto vars:     Size  Location     Type
  3799 ;;		None
  3800 ;; Return value:  Size  Location     Type
  3801 ;;		None               void
  3802 ;; Registers used:
  3803 ;;		None
  3804 ;; Tracked objects:
  3805 ;;		On entry : 0/0
  3806 ;;		On exit  : 0/0
  3807 ;;		Unchanged: 0/0
  3808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3809 ;;      Params:         0       0       0       0       0
  3810 ;;      Locals:         0       0       0       0       0
  3811 ;;      Temps:          0       0       0       0       0
  3812 ;;      Totals:         0       0       0       0       0
  3813 ;;Total ram usage:        0 bytes
  3814 ;; Hardware stack levels used:    1
  3815 ;; Hardware stack levels required when called:    1
  3816 ;; This function calls:
  3817 ;;		Nothing
  3818 ;; This function is called by:
  3819 ;;		_tea5767_write
  3820 ;;		_tea5767_read
  3821 ;; This function uses a non-reentrant model
  3822 ;;
  3823                           
  3824                           
  3825                           ;psect for function _i2c_start
  3826  162C                     _i2c_start:	
  3827                           
  3828                           ;i2c.c: 20: PIR1bits.SSPIF = 0;
  3829                           
  3830                           ;incstack = 0
  3831                           ; Regs used in _i2c_start: []
  3832  162C  1283               	bcf	3,5	;RP0=0, select bank0
  3833  162D  1303               	bcf	3,6	;RP1=0, select bank0
  3834  162E  118C               	bcf	12,3	;volatile
  3835                           
  3836                           ;i2c.c: 21: SSPCON2bits.SEN = 1;
  3837  162F  1683               	bsf	3,5	;RP0=1, select bank1
  3838  1630  1303               	bcf	3,6	;RP1=0, select bank1
  3839  1631  1411               	bsf	17,0	;volatile
  3840  1632                     l182:	
  3841                           ;i2c.c: 22: while( !PIR1bits.SSPIF );
  3842                           
  3843  1632  1283               	bcf	3,5	;RP0=0, select bank0
  3844  1633  198C               	btfsc	12,3	;volatile
  3845  1634  0008               	return
  3846  1635  2E32               	goto	l182
  3847  1636                     __end_of_i2c_start:	
  3848                           
  3849                           	psect	text21
  3850  1619                     __ptext21:	
  3851 ;; *************** function _i2c_send_data *****************
  3852 ;; Defined at:
  3853 ;;		line 39 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\i2c.c"
  3854 ;; Parameters:    Size  Location     Type
  3855 ;;  dta             1    wreg     unsigned char 
  3856 ;; Auto vars:     Size  Location     Type
  3857 ;;  dta             1    4[COMMON] unsigned char 
  3858 ;; Return value:  Size  Location     Type
  3859 ;;		None               void
  3860 ;; Registers used:
  3861 ;;		wreg
  3862 ;; Tracked objects:
  3863 ;;		On entry : 0/0
  3864 ;;		On exit  : 0/0
  3865 ;;		Unchanged: 0/0
  3866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3867 ;;      Params:         0       0       0       0       0
  3868 ;;      Locals:         1       0       0       0       0
  3869 ;;      Temps:          0       0       0       0       0
  3870 ;;      Totals:         1       0       0       0       0
  3871 ;;Total ram usage:        1 bytes
  3872 ;; Hardware stack levels used:    1
  3873 ;; Hardware stack levels required when called:    1
  3874 ;; This function calls:
  3875 ;;		Nothing
  3876 ;; This function is called by:
  3877 ;;		_tea5767_write
  3878 ;; This function uses a non-reentrant model
  3879 ;;
  3880                           
  3881                           
  3882                           ;psect for function _i2c_send_data
  3883  1619                     _i2c_send_data:	
  3884                           
  3885                           ;incstack = 0
  3886                           ; Regs used in _i2c_send_data: [wreg]
  3887                           ;i2c_send_data@dta stored from wreg
  3888  1619  00F4               	movwf	i2c_send_data@dta
  3889                           
  3890                           ;i2c.c: 41: PIR1bits.SSPIF = 0;
  3891  161A  1283               	bcf	3,5	;RP0=0, select bank0
  3892  161B  1303               	bcf	3,6	;RP1=0, select bank0
  3893  161C  118C               	bcf	12,3	;volatile
  3894                           
  3895                           ;i2c.c: 42: SSPBUF = dta;
  3896  161D  0874               	movf	i2c_send_data@dta,w
  3897  161E  0093               	movwf	19	;volatile
  3898  161F                     l200:	
  3899                           ;i2c.c: 43: while( !PIR1bits.SSPIF );
  3900                           
  3901  161F  198C               	btfsc	12,3	;volatile
  3902  1620  0008               	return
  3903  1621  2E1F               	goto	l200
  3904  1622                     __end_of_i2c_send_data:	
  3905                           
  3906                           	psect	text22
  3907  169B                     __ptext22:	
  3908 ;; *************** function _i2c_send_controlbyte *****************
  3909 ;; Defined at:
  3910 ;;		line 32 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\i2c.c"
  3911 ;; Parameters:    Size  Location     Type
  3912 ;;  addr            1    wreg     unsigned char 
  3913 ;;  rw_bit          1    4[COMMON] unsigned char 
  3914 ;; Auto vars:     Size  Location     Type
  3915 ;;  addr            1    0[BANK0 ] unsigned char 
  3916 ;; Return value:  Size  Location     Type
  3917 ;;		None               void
  3918 ;; Registers used:
  3919 ;;		wreg, status,2, status,0
  3920 ;; Tracked objects:
  3921 ;;		On entry : 0/0
  3922 ;;		On exit  : 0/0
  3923 ;;		Unchanged: 0/0
  3924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3925 ;;      Params:         1       0       0       0       0
  3926 ;;      Locals:         0       1       0       0       0
  3927 ;;      Temps:          1       0       0       0       0
  3928 ;;      Totals:         2       1       0       0       0
  3929 ;;Total ram usage:        3 bytes
  3930 ;; Hardware stack levels used:    1
  3931 ;; Hardware stack levels required when called:    1
  3932 ;; This function calls:
  3933 ;;		Nothing
  3934 ;; This function is called by:
  3935 ;;		_tea5767_write
  3936 ;;		_tea5767_read
  3937 ;; This function uses a non-reentrant model
  3938 ;;
  3939                           
  3940                           
  3941                           ;psect for function _i2c_send_controlbyte
  3942  169B                     _i2c_send_controlbyte:	
  3943                           
  3944                           ;incstack = 0
  3945                           ; Regs used in _i2c_send_controlbyte: [wreg+status,2+status,0]
  3946                           ;i2c_send_controlbyte@addr stored from wreg
  3947  169B  1283               	bcf	3,5	;RP0=0, select bank0
  3948  169C  1303               	bcf	3,6	;RP1=0, select bank0
  3949  169D  00A0               	movwf	i2c_send_controlbyte@addr
  3950                           
  3951                           ;i2c.c: 34: PIR1bits.SSPIF = 0;
  3952  169E  118C               	bcf	12,3	;volatile
  3953                           
  3954                           ;i2c.c: 35: SSPBUF = (addr << 1) + rw_bit;
  3955  169F  0820               	movf	i2c_send_controlbyte@addr,w
  3956  16A0  00F5               	movwf	??_i2c_send_controlbyte
  3957  16A1  3001               	movlw	1
  3958  16A2                     u3365:	
  3959  16A2  1003               	clrc
  3960  16A3  0DF5               	rlf	??_i2c_send_controlbyte,f
  3961  16A4  3EFF               	addlw	-1
  3962  16A5  1D03               	skipz
  3963  16A6  2EA2               	goto	u3365
  3964  16A7  0874               	movf	i2c_send_controlbyte@rw_bit,w
  3965  16A8  0775               	addwf	??_i2c_send_controlbyte,w
  3966  16A9  0093               	movwf	19	;volatile
  3967  16AA                     l194:	
  3968                           ;i2c.c: 36: while( !PIR1bits.SSPIF );
  3969                           
  3970  16AA  198C               	btfsc	12,3	;volatile
  3971  16AB  0008               	return
  3972  16AC  2EAA               	goto	l194
  3973  16AD                     __end_of_i2c_send_controlbyte:	
  3974                           
  3975                           	psect	text23
  3976  0DC6                     __ptext23:	
  3977 ;; *************** function _tea5767_getpll *****************
  3978 ;; Defined at:
  3979 ;;		line 31 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\tea5767.c"
  3980 ;; Parameters:    Size  Location     Type
  3981 ;;  freq            3   26[BANK1 ] unsigned char 
  3982 ;; Auto vars:     Size  Location     Type
  3983 ;;		None
  3984 ;; Return value:  Size  Location     Type
  3985 ;;                  2   26[BANK1 ] unsigned int 
  3986 ;; Registers used:
  3987 ;;		wreg, status,2, status,0, pclath, cstack
  3988 ;; Tracked objects:
  3989 ;;		On entry : 0/0
  3990 ;;		On exit  : 0/0
  3991 ;;		Unchanged: 0/0
  3992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3993 ;;      Params:         0       0       3       0       0
  3994 ;;      Locals:         0       3       0       0       0
  3995 ;;      Temps:          0       0       0       0       0
  3996 ;;      Totals:         0       3       3       0       0
  3997 ;;Total ram usage:        6 bytes
  3998 ;; Hardware stack levels used:    1
  3999 ;; Hardware stack levels required when called:    3
  4000 ;; This function calls:
  4001 ;;		___ftadd
  4002 ;;		___ftdiv
  4003 ;;		___ftmul
  4004 ;;		___fttol
  4005 ;; This function is called by:
  4006 ;;		_tea5767_init
  4007 ;;		_tea5767_tune
  4008 ;;		_tea5767_search
  4009 ;; This function uses a non-reentrant model
  4010 ;;
  4011                           
  4012                           
  4013                           ;psect for function _tea5767_getpll
  4014  0DC6                     _tea5767_getpll:	
  4015                           
  4016                           ;tea5767.c: 33: return (unsigned int)(4 * ( freq * 1000000 + 225000 ) / 32768);
  4017                           
  4018                           ;incstack = 0
  4019                           ; Regs used in _tea5767_getpll: [wreg+status,2+status,0+pclath+cstack]
  4020  0DC6  1683               	bsf	3,5	;RP0=1, select bank1
  4021  0DC7  1303               	bcf	3,6	;RP1=0, select bank1
  4022  0DC8  083A               	movf	tea5767_getpll@freq^(0+128),w
  4023  0DC9  1283               	bcf	3,5	;RP0=0, select bank0
  4024  0DCA  1303               	bcf	3,6	;RP1=0, select bank0
  4025  0DCB  00D0               	movwf	___ftmul@f2
  4026  0DCC  1683               	bsf	3,5	;RP0=1, select bank1
  4027  0DCD  1303               	bcf	3,6	;RP1=0, select bank1
  4028  0DCE  083B               	movf	(tea5767_getpll@freq+1)^(0+128),w
  4029  0DCF  1283               	bcf	3,5	;RP0=0, select bank0
  4030  0DD0  1303               	bcf	3,6	;RP1=0, select bank0
  4031  0DD1  00D1               	movwf	___ftmul@f2+1
  4032  0DD2  1683               	bsf	3,5	;RP0=1, select bank1
  4033  0DD3  1303               	bcf	3,6	;RP1=0, select bank1
  4034  0DD4  083C               	movf	(tea5767_getpll@freq+2)^(0+128),w
  4035  0DD5  1283               	bcf	3,5	;RP0=0, select bank0
  4036  0DD6  1303               	bcf	3,6	;RP1=0, select bank0
  4037  0DD7  00D2               	movwf	___ftmul@f2+2
  4038  0DD8  3024               	movlw	36
  4039  0DD9  00CD               	movwf	___ftmul@f1
  4040  0DDA  3074               	movlw	116
  4041  0DDB  00CE               	movwf	___ftmul@f1+1
  4042  0DDC  3049               	movlw	73
  4043  0DDD  00CF               	movwf	___ftmul@f1+2
  4044  0DDE  120A  118A  2622   	fcall	___ftmul
      +       120A  158A         
  4045  0DE3  1283               	bcf	3,5	;RP0=0, select bank0
  4046  0DE4  1303               	bcf	3,6	;RP1=0, select bank0
  4047  0DE5  084D               	movf	?___ftmul,w
  4048  0DE6  00B2               	movwf	___ftadd@f2
  4049  0DE7  084E               	movf	?___ftmul+1,w
  4050  0DE8  00B3               	movwf	___ftadd@f2+1
  4051  0DE9  084F               	movf	?___ftmul+2,w
  4052  0DEA  00B4               	movwf	___ftadd@f2+2
  4053  0DEB  30BA               	movlw	186
  4054  0DEC  00AF               	movwf	___ftadd@f1
  4055  0DED  305B               	movlw	91
  4056  0DEE  00B0               	movwf	___ftadd@f1+1
  4057  0DEF  3048               	movlw	72
  4058  0DF0  00B1               	movwf	___ftadd@f1+2
  4059  0DF1  120A  118A  2184   	fcall	___ftadd
      +       120A  158A         
  4060  0DF6  1283               	bcf	3,5	;RP0=0, select bank0
  4061  0DF7  1303               	bcf	3,6	;RP1=0, select bank0
  4062  0DF8  082F               	movf	?___ftadd,w
  4063  0DF9  00ED               	movwf	_tea5767_getpll$1036
  4064  0DFA  0830               	movf	?___ftadd+1,w
  4065  0DFB  00EE               	movwf	_tea5767_getpll$1036+1
  4066  0DFC  0831               	movf	?___ftadd+2,w
  4067  0DFD  00EF               	movwf	_tea5767_getpll$1036+2
  4068                           
  4069                           ;tea5767.c: 33: return (unsigned int)(4 * ( freq * 1000000 + 225000 ) / 32768);
  4070  0DFE  086D               	movf	_tea5767_getpll$1036,w
  4071  0DFF  00D0               	movwf	___ftmul@f2
  4072  0E00  086E               	movf	_tea5767_getpll$1036+1,w
  4073  0E01  00D1               	movwf	___ftmul@f2+1
  4074  0E02  086F               	movf	_tea5767_getpll$1036+2,w
  4075  0E03  00D2               	movwf	___ftmul@f2+2
  4076  0E04  3000               	movlw	0
  4077  0E05  00CD               	movwf	___ftmul@f1
  4078  0E06  3080               	movlw	128
  4079  0E07  00CE               	movwf	___ftmul@f1+1
  4080  0E08  3040               	movlw	64
  4081  0E09  00CF               	movwf	___ftmul@f1+2
  4082  0E0A  120A  118A  2622   	fcall	___ftmul
      +       120A  158A         
  4083  0E0F  1283               	bcf	3,5	;RP0=0, select bank0
  4084  0E10  1303               	bcf	3,6	;RP1=0, select bank0
  4085  0E11  084D               	movf	?___ftmul,w
  4086  0E12  1683               	bsf	3,5	;RP0=1, select bank1
  4087  0E13  1303               	bcf	3,6	;RP1=0, select bank1
  4088  0E14  00A3               	movwf	___ftdiv@f1^(0+128)
  4089  0E15  1283               	bcf	3,5	;RP0=0, select bank0
  4090  0E16  1303               	bcf	3,6	;RP1=0, select bank0
  4091  0E17  084E               	movf	?___ftmul+1,w
  4092  0E18  1683               	bsf	3,5	;RP0=1, select bank1
  4093  0E19  1303               	bcf	3,6	;RP1=0, select bank1
  4094  0E1A  00A4               	movwf	(___ftdiv@f1+1)^(0+128)
  4095  0E1B  1283               	bcf	3,5	;RP0=0, select bank0
  4096  0E1C  1303               	bcf	3,6	;RP1=0, select bank0
  4097  0E1D  084F               	movf	?___ftmul+2,w
  4098  0E1E  1683               	bsf	3,5	;RP0=1, select bank1
  4099  0E1F  1303               	bcf	3,6	;RP1=0, select bank1
  4100  0E20  00A5               	movwf	(___ftdiv@f1+2)^(0+128)
  4101  0E21  3000               	movlw	0
  4102  0E22  00A0               	movwf	___ftdiv@f2^(0+128)
  4103  0E23  3000               	movlw	0
  4104  0E24  00A1               	movwf	(___ftdiv@f2+1)^(0+128)
  4105  0E25  3047               	movlw	71
  4106  0E26  00A2               	movwf	(___ftdiv@f2+2)^(0+128)
  4107  0E27  120A  118A  228D   	fcall	___ftdiv
      +       120A  158A         
  4108  0E2C  1683               	bsf	3,5	;RP0=1, select bank1
  4109  0E2D  1303               	bcf	3,6	;RP1=0, select bank1
  4110  0E2E  0820               	movf	?___ftdiv^(0+128),w
  4111  0E2F  00A6               	movwf	___fttol@f1^(0+128)
  4112  0E30  0821               	movf	(?___ftdiv+1)^(0+128),w
  4113  0E31  00A7               	movwf	(___fttol@f1+1)^(0+128)
  4114  0E32  0822               	movf	(?___ftdiv+2)^(0+128),w
  4115  0E33  00A8               	movwf	(___fttol@f1+2)^(0+128)
  4116  0E34  120A  158A  26C1   	fcall	___fttol
  4117  0E37  1683               	bsf	3,5	;RP0=1, select bank1
  4118  0E38  1303               	bcf	3,6	;RP1=0, select bank1
  4119  0E39  0827               	movf	(?___fttol^(0+128)+1),w
  4120  0E3A  01BB               	clrf	(?_tea5767_getpll+1)^(0+128)
  4121  0E3B  07BB               	addwf	(?_tea5767_getpll+1)^(0+128),f
  4122  0E3C  0826               	movf	?___fttol^(0+128),w
  4123  0E3D  01BA               	clrf	?_tea5767_getpll^(0+128)
  4124  0E3E  07BA               	addwf	?_tea5767_getpll^(0+128),f
  4125  0E3F  0008               	return
  4126  0E40                     __end_of_tea5767_getpll:	
  4127                           
  4128                           	psect	text24
  4129  028D                     __ptext24:	
  4130 ;; *************** function ___ftdiv *****************
  4131 ;; Defined at:
  4132 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\pic\ftdiv.c"
  4133 ;; Parameters:    Size  Location     Type
  4134 ;;  f2              3    0[BANK1 ] float 
  4135 ;;  f1              3    3[BANK1 ] float 
  4136 ;; Auto vars:     Size  Location     Type
  4137 ;;  f3              3   72[BANK0 ] float 
  4138 ;;  sign            1   76[BANK0 ] unsigned char 
  4139 ;;  exp             1   75[BANK0 ] unsigned char 
  4140 ;;  cntr            1   71[BANK0 ] unsigned char 
  4141 ;; Return value:  Size  Location     Type
  4142 ;;                  3    0[BANK1 ] float 
  4143 ;; Registers used:
  4144 ;;		wreg, status,2, status,0, pclath, cstack
  4145 ;; Tracked objects:
  4146 ;;		On entry : 0/0
  4147 ;;		On exit  : 0/0
  4148 ;;		Unchanged: 0/0
  4149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4150 ;;      Params:         0       0       6       0       0
  4151 ;;      Locals:         0      12       0       0       0
  4152 ;;      Temps:          0       4       0       0       0
  4153 ;;      Totals:         0      16       6       0       0
  4154 ;;Total ram usage:       22 bytes
  4155 ;; Hardware stack levels used:    1
  4156 ;; Hardware stack levels required when called:    2
  4157 ;; This function calls:
  4158 ;;		___ftpack
  4159 ;; This function is called by:
  4160 ;;		_tea5767_getpll
  4161 ;;		_tea5767_getfreq
  4162 ;;		_tea5767_round_freq
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           
  4167                           ;psect for function ___ftdiv
  4168  028D                     ___ftdiv:	
  4169                           
  4170                           ;incstack = 0
  4171                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  4172  028D  1683               	bsf	3,5	;RP0=1, select bank1
  4173  028E  1303               	bcf	3,6	;RP1=0, select bank1
  4174  028F  0823               	movf	___ftdiv@f1^(0+128),w
  4175  0290  1283               	bcf	3,5	;RP0=0, select bank0
  4176  0291  1303               	bcf	3,6	;RP1=0, select bank0
  4177  0292  00DD               	movwf	??___ftdiv
  4178  0293  1683               	bsf	3,5	;RP0=1, select bank1
  4179  0294  1303               	bcf	3,6	;RP1=0, select bank1
  4180  0295  0824               	movf	(___ftdiv@f1+1)^(0+128),w
  4181  0296  1283               	bcf	3,5	;RP0=0, select bank0
  4182  0297  1303               	bcf	3,6	;RP1=0, select bank0
  4183  0298  00DE               	movwf	??___ftdiv+1
  4184  0299  1683               	bsf	3,5	;RP0=1, select bank1
  4185  029A  1303               	bcf	3,6	;RP1=0, select bank1
  4186  029B  0825               	movf	(___ftdiv@f1+2)^(0+128),w
  4187  029C  1283               	bcf	3,5	;RP0=0, select bank0
  4188  029D  1303               	bcf	3,6	;RP1=0, select bank0
  4189  029E  00DF               	movwf	??___ftdiv+2
  4190  029F  1003               	clrc
  4191  02A0  0D5E               	rlf	??___ftdiv+1,w
  4192  02A1  0D5F               	rlf	??___ftdiv+2,w
  4193  02A2  00E0               	movwf	??___ftdiv+3
  4194  02A3  0860               	movf	??___ftdiv+3,w
  4195  02A4  00EB               	movwf	___ftdiv@exp
  4196  02A5  08EB               	movf	___ftdiv@exp,f
  4197  02A6  1D03               	skipz
  4198  02A7  2AB1               	goto	l4386
  4199  02A8  3000               	movlw	0
  4200  02A9  1683               	bsf	3,5	;RP0=1, select bank1
  4201  02AA  1303               	bcf	3,6	;RP1=0, select bank1
  4202  02AB  00A0               	movwf	?___ftdiv^(0+128)
  4203  02AC  3000               	movlw	0
  4204  02AD  00A1               	movwf	(?___ftdiv+1)^(0+128)
  4205  02AE  3000               	movlw	0
  4206  02AF  00A2               	movwf	(?___ftdiv+2)^(0+128)
  4207  02B0  0008               	return
  4208  02B1                     l4386:	
  4209  02B1  1683               	bsf	3,5	;RP0=1, select bank1
  4210  02B2  1303               	bcf	3,6	;RP1=0, select bank1
  4211  02B3  0820               	movf	___ftdiv@f2^(0+128),w
  4212  02B4  1283               	bcf	3,5	;RP0=0, select bank0
  4213  02B5  1303               	bcf	3,6	;RP1=0, select bank0
  4214  02B6  00DD               	movwf	??___ftdiv
  4215  02B7  1683               	bsf	3,5	;RP0=1, select bank1
  4216  02B8  1303               	bcf	3,6	;RP1=0, select bank1
  4217  02B9  0821               	movf	(___ftdiv@f2+1)^(0+128),w
  4218  02BA  1283               	bcf	3,5	;RP0=0, select bank0
  4219  02BB  1303               	bcf	3,6	;RP1=0, select bank0
  4220  02BC  00DE               	movwf	??___ftdiv+1
  4221  02BD  1683               	bsf	3,5	;RP0=1, select bank1
  4222  02BE  1303               	bcf	3,6	;RP1=0, select bank1
  4223  02BF  0822               	movf	(___ftdiv@f2+2)^(0+128),w
  4224  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  4225  02C1  1303               	bcf	3,6	;RP1=0, select bank0
  4226  02C2  00DF               	movwf	??___ftdiv+2
  4227  02C3  1003               	clrc
  4228  02C4  0D5E               	rlf	??___ftdiv+1,w
  4229  02C5  0D5F               	rlf	??___ftdiv+2,w
  4230  02C6  00E0               	movwf	??___ftdiv+3
  4231  02C7  0860               	movf	??___ftdiv+3,w
  4232  02C8  00EC               	movwf	___ftdiv@sign
  4233  02C9  08EC               	movf	___ftdiv@sign,f
  4234  02CA  1D03               	skipz
  4235  02CB  2AD5               	goto	l4392
  4236  02CC  3000               	movlw	0
  4237  02CD  1683               	bsf	3,5	;RP0=1, select bank1
  4238  02CE  1303               	bcf	3,6	;RP1=0, select bank1
  4239  02CF  00A0               	movwf	?___ftdiv^(0+128)
  4240  02D0  3000               	movlw	0
  4241  02D1  00A1               	movwf	(?___ftdiv+1)^(0+128)
  4242  02D2  3000               	movlw	0
  4243  02D3  00A2               	movwf	(?___ftdiv+2)^(0+128)
  4244  02D4  0008               	return
  4245  02D5                     l4392:	
  4246  02D5  3000               	movlw	0
  4247  02D6  1283               	bcf	3,5	;RP0=0, select bank0
  4248  02D7  00E8               	movwf	___ftdiv@f3
  4249  02D8  3000               	movlw	0
  4250  02D9  00E9               	movwf	___ftdiv@f3+1
  4251  02DA  3000               	movlw	0
  4252  02DB  00EA               	movwf	___ftdiv@f3+2
  4253  02DC  3089               	movlw	137
  4254  02DD  076C               	addwf	___ftdiv@sign,w
  4255  02DE  00DD               	movwf	??___ftdiv
  4256  02DF  085D               	movf	??___ftdiv,w
  4257  02E0  02EB               	subwf	___ftdiv@exp,f
  4258  02E1  1683               	bsf	3,5	;RP0=1, select bank1
  4259  02E2  1303               	bcf	3,6	;RP1=0, select bank1
  4260  02E3  0823               	movf	___ftdiv@f1^(0+128),w
  4261  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  4262  02E5  1303               	bcf	3,6	;RP1=0, select bank0
  4263  02E6  00DD               	movwf	??___ftdiv
  4264  02E7  1683               	bsf	3,5	;RP0=1, select bank1
  4265  02E8  1303               	bcf	3,6	;RP1=0, select bank1
  4266  02E9  0824               	movf	(___ftdiv@f1+1)^(0+128),w
  4267  02EA  1283               	bcf	3,5	;RP0=0, select bank0
  4268  02EB  1303               	bcf	3,6	;RP1=0, select bank0
  4269  02EC  00DE               	movwf	??___ftdiv+1
  4270  02ED  1683               	bsf	3,5	;RP0=1, select bank1
  4271  02EE  1303               	bcf	3,6	;RP1=0, select bank1
  4272  02EF  0825               	movf	(___ftdiv@f1+2)^(0+128),w
  4273  02F0  1283               	bcf	3,5	;RP0=0, select bank0
  4274  02F1  1303               	bcf	3,6	;RP1=0, select bank0
  4275  02F2  00DF               	movwf	??___ftdiv+2
  4276  02F3  3010               	movlw	16
  4277  02F4                     u4135:	
  4278  02F4  1003               	clrc
  4279  02F5  0CDF               	rrf	??___ftdiv+2,f
  4280  02F6  0CDE               	rrf	??___ftdiv+1,f
  4281  02F7  0CDD               	rrf	??___ftdiv,f
  4282  02F8  3EFF               	addlw	-1
  4283  02F9  1D03               	skipz
  4284  02FA  2AF4               	goto	u4135
  4285  02FB  085D               	movf	??___ftdiv,w
  4286  02FC  00E0               	movwf	??___ftdiv+3
  4287  02FD  0860               	movf	??___ftdiv+3,w
  4288  02FE  00EC               	movwf	___ftdiv@sign
  4289  02FF  1683               	bsf	3,5	;RP0=1, select bank1
  4290  0300  1303               	bcf	3,6	;RP1=0, select bank1
  4291  0301  0820               	movf	___ftdiv@f2^(0+128),w
  4292  0302  1283               	bcf	3,5	;RP0=0, select bank0
  4293  0303  1303               	bcf	3,6	;RP1=0, select bank0
  4294  0304  00DD               	movwf	??___ftdiv
  4295  0305  1683               	bsf	3,5	;RP0=1, select bank1
  4296  0306  1303               	bcf	3,6	;RP1=0, select bank1
  4297  0307  0821               	movf	(___ftdiv@f2+1)^(0+128),w
  4298  0308  1283               	bcf	3,5	;RP0=0, select bank0
  4299  0309  1303               	bcf	3,6	;RP1=0, select bank0
  4300  030A  00DE               	movwf	??___ftdiv+1
  4301  030B  1683               	bsf	3,5	;RP0=1, select bank1
  4302  030C  1303               	bcf	3,6	;RP1=0, select bank1
  4303  030D  0822               	movf	(___ftdiv@f2+2)^(0+128),w
  4304  030E  1283               	bcf	3,5	;RP0=0, select bank0
  4305  030F  1303               	bcf	3,6	;RP1=0, select bank0
  4306  0310  00DF               	movwf	??___ftdiv+2
  4307  0311  3010               	movlw	16
  4308  0312                     u4145:	
  4309  0312  1003               	clrc
  4310  0313  0CDF               	rrf	??___ftdiv+2,f
  4311  0314  0CDE               	rrf	??___ftdiv+1,f
  4312  0315  0CDD               	rrf	??___ftdiv,f
  4313  0316  3EFF               	addlw	-1
  4314  0317  1D03               	skipz
  4315  0318  2B12               	goto	u4145
  4316  0319  085D               	movf	??___ftdiv,w
  4317  031A  00E0               	movwf	??___ftdiv+3
  4318  031B  0860               	movf	??___ftdiv+3,w
  4319  031C  06EC               	xorwf	___ftdiv@sign,f
  4320  031D  3080               	movlw	128
  4321  031E  00DD               	movwf	??___ftdiv
  4322  031F  085D               	movf	??___ftdiv,w
  4323  0320  05EC               	andwf	___ftdiv@sign,f
  4324  0321  1683               	bsf	3,5	;RP0=1, select bank1
  4325  0322  1303               	bcf	3,6	;RP1=0, select bank1
  4326  0323  17A4               	bsf	(___ftdiv@f1^(0+128)+1),7
  4327  0324  30FF               	movlw	255
  4328  0325  05A3               	andwf	___ftdiv@f1^(0+128),f
  4329  0326  30FF               	movlw	255
  4330  0327  05A4               	andwf	(___ftdiv@f1+1)^(0+128),f
  4331  0328  3000               	movlw	0
  4332  0329  05A5               	andwf	(___ftdiv@f1+2)^(0+128),f
  4333  032A  17A1               	bsf	(___ftdiv@f2^(0+128)+1),7
  4334  032B  30FF               	movlw	255
  4335  032C  05A0               	andwf	___ftdiv@f2^(0+128),f
  4336  032D  30FF               	movlw	255
  4337  032E  05A1               	andwf	(___ftdiv@f2+1)^(0+128),f
  4338  032F  3000               	movlw	0
  4339  0330  05A2               	andwf	(___ftdiv@f2+2)^(0+128),f
  4340  0331  3018               	movlw	24
  4341  0332  1283               	bcf	3,5	;RP0=0, select bank0
  4342  0333  1303               	bcf	3,6	;RP1=0, select bank0
  4343  0334  00DD               	movwf	??___ftdiv
  4344  0335  085D               	movf	??___ftdiv,w
  4345  0336  00E7               	movwf	___ftdiv@cntr
  4346  0337                     l4406:	
  4347  0337  3001               	movlw	1
  4348  0338                     u4155:	
  4349  0338  1003               	clrc
  4350  0339  0DE8               	rlf	___ftdiv@f3,f
  4351  033A  0DE9               	rlf	___ftdiv@f3+1,f
  4352  033B  0DEA               	rlf	___ftdiv@f3+2,f
  4353  033C  3EFF               	addlw	-1
  4354  033D  1D03               	skipz
  4355  033E  2B38               	goto	u4155
  4356  033F  1683               	bsf	3,5	;RP0=1, select bank1
  4357  0340  1303               	bcf	3,6	;RP1=0, select bank1
  4358  0341  0822               	movf	(___ftdiv@f2+2)^(0+128),w
  4359  0342  0225               	subwf	(___ftdiv@f1+2)^(0+128),w
  4360  0343  1D03               	skipz
  4361  0344  2B4B               	goto	u4165
  4362  0345  0821               	movf	(___ftdiv@f2+1)^(0+128),w
  4363  0346  0224               	subwf	(___ftdiv@f1+1)^(0+128),w
  4364  0347  1D03               	skipz
  4365  0348  2B4B               	goto	u4165
  4366  0349  0820               	movf	___ftdiv@f2^(0+128),w
  4367  034A  0223               	subwf	___ftdiv@f1^(0+128),w
  4368  034B                     u4165:	
  4369  034B  1C03               	skipc
  4370  034C  2B5A               	goto	l4414
  4371  034D  0820               	movf	___ftdiv@f2^(0+128),w
  4372  034E  02A3               	subwf	___ftdiv@f1^(0+128),f
  4373  034F  0821               	movf	(___ftdiv@f2+1)^(0+128),w
  4374  0350  1C03               	skipc
  4375  0351  0F21               	incfsz	(___ftdiv@f2+1)^(0+128),w
  4376  0352  02A4               	subwf	(___ftdiv@f1+1)^(0+128),f
  4377  0353  0822               	movf	(___ftdiv@f2+2)^(0+128),w
  4378  0354  1C03               	skipc
  4379  0355  0A22               	incf	(___ftdiv@f2+2)^(0+128),w
  4380  0356  02A5               	subwf	(___ftdiv@f1+2)^(0+128),f
  4381  0357  1283               	bcf	3,5	;RP0=0, select bank0
  4382  0358  1303               	bcf	3,6	;RP1=0, select bank0
  4383  0359  1468               	bsf	___ftdiv@f3,0
  4384  035A                     l4414:	
  4385  035A  3001               	movlw	1
  4386  035B                     u4175:	
  4387  035B  1003               	clrc
  4388  035C  1683               	bsf	3,5	;RP0=1, select bank1
  4389  035D  1303               	bcf	3,6	;RP1=0, select bank1
  4390  035E  0DA3               	rlf	___ftdiv@f1^(0+128),f
  4391  035F  0DA4               	rlf	(___ftdiv@f1+1)^(0+128),f
  4392  0360  0DA5               	rlf	(___ftdiv@f1+2)^(0+128),f
  4393  0361  3EFF               	addlw	-1
  4394  0362  1D03               	skipz
  4395  0363  2B5B               	goto	u4175
  4396  0364  3001               	movlw	1
  4397  0365  1283               	bcf	3,5	;RP0=0, select bank0
  4398  0366  1303               	bcf	3,6	;RP1=0, select bank0
  4399  0367  02E7               	subwf	___ftdiv@cntr,f
  4400  0368  1D03               	btfss	3,2
  4401  0369  2B37               	goto	l4406
  4402  036A  0868               	movf	___ftdiv@f3,w
  4403  036B  00A0               	movwf	___ftpack@arg
  4404  036C  0869               	movf	___ftdiv@f3+1,w
  4405  036D  00A1               	movwf	___ftpack@arg+1
  4406  036E  086A               	movf	___ftdiv@f3+2,w
  4407  036F  00A2               	movwf	___ftpack@arg+2
  4408  0370  086B               	movf	___ftdiv@exp,w
  4409  0371  00DD               	movwf	??___ftdiv
  4410  0372  085D               	movf	??___ftdiv,w
  4411  0373  00A3               	movwf	___ftpack@exp
  4412  0374  086C               	movf	___ftdiv@sign,w
  4413  0375  00DE               	movwf	??___ftdiv+1
  4414  0376  085E               	movf	??___ftdiv+1,w
  4415  0377  00A4               	movwf	___ftpack@sign
  4416  0378  120A  158A  247A   	fcall	___ftpack
  4417  037B  1283               	bcf	3,5	;RP0=0, select bank0
  4418  037C  1303               	bcf	3,6	;RP1=0, select bank0
  4419  037D  0820               	movf	?___ftpack,w
  4420  037E  1683               	bsf	3,5	;RP0=1, select bank1
  4421  037F  1303               	bcf	3,6	;RP1=0, select bank1
  4422  0380  00A0               	movwf	?___ftdiv^(0+128)
  4423  0381  1283               	bcf	3,5	;RP0=0, select bank0
  4424  0382  1303               	bcf	3,6	;RP1=0, select bank0
  4425  0383  0821               	movf	?___ftpack+1,w
  4426  0384  1683               	bsf	3,5	;RP0=1, select bank1
  4427  0385  1303               	bcf	3,6	;RP1=0, select bank1
  4428  0386  00A1               	movwf	(?___ftdiv+1)^(0+128)
  4429  0387  1283               	bcf	3,5	;RP0=0, select bank0
  4430  0388  1303               	bcf	3,6	;RP1=0, select bank0
  4431  0389  0822               	movf	?___ftpack+2,w
  4432  038A  1683               	bsf	3,5	;RP0=1, select bank1
  4433  038B  1303               	bcf	3,6	;RP1=0, select bank1
  4434  038C  00A2               	movwf	(?___ftdiv+2)^(0+128)
  4435  038D  0008               	return
  4436  038E                     __end_of___ftdiv:	
  4437                           
  4438                           	psect	text25
  4439  0184                     __ptext25:	
  4440 ;; *************** function ___ftadd *****************
  4441 ;; Defined at:
  4442 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\ftadd.c"
  4443 ;; Parameters:    Size  Location     Type
  4444 ;;  f1              3   15[BANK0 ] float 
  4445 ;;  f2              3   18[BANK0 ] float 
  4446 ;; Auto vars:     Size  Location     Type
  4447 ;;  exp1            1   30[BANK0 ] unsigned char 
  4448 ;;  exp2            1   29[BANK0 ] unsigned char 
  4449 ;;  sign            1   28[BANK0 ] unsigned char 
  4450 ;; Return value:  Size  Location     Type
  4451 ;;                  3   15[BANK0 ] float 
  4452 ;; Registers used:
  4453 ;;		wreg, status,2, status,0, pclath, cstack
  4454 ;; Tracked objects:
  4455 ;;		On entry : 0/0
  4456 ;;		On exit  : 0/0
  4457 ;;		Unchanged: 0/0
  4458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4459 ;;      Params:         0       6       0       0       0
  4460 ;;      Locals:         0       6       0       0       0
  4461 ;;      Temps:          0       4       0       0       0
  4462 ;;      Totals:         0      16       0       0       0
  4463 ;;Total ram usage:       16 bytes
  4464 ;; Hardware stack levels used:    1
  4465 ;; Hardware stack levels required when called:    2
  4466 ;; This function calls:
  4467 ;;		___ftpack
  4468 ;; This function is called by:
  4469 ;;		_tea5767_getpll
  4470 ;;		_tea5767_getfreq
  4471 ;;		_tea5767_search
  4472 ;;		_ceil
  4473 ;; This function uses a non-reentrant model
  4474 ;;
  4475                           
  4476                           
  4477                           ;psect for function ___ftadd
  4478  0184                     ___ftadd:	
  4479                           
  4480                           ;incstack = 0
  4481                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  4482  0184  1283               	bcf	3,5	;RP0=0, select bank0
  4483  0185  1303               	bcf	3,6	;RP1=0, select bank0
  4484  0186  082F               	movf	___ftadd@f1,w
  4485  0187  00B5               	movwf	??___ftadd
  4486  0188  0830               	movf	___ftadd@f1+1,w
  4487  0189  00B6               	movwf	??___ftadd+1
  4488  018A  0831               	movf	___ftadd@f1+2,w
  4489  018B  00B7               	movwf	??___ftadd+2
  4490  018C  1003               	clrc
  4491  018D  0D36               	rlf	??___ftadd+1,w
  4492  018E  0D37               	rlf	??___ftadd+2,w
  4493  018F  00B8               	movwf	??___ftadd+3
  4494  0190  0838               	movf	??___ftadd+3,w
  4495  0191  00BE               	movwf	___ftadd@exp1
  4496  0192  0832               	movf	___ftadd@f2,w
  4497  0193  00B5               	movwf	??___ftadd
  4498  0194  0833               	movf	___ftadd@f2+1,w
  4499  0195  00B6               	movwf	??___ftadd+1
  4500  0196  0834               	movf	___ftadd@f2+2,w
  4501  0197  00B7               	movwf	??___ftadd+2
  4502  0198  1003               	clrc
  4503  0199  0D36               	rlf	??___ftadd+1,w
  4504  019A  0D37               	rlf	??___ftadd+2,w
  4505  019B  00B8               	movwf	??___ftadd+3
  4506  019C  0838               	movf	??___ftadd+3,w
  4507  019D  00BD               	movwf	___ftadd@exp2
  4508  019E  083E               	movf	___ftadd@exp1,w
  4509  019F  1903               	btfsc	3,2
  4510  01A0  29AD               	goto	l4316
  4511  01A1  083D               	movf	___ftadd@exp2,w
  4512  01A2  023E               	subwf	___ftadd@exp1,w
  4513  01A3  1803               	skipnc
  4514  01A4  29B4               	goto	l4320
  4515  01A5  033E               	decf	___ftadd@exp1,w
  4516  01A6  3AFF               	xorlw	255
  4517  01A7  073D               	addwf	___ftadd@exp2,w
  4518  01A8  00B5               	movwf	??___ftadd
  4519  01A9  3019               	movlw	25
  4520  01AA  0235               	subwf	??___ftadd,w
  4521  01AB  1C03               	skipc
  4522  01AC  29B4               	goto	l4320
  4523  01AD                     l4316:	
  4524  01AD  0832               	movf	___ftadd@f2,w
  4525  01AE  00AF               	movwf	?___ftadd
  4526  01AF  0833               	movf	___ftadd@f2+1,w
  4527  01B0  00B0               	movwf	?___ftadd+1
  4528  01B1  0834               	movf	___ftadd@f2+2,w
  4529  01B2  00B1               	movwf	?___ftadd+2
  4530  01B3  0008               	return
  4531  01B4                     l4320:	
  4532  01B4  083D               	movf	___ftadd@exp2,w
  4533  01B5  1903               	btfsc	3,2
  4534  01B6  0008               	return
  4535  01B7  083E               	movf	___ftadd@exp1,w
  4536  01B8  023D               	subwf	___ftadd@exp2,w
  4537  01B9  1803               	skipnc
  4538  01BA  29C3               	goto	l4326
  4539  01BB  033D               	decf	___ftadd@exp2,w
  4540  01BC  3AFF               	xorlw	255
  4541  01BD  073E               	addwf	___ftadd@exp1,w
  4542  01BE  00B5               	movwf	??___ftadd
  4543  01BF  3019               	movlw	25
  4544  01C0  0235               	subwf	??___ftadd,w
  4545  01C1  1803               	btfsc	3,0
  4546  01C2  0008               	return
  4547  01C3                     l4326:	
  4548  01C3  3006               	movlw	6
  4549  01C4  00B5               	movwf	??___ftadd
  4550  01C5  0835               	movf	??___ftadd,w
  4551  01C6  00BC               	movwf	___ftadd@sign
  4552  01C7  1BB1               	btfsc	___ftadd@f1+2,7
  4553  01C8  17BC               	bsf	___ftadd@sign,7
  4554  01C9  1BB4               	btfsc	___ftadd@f2+2,7
  4555  01CA  173C               	bsf	___ftadd@sign,6
  4556  01CB  17B0               	bsf	___ftadd@f1+1,7
  4557  01CC  30FF               	movlw	255
  4558  01CD  05AF               	andwf	___ftadd@f1,f
  4559  01CE  30FF               	movlw	255
  4560  01CF  05B0               	andwf	___ftadd@f1+1,f
  4561  01D0  3000               	movlw	0
  4562  01D1  05B1               	andwf	___ftadd@f1+2,f
  4563  01D2  17B3               	bsf	___ftadd@f2+1,7
  4564  01D3  30FF               	movlw	255
  4565  01D4  05B2               	andwf	___ftadd@f2,f
  4566  01D5  30FF               	movlw	255
  4567  01D6  05B3               	andwf	___ftadd@f2+1,f
  4568  01D7  3000               	movlw	0
  4569  01D8  05B4               	andwf	___ftadd@f2+2,f
  4570  01D9  083D               	movf	___ftadd@exp2,w
  4571  01DA  023E               	subwf	___ftadd@exp1,w
  4572  01DB  1803               	skipnc
  4573  01DC  2A03               	goto	l4348
  4574  01DD                     l4338:	
  4575  01DD  3001               	movlw	1
  4576  01DE                     u3965:	
  4577  01DE  1003               	clrc
  4578  01DF  0DB2               	rlf	___ftadd@f2,f
  4579  01E0  0DB3               	rlf	___ftadd@f2+1,f
  4580  01E1  0DB4               	rlf	___ftadd@f2+2,f
  4581  01E2  3EFF               	addlw	-1
  4582  01E3  1D03               	skipz
  4583  01E4  29DE               	goto	u3965
  4584  01E5  3001               	movlw	1
  4585  01E6  02BD               	subwf	___ftadd@exp2,f
  4586  01E7  083D               	movf	___ftadd@exp2,w
  4587  01E8  063E               	xorwf	___ftadd@exp1,w
  4588  01E9  1903               	skipnz
  4589  01EA  29FE               	goto	l4346
  4590  01EB  3001               	movlw	1
  4591  01EC  02BC               	subwf	___ftadd@sign,f
  4592  01ED  083C               	movf	___ftadd@sign,w
  4593  01EE  3907               	andlw	7
  4594  01EF  1903               	btfsc	3,2
  4595  01F0  29FE               	goto	l4346
  4596  01F1  29DD               	goto	l4338
  4597  01F2                     l4344:	
  4598  01F2  3001               	movlw	1
  4599  01F3                     u3995:	
  4600  01F3  1003               	clrc
  4601  01F4  0CB1               	rrf	___ftadd@f1+2,f
  4602  01F5  0CB0               	rrf	___ftadd@f1+1,f
  4603  01F6  0CAF               	rrf	___ftadd@f1,f
  4604  01F7  3EFF               	addlw	-1
  4605  01F8  1D03               	skipz
  4606  01F9  29F3               	goto	u3995
  4607  01FA  3001               	movlw	1
  4608  01FB  00B5               	movwf	??___ftadd
  4609  01FC  0835               	movf	??___ftadd,w
  4610  01FD  07BE               	addwf	___ftadd@exp1,f
  4611  01FE                     l4346:	
  4612  01FE  083E               	movf	___ftadd@exp1,w
  4613  01FF  063D               	xorwf	___ftadd@exp2,w
  4614  0200  1903               	btfsc	3,2
  4615  0201  2A2C               	goto	l720
  4616  0202  29F2               	goto	l4344
  4617  0203                     l4348:	
  4618  0203  083E               	movf	___ftadd@exp1,w
  4619  0204  023D               	subwf	___ftadd@exp2,w
  4620  0205  1803               	skipnc
  4621  0206  2A2C               	goto	l720
  4622  0207                     l4350:	
  4623  0207  3001               	movlw	1
  4624  0208                     u4025:	
  4625  0208  1003               	clrc
  4626  0209  0DAF               	rlf	___ftadd@f1,f
  4627  020A  0DB0               	rlf	___ftadd@f1+1,f
  4628  020B  0DB1               	rlf	___ftadd@f1+2,f
  4629  020C  3EFF               	addlw	-1
  4630  020D  1D03               	skipz
  4631  020E  2A08               	goto	u4025
  4632  020F  3001               	movlw	1
  4633  0210  02BE               	subwf	___ftadd@exp1,f
  4634  0211  083D               	movf	___ftadd@exp2,w
  4635  0212  063E               	xorwf	___ftadd@exp1,w
  4636  0213  1903               	skipnz
  4637  0214  2A28               	goto	l4358
  4638  0215  3001               	movlw	1
  4639  0216  02BC               	subwf	___ftadd@sign,f
  4640  0217  083C               	movf	___ftadd@sign,w
  4641  0218  3907               	andlw	7
  4642  0219  1903               	btfsc	3,2
  4643  021A  2A28               	goto	l4358
  4644  021B  2A07               	goto	l4350
  4645  021C                     l4356:	
  4646  021C  3001               	movlw	1
  4647  021D                     u4055:	
  4648  021D  1003               	clrc
  4649  021E  0CB4               	rrf	___ftadd@f2+2,f
  4650  021F  0CB3               	rrf	___ftadd@f2+1,f
  4651  0220  0CB2               	rrf	___ftadd@f2,f
  4652  0221  3EFF               	addlw	-1
  4653  0222  1D03               	skipz
  4654  0223  2A1D               	goto	u4055
  4655  0224  3001               	movlw	1
  4656  0225  00B5               	movwf	??___ftadd
  4657  0226  0835               	movf	??___ftadd,w
  4658  0227  07BD               	addwf	___ftadd@exp2,f
  4659  0228                     l4358:	
  4660  0228  083E               	movf	___ftadd@exp1,w
  4661  0229  063D               	xorwf	___ftadd@exp2,w
  4662  022A  1D03               	skipz
  4663  022B  2A1C               	goto	l4356
  4664  022C                     l720:	
  4665  022C  1FBC               	btfss	___ftadd@sign,7
  4666  022D  2A3E               	goto	l4362
  4667  022E  30FF               	movlw	255
  4668  022F  06AF               	xorwf	___ftadd@f1,f
  4669  0230  30FF               	movlw	255
  4670  0231  06B0               	xorwf	___ftadd@f1+1,f
  4671  0232  30FF               	movlw	255
  4672  0233  06B1               	xorwf	___ftadd@f1+2,f
  4673  0234  3001               	movlw	1
  4674  0235  07AF               	addwf	___ftadd@f1,f
  4675  0236  3000               	movlw	0
  4676  0237  1803               	skipnc
  4677  0238  3001               	movlw	1
  4678  0239  07B0               	addwf	___ftadd@f1+1,f
  4679  023A  3000               	movlw	0
  4680  023B  1803               	skipnc
  4681  023C  3001               	movlw	1
  4682  023D  07B1               	addwf	___ftadd@f1+2,f
  4683  023E                     l4362:	
  4684  023E  1F3C               	btfss	___ftadd@sign,6
  4685  023F  2A50               	goto	l4366
  4686  0240  30FF               	movlw	255
  4687  0241  06B2               	xorwf	___ftadd@f2,f
  4688  0242  30FF               	movlw	255
  4689  0243  06B3               	xorwf	___ftadd@f2+1,f
  4690  0244  30FF               	movlw	255
  4691  0245  06B4               	xorwf	___ftadd@f2+2,f
  4692  0246  3001               	movlw	1
  4693  0247  07B2               	addwf	___ftadd@f2,f
  4694  0248  3000               	movlw	0
  4695  0249  1803               	skipnc
  4696  024A  3001               	movlw	1
  4697  024B  07B3               	addwf	___ftadd@f2+1,f
  4698  024C  3000               	movlw	0
  4699  024D  1803               	skipnc
  4700  024E  3001               	movlw	1
  4701  024F  07B4               	addwf	___ftadd@f2+2,f
  4702  0250                     l4366:	
  4703  0250  01BC               	clrf	___ftadd@sign
  4704  0251  082F               	movf	___ftadd@f1,w
  4705  0252  07B2               	addwf	___ftadd@f2,f
  4706  0253  0830               	movf	___ftadd@f1+1,w
  4707  0254  1103               	clrz
  4708  0255  1803               	skipnc
  4709  0256  0A30               	incf	___ftadd@f1+1,w
  4710  0257  1D03               	btfss	3,2
  4711  0258  07B3               	addwf	___ftadd@f2+1,f
  4712  0259  0831               	movf	___ftadd@f1+2,w
  4713  025A  1103               	clrz
  4714  025B  1803               	skipnc
  4715  025C  0A31               	incf	___ftadd@f1+2,w
  4716  025D  1D03               	btfss	3,2
  4717  025E  07B4               	addwf	___ftadd@f2+2,f
  4718  025F  1FB4               	btfss	___ftadd@f2+2,7
  4719  0260  2A73               	goto	l4376
  4720  0261  30FF               	movlw	255
  4721  0262  06B2               	xorwf	___ftadd@f2,f
  4722  0263  30FF               	movlw	255
  4723  0264  06B3               	xorwf	___ftadd@f2+1,f
  4724  0265  30FF               	movlw	255
  4725  0266  06B4               	xorwf	___ftadd@f2+2,f
  4726  0267  3001               	movlw	1
  4727  0268  07B2               	addwf	___ftadd@f2,f
  4728  0269  3000               	movlw	0
  4729  026A  1803               	skipnc
  4730  026B  3001               	movlw	1
  4731  026C  07B3               	addwf	___ftadd@f2+1,f
  4732  026D  3000               	movlw	0
  4733  026E  1803               	skipnc
  4734  026F  3001               	movlw	1
  4735  0270  07B4               	addwf	___ftadd@f2+2,f
  4736  0271  01BC               	clrf	___ftadd@sign
  4737  0272  0ABC               	incf	___ftadd@sign,f
  4738  0273                     l4376:	
  4739  0273  0832               	movf	___ftadd@f2,w
  4740  0274  00A0               	movwf	___ftpack@arg
  4741  0275  0833               	movf	___ftadd@f2+1,w
  4742  0276  00A1               	movwf	___ftpack@arg+1
  4743  0277  0834               	movf	___ftadd@f2+2,w
  4744  0278  00A2               	movwf	___ftpack@arg+2
  4745  0279  083E               	movf	___ftadd@exp1,w
  4746  027A  00B5               	movwf	??___ftadd
  4747  027B  0835               	movf	??___ftadd,w
  4748  027C  00A3               	movwf	___ftpack@exp
  4749  027D  083C               	movf	___ftadd@sign,w
  4750  027E  00B6               	movwf	??___ftadd+1
  4751  027F  0836               	movf	??___ftadd+1,w
  4752  0280  00A4               	movwf	___ftpack@sign
  4753  0281  120A  158A  247A   	fcall	___ftpack
  4754  0284  1283               	bcf	3,5	;RP0=0, select bank0
  4755  0285  1303               	bcf	3,6	;RP1=0, select bank0
  4756  0286  0820               	movf	?___ftpack,w
  4757  0287  00AF               	movwf	?___ftadd
  4758  0288  0821               	movf	?___ftpack+1,w
  4759  0289  00B0               	movwf	?___ftadd+1
  4760  028A  0822               	movf	?___ftpack+2,w
  4761  028B  00B1               	movwf	?___ftadd+2
  4762  028C  0008               	return
  4763  028D                     __end_of___ftadd:	
  4764                           
  4765                           	psect	text26
  4766  08CE                     __ptext26:	
  4767 ;; *************** function _print_signal_level *****************
  4768 ;; Defined at:
  4769 ;;		line 122 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\main.c"
  4770 ;; Parameters:    Size  Location     Type
  4771 ;;		None
  4772 ;; Auto vars:     Size  Location     Type
  4773 ;;  lvl             2   35[BANK0 ] int 
  4774 ;; Return value:  Size  Location     Type
  4775 ;;		None               void
  4776 ;; Registers used:
  4777 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4778 ;; Tracked objects:
  4779 ;;		On entry : 0/0
  4780 ;;		On exit  : 0/0
  4781 ;;		Unchanged: 0/0
  4782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4783 ;;      Params:         0       0       0       0       0
  4784 ;;      Locals:         0       2       0       0       0
  4785 ;;      Temps:          0       2       0       0       0
  4786 ;;      Totals:         0       4       0       0       0
  4787 ;;Total ram usage:        4 bytes
  4788 ;; Hardware stack levels used:    1
  4789 ;; Hardware stack levels required when called:    6
  4790 ;; This function calls:
  4791 ;;		_hd44780_block_erase
  4792 ;;		_hd44780_printint
  4793 ;;		_tea5767_signal_level
  4794 ;; This function is called by:
  4795 ;;		_main
  4796 ;; This function uses a non-reentrant model
  4797 ;;
  4798                           
  4799                           
  4800                           ;psect for function _print_signal_level
  4801  08CE                     _print_signal_level:	
  4802                           
  4803                           ;main.c: 124: static uint8_t prev_lvl = 0;
  4804                           ;main.c: 126: int lvl = tea5767_signal_level();
  4805                           
  4806                           ;incstack = 0
  4807                           ; Regs used in _print_signal_level: [allreg]
  4808  08CE  160A  118A  2660   	fcall	_tea5767_signal_level
      +       120A  158A         
  4809  08D3  1283               	bcf	3,5	;RP0=0, select bank0
  4810  08D4  1303               	bcf	3,6	;RP1=0, select bank0
  4811  08D5  00C1               	movwf	??_print_signal_level
  4812  08D6  01C2               	clrf	??_print_signal_level+1
  4813  08D7  0841               	movf	??_print_signal_level,w
  4814  08D8  00C3               	movwf	print_signal_level@lvl
  4815  08D9  0842               	movf	??_print_signal_level+1,w
  4816  08DA  00C4               	movwf	print_signal_level@lvl+1
  4817                           
  4818                           ;main.c: 128: if( prev_lvl != lvl ){
  4819  08DB  0878               	movf	print_signal_level@prev_lvl,w
  4820  08DC  00C1               	movwf	??_print_signal_level
  4821  08DD  01C2               	clrf	??_print_signal_level+1
  4822  08DE  0844               	movf	print_signal_level@lvl+1,w
  4823  08DF  0642               	xorwf	??_print_signal_level+1,w
  4824  08E0  1D03               	skipz
  4825  08E1  28E4               	goto	u3275
  4826  08E2  0843               	movf	print_signal_level@lvl,w
  4827  08E3  0641               	xorwf	??_print_signal_level,w
  4828  08E4                     u3275:	
  4829  08E4  1903               	skipnz
  4830  08E5  0008               	return
  4831                           
  4832                           ;main.c: 129: hd44780_block_erase( 14, 3 );
  4833  08E6  3003               	movlw	3
  4834  08E7  00C1               	movwf	??_print_signal_level
  4835  08E8  0841               	movf	??_print_signal_level,w
  4836  08E9  00A3               	movwf	hd44780_block_erase@length
  4837  08EA  300E               	movlw	14
  4838  08EB  160A  118A  27AA   	fcall	_hd44780_block_erase
      +       120A  158A         
  4839                           
  4840                           ;main.c: 130: hd44780_printint( lvl, 14 );
  4841  08F0  1283               	bcf	3,5	;RP0=0, select bank0
  4842  08F1  1303               	bcf	3,6	;RP1=0, select bank0
  4843  08F2  0844               	movf	print_signal_level@lvl+1,w
  4844  08F3  01BE               	clrf	hd44780_printint@dta+1
  4845  08F4  07BE               	addwf	hd44780_printint@dta+1,f
  4846  08F5  0843               	movf	print_signal_level@lvl,w
  4847  08F6  01BD               	clrf	hd44780_printint@dta
  4848  08F7  07BD               	addwf	hd44780_printint@dta,f
  4849  08F8  300E               	movlw	14
  4850  08F9  00C1               	movwf	??_print_signal_level
  4851  08FA  0841               	movf	??_print_signal_level,w
  4852  08FB  00BF               	movwf	hd44780_printint@loc
  4853  08FC  160A  118A  26D5   	fcall	_hd44780_printint
  4854                           
  4855                           ;main.c: 131: prev_lvl = lvl;
  4856  08FF  1283               	bcf	3,5	;RP0=0, select bank0
  4857  0900  1303               	bcf	3,6	;RP1=0, select bank0
  4858  0901  0843               	movf	print_signal_level@lvl,w
  4859  0902  00C1               	movwf	??_print_signal_level
  4860  0903  0841               	movf	??_print_signal_level,w
  4861  0904  00F8               	movwf	print_signal_level@prev_lvl
  4862  0905  0008               	return
  4863  0906                     __end_of_print_signal_level:	
  4864                           
  4865                           	psect	text27
  4866  1660                     __ptext27:	
  4867 ;; *************** function _tea5767_signal_level *****************
  4868 ;; Defined at:
  4869 ;;		line 110 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\tea5767.c"
  4870 ;; Parameters:    Size  Location     Type
  4871 ;;		None
  4872 ;; Auto vars:     Size  Location     Type
  4873 ;;		None
  4874 ;; Return value:  Size  Location     Type
  4875 ;;                  1    wreg      unsigned char 
  4876 ;; Registers used:
  4877 ;;		wreg, status,2, status,0
  4878 ;; Tracked objects:
  4879 ;;		On entry : 0/0
  4880 ;;		On exit  : 0/0
  4881 ;;		Unchanged: 0/0
  4882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4883 ;;      Params:         0       0       0       0       0
  4884 ;;      Locals:         0       0       0       0       0
  4885 ;;      Temps:          1       0       0       0       0
  4886 ;;      Totals:         1       0       0       0       0
  4887 ;;Total ram usage:        1 bytes
  4888 ;; Hardware stack levels used:    1
  4889 ;; Hardware stack levels required when called:    1
  4890 ;; This function calls:
  4891 ;;		Nothing
  4892 ;; This function is called by:
  4893 ;;		_print_signal_level
  4894 ;; This function uses a non-reentrant model
  4895 ;;
  4896                           
  4897                           
  4898                           ;psect for function _tea5767_signal_level
  4899  1660                     _tea5767_signal_level:	
  4900                           
  4901                           ;tea5767.c: 112: return ((responsebytes[3] >> 4) & 0x0F);
  4902                           
  4903                           ;incstack = 0
  4904                           ; Regs used in _tea5767_signal_level: [wreg+status,2+status,0]
  4905  1660  1683               	bsf	3,5	;RP0=1, select bank1
  4906  1661  1303               	bcf	3,6	;RP1=0, select bank1
  4907  1662  0862               	movf	(tea5767@responsebytes^(0+128)+3),w
  4908  1663  00F4               	movwf	??_tea5767_signal_level
  4909  1664  3004               	movlw	4
  4910  1665                     u1725:	
  4911  1665  1003               	clrc
  4912  1666  0CF4               	rrf	??_tea5767_signal_level,f
  4913  1667  3EFF               	addlw	-1
  4914  1668  1D03               	skipz
  4915  1669  2E65               	goto	u1725
  4916  166A  0874               	movf	??_tea5767_signal_level,w
  4917  166B  390F               	andlw	15
  4918  166C  0008               	return
  4919  166D                     __end_of_tea5767_signal_level:	
  4920                           
  4921                           	psect	text28
  4922  16D5                     __ptext28:	
  4923 ;; *************** function _hd44780_printint *****************
  4924 ;; Defined at:
  4925 ;;		line 161 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\hd44780.c"
  4926 ;; Parameters:    Size  Location     Type
  4927 ;;  dta             2   29[BANK0 ] int 
  4928 ;;  loc             1   31[BANK0 ] unsigned char 
  4929 ;; Auto vars:     Size  Location     Type
  4930 ;;		None
  4931 ;; Return value:  Size  Location     Type
  4932 ;;		None               void
  4933 ;; Registers used:
  4934 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4935 ;; Tracked objects:
  4936 ;;		On entry : 0/0
  4937 ;;		On exit  : 0/0
  4938 ;;		Unchanged: 0/0
  4939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4940 ;;      Params:         0       3       0       0       0
  4941 ;;      Locals:         0       0       0       0       0
  4942 ;;      Temps:          0       1       0       0       0
  4943 ;;      Totals:         0       4       0       0       0
  4944 ;;Total ram usage:        4 bytes
  4945 ;; Hardware stack levels used:    1
  4946 ;; Hardware stack levels required when called:    5
  4947 ;; This function calls:
  4948 ;;		_hd44780_printstr
  4949 ;;		_sprintf
  4950 ;; This function is called by:
  4951 ;;		_print_signal_level
  4952 ;; This function uses a non-reentrant model
  4953 ;;
  4954                           
  4955                           
  4956                           ;psect for function _hd44780_printint
  4957  16D5                     _hd44780_printint:	
  4958                           
  4959                           ;hd44780.c: 169: sprintf(buff, "%d", dta);
  4960                           
  4961                           ;incstack = 0
  4962                           ; Regs used in _hd44780_printint: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4963  16D5  3077               	movlw	((STR_9+3)-__stringbase)& (0+255)
  4964  16D6  1283               	bcf	3,5	;RP0=0, select bank0
  4965  16D7  1303               	bcf	3,6	;RP1=0, select bank0
  4966  16D8  00C0               	movwf	??_hd44780_printint
  4967  16D9  0840               	movf	??_hd44780_printint,w
  4968  16DA  00AC               	movwf	sprintf@f
  4969  16DB  083E               	movf	hd44780_printint@dta+1,w
  4970  16DC  01AE               	clrf	?_sprintf+2
  4971  16DD  07AE               	addwf	?_sprintf+2,f
  4972  16DE  083D               	movf	hd44780_printint@dta,w
  4973  16DF  01AD               	clrf	?_sprintf+1
  4974  16E0  07AD               	addwf	?_sprintf+1,f
  4975  16E1  30E8               	movlw	_buff& (0+255)
  4976  16E2  120A  118A  2472   	fcall	_sprintf
      +       160A  118A         
  4977                           
  4978                           ;hd44780.c: 171: hd44780_printstr( &buff, loc );
  4979  16E7  30E8               	movlw	_buff& (0+255)
  4980  16E8  1283               	bcf	3,5	;RP0=0, select bank0
  4981  16E9  1303               	bcf	3,6	;RP1=0, select bank0
  4982  16EA  00A3               	movwf	hd44780_printstr@dta
  4983  16EB  3000               	movlw	0
  4984  16EC  00A4               	movwf	hd44780_printstr@dta+1
  4985  16ED  083F               	movf	hd44780_printint@loc,w
  4986  16EE  00C0               	movwf	??_hd44780_printint
  4987  16EF  0840               	movf	??_hd44780_printint,w
  4988  16F0  00A5               	movwf	hd44780_printstr@loc
  4989  16F1  120A  158A  2235   	fcall	_hd44780_printstr
  4990  16F4  0008               	return
  4991  16F5                     __end_of_hd44780_printint:	
  4992                           
  4993                           	psect	text29
  4994  1784                     __ptext29:	
  4995 ;; *************** function _print_mode *****************
  4996 ;; Defined at:
  4997 ;;		line 135 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\main.c"
  4998 ;; Parameters:    Size  Location     Type
  4999 ;;		None
  5000 ;; Auto vars:     Size  Location     Type
  5001 ;;  mode            2    8[BANK0 ] int 
  5002 ;; Return value:  Size  Location     Type
  5003 ;;		None               void
  5004 ;; Registers used:
  5005 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5006 ;; Tracked objects:
  5007 ;;		On entry : 0/0
  5008 ;;		On exit  : 0/0
  5009 ;;		Unchanged: 0/0
  5010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5011 ;;      Params:         0       0       0       0       0
  5012 ;;      Locals:         0       2       0       0       0
  5013 ;;      Temps:          0       2       0       0       0
  5014 ;;      Totals:         0       4       0       0       0
  5015 ;;Total ram usage:        4 bytes
  5016 ;; Hardware stack levels used:    1
  5017 ;; Hardware stack levels required when called:    5
  5018 ;; This function calls:
  5019 ;;		_hd44780_printstr
  5020 ;;		_tea5767_mode
  5021 ;; This function is called by:
  5022 ;;		_main
  5023 ;; This function uses a non-reentrant model
  5024 ;;
  5025                           
  5026                           
  5027                           ;psect for function _print_mode
  5028  1784                     _print_mode:	
  5029                           
  5030                           ;main.c: 137: int mode = tea5767_mode();
  5031                           
  5032                           ;incstack = 0
  5033                           ; Regs used in _print_mode: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5034  1784  160A  118A  2603   	fcall	_tea5767_mode
      +       160A  118A         
  5035  1789  1283               	bcf	3,5	;RP0=0, select bank0
  5036  178A  1303               	bcf	3,6	;RP1=0, select bank0
  5037  178B  00A6               	movwf	??_print_mode
  5038  178C  01A7               	clrf	??_print_mode+1
  5039  178D  0826               	movf	??_print_mode,w
  5040  178E  00A8               	movwf	print_mode@mode
  5041  178F  0827               	movf	??_print_mode+1,w
  5042  1790  00A9               	movwf	print_mode@mode+1
  5043                           
  5044                           ;main.c: 139: if( mode == 1 ){
  5045  1791  3001               	movlw	1
  5046  1792  0628               	xorwf	print_mode@mode,w
  5047  1793  0429               	iorwf	print_mode@mode+1,w
  5048  1794  1D03               	skipz
  5049  1795  2F9F               	goto	l3828
  5050                           
  5051                           ;main.c: 141: hd44780_printstr( "S", 0 );
  5052  1796  307C               	movlw	low (STR_1-__stringbase)
  5053  1797  00A3               	movwf	hd44780_printstr@dta
  5054  1798  3080               	movlw	128
  5055  1799  00A4               	movwf	hd44780_printstr@dta+1
  5056  179A  01A5               	clrf	hd44780_printstr@loc
  5057  179B  120A  158A  2235   	fcall	_hd44780_printstr
  5058                           
  5059                           ;main.c: 142: }else{
  5060  179E  0008               	return
  5061  179F                     l3828:	
  5062                           
  5063                           ;main.c: 143: hd44780_printstr( "M", 0 );
  5064  179F  307A               	movlw	low (STR_2-__stringbase)
  5065  17A0  1283               	bcf	3,5	;RP0=0, select bank0
  5066  17A1  1303               	bcf	3,6	;RP1=0, select bank0
  5067  17A2  00A3               	movwf	hd44780_printstr@dta
  5068  17A3  3080               	movlw	128
  5069  17A4  00A4               	movwf	hd44780_printstr@dta+1
  5070  17A5  01A5               	clrf	hd44780_printstr@loc
  5071  17A6  120A  158A  2235   	fcall	_hd44780_printstr
  5072  17A9  0008               	return
  5073  17AA                     __end_of_print_mode:	
  5074                           
  5075                           	psect	text30
  5076  1603                     __ptext30:	
  5077 ;; *************** function _tea5767_mode *****************
  5078 ;; Defined at:
  5079 ;;		line 116 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\tea5767.c"
  5080 ;; Parameters:    Size  Location     Type
  5081 ;;		None
  5082 ;; Auto vars:     Size  Location     Type
  5083 ;;		None
  5084 ;; Return value:  Size  Location     Type
  5085 ;;                  1    wreg      unsigned char 
  5086 ;; Registers used:
  5087 ;;		wreg
  5088 ;; Tracked objects:
  5089 ;;		On entry : 0/0
  5090 ;;		On exit  : 0/0
  5091 ;;		Unchanged: 0/0
  5092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5093 ;;      Params:         0       0       0       0       0
  5094 ;;      Locals:         0       0       0       0       0
  5095 ;;      Temps:          0       0       0       0       0
  5096 ;;      Totals:         0       0       0       0       0
  5097 ;;Total ram usage:        0 bytes
  5098 ;; Hardware stack levels used:    1
  5099 ;; Hardware stack levels required when called:    1
  5100 ;; This function calls:
  5101 ;;		Nothing
  5102 ;; This function is called by:
  5103 ;;		_print_mode
  5104 ;; This function uses a non-reentrant model
  5105 ;;
  5106                           
  5107                           
  5108                           ;psect for function _tea5767_mode
  5109  1603                     _tea5767_mode:	
  5110                           
  5111                           ;tea5767.c: 119: return ((responsebytes[2] & 0x80) > 0) ? 1 : 0;
  5112                           
  5113                           ;incstack = 0
  5114                           ; Regs used in _tea5767_mode: [wreg]
  5115  1603  3000               	movlw	0
  5116  1604  1683               	bsf	3,5	;RP0=1, select bank1
  5117  1605  1303               	bcf	3,6	;RP1=0, select bank1
  5118  1606  1BE1               	btfsc	(tea5767@responsebytes^(0+128)+2),7
  5119  1607  3001               	movlw	1
  5120  1608  0008               	return
  5121  1609                     __end_of_tea5767_mode:	
  5122                           
  5123                           	psect	text31
  5124  054D                     __ptext31:	
  5125 ;; *************** function _print_freq *****************
  5126 ;; Defined at:
  5127 ;;		line 104 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\main.c"
  5128 ;; Parameters:    Size  Location     Type
  5129 ;;		None
  5130 ;; Auto vars:     Size  Location     Type
  5131 ;;  i               2   52[BANK1 ] int 
  5132 ;;  f               2   50[BANK1 ] int 
  5133 ;;  fr              2   48[BANK1 ] int 
  5134 ;; Return value:  Size  Location     Type
  5135 ;;		None               void
  5136 ;; Registers used:
  5137 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5138 ;; Tracked objects:
  5139 ;;		On entry : 0/0
  5140 ;;		On exit  : 0/0
  5141 ;;		Unchanged: 0/0
  5142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5143 ;;      Params:         0       0       0       0       0
  5144 ;;      Locals:         0       0       6       0       0
  5145 ;;      Temps:          0       0       2       0       0
  5146 ;;      Totals:         0       0       8       0       0
  5147 ;;Total ram usage:        8 bytes
  5148 ;; Hardware stack levels used:    1
  5149 ;; Hardware stack levels required when called:    6
  5150 ;; This function calls:
  5151 ;;		___awdiv
  5152 ;;		___wmul
  5153 ;;		_hd44780_block_erase
  5154 ;;		_hd44780_printdecimal
  5155 ;;		_tea5767_tuned_freq
  5156 ;; This function is called by:
  5157 ;;		_main
  5158 ;; This function uses a non-reentrant model
  5159 ;;
  5160                           
  5161                           
  5162                           ;psect for function _print_freq
  5163  054D                     _print_freq:	
  5164                           
  5165                           ;main.c: 106: static uint8_t dec = 0;
  5166                           ;main.c: 108: int fr = tea5767_tuned_freq();
  5167                           
  5168                           ;incstack = 0
  5169                           ; Regs used in _print_freq: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5170  054D  120A  118A  26F5   	fcall	_tea5767_tuned_freq
      +       120A  118A         
  5171  0552  1683               	bsf	3,5	;RP0=1, select bank1
  5172  0553  1303               	bcf	3,6	;RP1=0, select bank1
  5173  0554  0843               	movf	(?_tea5767_tuned_freq+1)^(0+128),w
  5174  0555  01D1               	clrf	(print_freq@fr+1)^(0+128)
  5175  0556  07D1               	addwf	(print_freq@fr+1)^(0+128),f
  5176  0557  0842               	movf	?_tea5767_tuned_freq^(0+128),w
  5177  0558  01D0               	clrf	print_freq@fr^(0+128)
  5178  0559  07D0               	addwf	print_freq@fr^(0+128),f
  5179                           
  5180                           ;main.c: 109: int i = fr / 10;
  5181  055A  300A               	movlw	10
  5182  055B  1283               	bcf	3,5	;RP0=0, select bank0
  5183  055C  1303               	bcf	3,6	;RP1=0, select bank0
  5184  055D  00A0               	movwf	___awdiv@divisor
  5185  055E  3000               	movlw	0
  5186  055F  00A1               	movwf	___awdiv@divisor+1
  5187  0560  1683               	bsf	3,5	;RP0=1, select bank1
  5188  0561  1303               	bcf	3,6	;RP1=0, select bank1
  5189  0562  0851               	movf	(print_freq@fr+1)^(0+128),w
  5190  0563  1283               	bcf	3,5	;RP0=0, select bank0
  5191  0564  1303               	bcf	3,6	;RP1=0, select bank0
  5192  0565  01A3               	clrf	___awdiv@dividend+1
  5193  0566  07A3               	addwf	___awdiv@dividend+1,f
  5194  0567  1683               	bsf	3,5	;RP0=1, select bank1
  5195  0568  1303               	bcf	3,6	;RP1=0, select bank1
  5196  0569  0850               	movf	print_freq@fr^(0+128),w
  5197  056A  1283               	bcf	3,5	;RP0=0, select bank0
  5198  056B  1303               	bcf	3,6	;RP1=0, select bank0
  5199  056C  01A2               	clrf	___awdiv@dividend
  5200  056D  07A2               	addwf	___awdiv@dividend,f
  5201  056E  120A  158A  22F7   	fcall	___awdiv
      +       120A  118A         
  5202  0573  1283               	bcf	3,5	;RP0=0, select bank0
  5203  0574  1303               	bcf	3,6	;RP1=0, select bank0
  5204  0575  0821               	movf	?___awdiv+1,w
  5205  0576  1683               	bsf	3,5	;RP0=1, select bank1
  5206  0577  1303               	bcf	3,6	;RP1=0, select bank1
  5207  0578  01D5               	clrf	(print_freq@i+1)^(0+128)
  5208  0579  07D5               	addwf	(print_freq@i+1)^(0+128),f
  5209  057A  1283               	bcf	3,5	;RP0=0, select bank0
  5210  057B  1303               	bcf	3,6	;RP1=0, select bank0
  5211  057C  0820               	movf	?___awdiv,w
  5212  057D  1683               	bsf	3,5	;RP0=1, select bank1
  5213  057E  1303               	bcf	3,6	;RP1=0, select bank1
  5214  057F  01D4               	clrf	print_freq@i^(0+128)
  5215  0580  07D4               	addwf	print_freq@i^(0+128),f
  5216                           
  5217                           ;main.c: 110: i = i * 10;
  5218  0581  0855               	movf	(print_freq@i+1)^(0+128),w
  5219  0582  1283               	bcf	3,5	;RP0=0, select bank0
  5220  0583  1303               	bcf	3,6	;RP1=0, select bank0
  5221  0584  01A1               	clrf	___wmul@multiplier+1
  5222  0585  07A1               	addwf	___wmul@multiplier+1,f
  5223  0586  1683               	bsf	3,5	;RP0=1, select bank1
  5224  0587  1303               	bcf	3,6	;RP1=0, select bank1
  5225  0588  0854               	movf	print_freq@i^(0+128),w
  5226  0589  1283               	bcf	3,5	;RP0=0, select bank0
  5227  058A  1303               	bcf	3,6	;RP1=0, select bank0
  5228  058B  01A0               	clrf	___wmul@multiplier
  5229  058C  07A0               	addwf	___wmul@multiplier,f
  5230  058D  300A               	movlw	10
  5231  058E  00A2               	movwf	___wmul@multiplicand
  5232  058F  3000               	movlw	0
  5233  0590  00A3               	movwf	___wmul@multiplicand+1
  5234  0591  160A  118A  273A   	fcall	___wmul
      +       120A  118A         
  5235  0596  1283               	bcf	3,5	;RP0=0, select bank0
  5236  0597  1303               	bcf	3,6	;RP1=0, select bank0
  5237  0598  0821               	movf	?___wmul+1,w
  5238  0599  1683               	bsf	3,5	;RP0=1, select bank1
  5239  059A  1303               	bcf	3,6	;RP1=0, select bank1
  5240  059B  01D5               	clrf	(print_freq@i+1)^(0+128)
  5241  059C  07D5               	addwf	(print_freq@i+1)^(0+128),f
  5242  059D  1283               	bcf	3,5	;RP0=0, select bank0
  5243  059E  1303               	bcf	3,6	;RP1=0, select bank0
  5244  059F  0820               	movf	?___wmul,w
  5245  05A0  1683               	bsf	3,5	;RP0=1, select bank1
  5246  05A1  1303               	bcf	3,6	;RP1=0, select bank1
  5247  05A2  01D4               	clrf	print_freq@i^(0+128)
  5248  05A3  07D4               	addwf	print_freq@i^(0+128),f
  5249                           
  5250                           ;main.c: 111: int f = fr - i;
  5251  05A4  0954               	comf	print_freq@i^(0+128),w
  5252  05A5  00CE               	movwf	??_print_freq^(0+128)
  5253  05A6  0955               	comf	(print_freq@i+1)^(0+128),w
  5254  05A7  00CF               	movwf	(??_print_freq^(0+128)+1)
  5255  05A8  0ACE               	incf	??_print_freq^(0+128),f
  5256  05A9  1903               	skipnz
  5257  05AA  0ACF               	incf	(??_print_freq^(0+128)+1),f
  5258  05AB  0850               	movf	print_freq@fr^(0+128),w
  5259  05AC  074E               	addwf	??_print_freq^(0+128),w
  5260  05AD  00D2               	movwf	print_freq@f^(0+128)
  5261  05AE  0851               	movf	(print_freq@fr+1)^(0+128),w
  5262  05AF  1803               	skipnc
  5263  05B0  0A51               	incf	(print_freq@fr+1)^(0+128),w
  5264  05B1  074F               	addwf	(??_print_freq+1)^(0+128),w
  5265  05B2  00D3               	movwf	(print_freq@f+1)^(0+128)
  5266                           
  5267                           ;main.c: 112: i = i / 10;
  5268  05B3  300A               	movlw	10
  5269  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  5270  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  5271  05B6  00A0               	movwf	___awdiv@divisor
  5272  05B7  3000               	movlw	0
  5273  05B8  00A1               	movwf	___awdiv@divisor+1
  5274  05B9  1683               	bsf	3,5	;RP0=1, select bank1
  5275  05BA  1303               	bcf	3,6	;RP1=0, select bank1
  5276  05BB  0855               	movf	(print_freq@i+1)^(0+128),w
  5277  05BC  1283               	bcf	3,5	;RP0=0, select bank0
  5278  05BD  1303               	bcf	3,6	;RP1=0, select bank0
  5279  05BE  01A3               	clrf	___awdiv@dividend+1
  5280  05BF  07A3               	addwf	___awdiv@dividend+1,f
  5281  05C0  1683               	bsf	3,5	;RP0=1, select bank1
  5282  05C1  1303               	bcf	3,6	;RP1=0, select bank1
  5283  05C2  0854               	movf	print_freq@i^(0+128),w
  5284  05C3  1283               	bcf	3,5	;RP0=0, select bank0
  5285  05C4  1303               	bcf	3,6	;RP1=0, select bank0
  5286  05C5  01A2               	clrf	___awdiv@dividend
  5287  05C6  07A2               	addwf	___awdiv@dividend,f
  5288  05C7  120A  158A  22F7   	fcall	___awdiv
      +       120A  118A         
  5289  05CC  1283               	bcf	3,5	;RP0=0, select bank0
  5290  05CD  1303               	bcf	3,6	;RP1=0, select bank0
  5291  05CE  0821               	movf	?___awdiv+1,w
  5292  05CF  1683               	bsf	3,5	;RP0=1, select bank1
  5293  05D0  1303               	bcf	3,6	;RP1=0, select bank1
  5294  05D1  01D5               	clrf	(print_freq@i+1)^(0+128)
  5295  05D2  07D5               	addwf	(print_freq@i+1)^(0+128),f
  5296  05D3  1283               	bcf	3,5	;RP0=0, select bank0
  5297  05D4  1303               	bcf	3,6	;RP1=0, select bank0
  5298  05D5  0820               	movf	?___awdiv,w
  5299  05D6  1683               	bsf	3,5	;RP0=1, select bank1
  5300  05D7  1303               	bcf	3,6	;RP1=0, select bank1
  5301  05D8  01D4               	clrf	print_freq@i^(0+128)
  5302  05D9  07D4               	addwf	print_freq@i^(0+128),f
  5303                           
  5304                           ;main.c: 114: if( dec != (i + f) ){
  5305  05DA  0852               	movf	print_freq@f^(0+128),w
  5306  05DB  0754               	addwf	print_freq@i^(0+128),w
  5307  05DC  00CE               	movwf	??_print_freq^(0+128)
  5308  05DD  0853               	movf	(print_freq@f+1)^(0+128),w
  5309  05DE  1803               	skipnc
  5310  05DF  0A53               	incf	(print_freq@f+1)^(0+128),w
  5311  05E0  0755               	addwf	(print_freq@i+1)^(0+128),w
  5312  05E1  00CF               	movwf	(??_print_freq+1)^(0+128)
  5313  05E2  0867               	movf	print_freq@dec^(0+128),w
  5314  05E3  064E               	xorwf	??_print_freq^(0+128),w
  5315  05E4  044F               	iorwf	(??_print_freq+1)^(0+128),w
  5316  05E5  1903               	skipnz
  5317  05E6  0008               	return
  5318                           
  5319                           ;main.c: 115: hd44780_block_erase( 5, 5 );
  5320  05E7  3005               	movlw	5
  5321  05E8  00CE               	movwf	??_print_freq^(0+128)
  5322  05E9  084E               	movf	??_print_freq^(0+128),w
  5323  05EA  1283               	bcf	3,5	;RP0=0, select bank0
  5324  05EB  1303               	bcf	3,6	;RP1=0, select bank0
  5325  05EC  00A3               	movwf	hd44780_block_erase@length
  5326  05ED  3005               	movlw	5
  5327  05EE  160A  118A  27AA   	fcall	_hd44780_block_erase
      +       120A  118A         
  5328                           
  5329                           ;main.c: 116: hd44780_printdecimal( i, f, 5 );
  5330  05F3  1683               	bsf	3,5	;RP0=1, select bank1
  5331  05F4  1303               	bcf	3,6	;RP1=0, select bank1
  5332  05F5  0855               	movf	(print_freq@i+1)^(0+128),w
  5333  05F6  1283               	bcf	3,5	;RP0=0, select bank0
  5334  05F7  1303               	bcf	3,6	;RP1=0, select bank0
  5335  05F8  01BE               	clrf	hd44780_printdecimal@i+1
  5336  05F9  07BE               	addwf	hd44780_printdecimal@i+1,f
  5337  05FA  1683               	bsf	3,5	;RP0=1, select bank1
  5338  05FB  1303               	bcf	3,6	;RP1=0, select bank1
  5339  05FC  0854               	movf	print_freq@i^(0+128),w
  5340  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  5341  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  5342  05FF  01BD               	clrf	hd44780_printdecimal@i
  5343  0600  07BD               	addwf	hd44780_printdecimal@i,f
  5344  0601  1683               	bsf	3,5	;RP0=1, select bank1
  5345  0602  1303               	bcf	3,6	;RP1=0, select bank1
  5346  0603  0853               	movf	(print_freq@f+1)^(0+128),w
  5347  0604  1283               	bcf	3,5	;RP0=0, select bank0
  5348  0605  1303               	bcf	3,6	;RP1=0, select bank0
  5349  0606  01C0               	clrf	hd44780_printdecimal@d+1
  5350  0607  07C0               	addwf	hd44780_printdecimal@d+1,f
  5351  0608  1683               	bsf	3,5	;RP0=1, select bank1
  5352  0609  1303               	bcf	3,6	;RP1=0, select bank1
  5353  060A  0852               	movf	print_freq@f^(0+128),w
  5354  060B  1283               	bcf	3,5	;RP0=0, select bank0
  5355  060C  1303               	bcf	3,6	;RP1=0, select bank0
  5356  060D  01BF               	clrf	hd44780_printdecimal@d
  5357  060E  07BF               	addwf	hd44780_printdecimal@d,f
  5358  060F  3005               	movlw	5
  5359  0610  1683               	bsf	3,5	;RP0=1, select bank1
  5360  0611  1303               	bcf	3,6	;RP1=0, select bank1
  5361  0612  00CE               	movwf	??_print_freq^(0+128)
  5362  0613  084E               	movf	??_print_freq^(0+128),w
  5363  0614  1283               	bcf	3,5	;RP0=0, select bank0
  5364  0615  1303               	bcf	3,6	;RP1=0, select bank0
  5365  0616  00C1               	movwf	hd44780_printdecimal@loc
  5366  0617  160A  118A  27D3   	fcall	_hd44780_printdecimal
  5367                           
  5368                           ;main.c: 117: dec = i + f;
  5369  061A  1683               	bsf	3,5	;RP0=1, select bank1
  5370  061B  1303               	bcf	3,6	;RP1=0, select bank1
  5371  061C  0852               	movf	print_freq@f^(0+128),w
  5372  061D  0754               	addwf	print_freq@i^(0+128),w
  5373  061E  00CE               	movwf	??_print_freq^(0+128)
  5374  061F  084E               	movf	??_print_freq^(0+128),w
  5375  0620  00E7               	movwf	print_freq@dec^(0+128)
  5376  0621  0008               	return
  5377  0622                     __end_of_print_freq:	
  5378                           
  5379                           	psect	text32
  5380  06F5                     __ptext32:	
  5381 ;; *************** function _tea5767_tuned_freq *****************
  5382 ;; Defined at:
  5383 ;;		line 96 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\tea5767.c"
  5384 ;; Parameters:    Size  Location     Type
  5385 ;;		None
  5386 ;; Auto vars:     Size  Location     Type
  5387 ;;  tmp             3   41[BANK1 ] int 
  5388 ;;  d               2   44[BANK1 ] int 
  5389 ;;  f               2   39[BANK1 ] int 
  5390 ;; Return value:  Size  Location     Type
  5391 ;;                  2   34[BANK1 ] int 
  5392 ;; Registers used:
  5393 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5394 ;; Tracked objects:
  5395 ;;		On entry : 0/0
  5396 ;;		On exit  : 0/0
  5397 ;;		Unchanged: 0/0
  5398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5399 ;;      Params:         0       0       2       0       0
  5400 ;;      Locals:         0       0      10       0       0
  5401 ;;      Temps:          0       2       0       0       0
  5402 ;;      Totals:         0       2      12       0       0
  5403 ;;Total ram usage:       14 bytes
  5404 ;; Hardware stack levels used:    1
  5405 ;; Hardware stack levels required when called:    4
  5406 ;; This function calls:
  5407 ;;		___ftmul
  5408 ;;		___fttol
  5409 ;;		___wmul
  5410 ;;		_trunc
  5411 ;; This function is called by:
  5412 ;;		_print_freq
  5413 ;; This function uses a non-reentrant model
  5414 ;;
  5415                           
  5416                           
  5417                           ;psect for function _tea5767_tuned_freq
  5418  06F5                     _tea5767_tuned_freq:	
  5419                           
  5420                           ;tea5767.c: 98: double tmp = current_freq;
  5421                           
  5422                           ;incstack = 0
  5423                           ; Regs used in _tea5767_tuned_freq: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5424  06F5  1683               	bsf	3,5	;RP0=1, select bank1
  5425  06F6  1303               	bcf	3,6	;RP1=0, select bank1
  5426  06F7  0864               	movf	tea5767@current_freq^(0+128),w
  5427  06F8  00C9               	movwf	tea5767_tuned_freq@tmp^(0+128)
  5428  06F9  0865               	movf	(tea5767@current_freq+1)^(0+128),w
  5429  06FA  00CA               	movwf	(tea5767_tuned_freq@tmp+1)^(0+128)
  5430  06FB  0866               	movf	(tea5767@current_freq+2)^(0+128),w
  5431  06FC  00CB               	movwf	(tea5767_tuned_freq@tmp+2)^(0+128)
  5432                           
  5433                           ;tea5767.c: 101: int d = (int)tmp;
  5434  06FD  0849               	movf	tea5767_tuned_freq@tmp^(0+128),w
  5435  06FE  00A6               	movwf	___fttol@f1^(0+128)
  5436  06FF  084A               	movf	(tea5767_tuned_freq@tmp+1)^(0+128),w
  5437  0700  00A7               	movwf	(___fttol@f1+1)^(0+128)
  5438  0701  084B               	movf	(tea5767_tuned_freq@tmp+2)^(0+128),w
  5439  0702  00A8               	movwf	(___fttol@f1+2)^(0+128)
  5440  0703  120A  158A  26C1   	fcall	___fttol
      +       120A  118A         
  5441  0708  1683               	bsf	3,5	;RP0=1, select bank1
  5442  0709  1303               	bcf	3,6	;RP1=0, select bank1
  5443  070A  0827               	movf	(?___fttol^(0+128)+1),w
  5444  070B  01CD               	clrf	(tea5767_tuned_freq@d+1)^(0+128)
  5445  070C  07CD               	addwf	(tea5767_tuned_freq@d+1)^(0+128),f
  5446  070D  0826               	movf	?___fttol^(0+128),w
  5447  070E  01CC               	clrf	tea5767_tuned_freq@d^(0+128)
  5448  070F  07CC               	addwf	tea5767_tuned_freq@d^(0+128),f
  5449                           
  5450                           ;tea5767.c: 102: int f = ((int)trunc((tmp) * 10)) - (d * 10);
  5451  0710  0849               	movf	tea5767_tuned_freq@tmp^(0+128),w
  5452  0711  1283               	bcf	3,5	;RP0=0, select bank0
  5453  0712  1303               	bcf	3,6	;RP1=0, select bank0
  5454  0713  00D0               	movwf	___ftmul@f2
  5455  0714  1683               	bsf	3,5	;RP0=1, select bank1
  5456  0715  1303               	bcf	3,6	;RP1=0, select bank1
  5457  0716  084A               	movf	(tea5767_tuned_freq@tmp+1)^(0+128),w
  5458  0717  1283               	bcf	3,5	;RP0=0, select bank0
  5459  0718  1303               	bcf	3,6	;RP1=0, select bank0
  5460  0719  00D1               	movwf	___ftmul@f2+1
  5461  071A  1683               	bsf	3,5	;RP0=1, select bank1
  5462  071B  1303               	bcf	3,6	;RP1=0, select bank1
  5463  071C  084B               	movf	(tea5767_tuned_freq@tmp+2)^(0+128),w
  5464  071D  1283               	bcf	3,5	;RP0=0, select bank0
  5465  071E  1303               	bcf	3,6	;RP1=0, select bank0
  5466  071F  00D2               	movwf	___ftmul@f2+2
  5467  0720  3000               	movlw	0
  5468  0721  00CD               	movwf	___ftmul@f1
  5469  0722  3020               	movlw	32
  5470  0723  00CE               	movwf	___ftmul@f1+1
  5471  0724  3041               	movlw	65
  5472  0725  00CF               	movwf	___ftmul@f1+2
  5473  0726  120A  118A  2622   	fcall	___ftmul
      +       120A  118A         
  5474  072B  1283               	bcf	3,5	;RP0=0, select bank0
  5475  072C  1303               	bcf	3,6	;RP1=0, select bank0
  5476  072D  084D               	movf	?___ftmul,w
  5477  072E  1683               	bsf	3,5	;RP0=1, select bank1
  5478  072F  1303               	bcf	3,6	;RP1=0, select bank1
  5479  0730  00BA               	movwf	trunc@x^(0+128)
  5480  0731  1283               	bcf	3,5	;RP0=0, select bank0
  5481  0732  1303               	bcf	3,6	;RP1=0, select bank0
  5482  0733  084E               	movf	?___ftmul+1,w
  5483  0734  1683               	bsf	3,5	;RP0=1, select bank1
  5484  0735  1303               	bcf	3,6	;RP1=0, select bank1
  5485  0736  00BB               	movwf	(trunc@x+1)^(0+128)
  5486  0737  1283               	bcf	3,5	;RP0=0, select bank0
  5487  0738  1303               	bcf	3,6	;RP1=0, select bank0
  5488  0739  084F               	movf	?___ftmul+2,w
  5489  073A  1683               	bsf	3,5	;RP0=1, select bank1
  5490  073B  1303               	bcf	3,6	;RP1=0, select bank1
  5491  073C  00BC               	movwf	(trunc@x+2)^(0+128)
  5492  073D  120A  158A  24E4   	fcall	_trunc
      +       120A  118A         
  5493  0742  1683               	bsf	3,5	;RP0=1, select bank1
  5494  0743  1303               	bcf	3,6	;RP1=0, select bank1
  5495  0744  083A               	movf	?_trunc^(0+128),w
  5496  0745  00C4               	movwf	_tea5767_tuned_freq$1039^(0+128)
  5497  0746  083B               	movf	(?_trunc+1)^(0+128),w
  5498  0747  00C5               	movwf	(_tea5767_tuned_freq$1039+1)^(0+128)
  5499  0748  083C               	movf	(?_trunc+2)^(0+128),w
  5500  0749  00C6               	movwf	(_tea5767_tuned_freq$1039+2)^(0+128)
  5501                           
  5502                           ;tea5767.c: 102: int f = ((int)trunc((tmp) * 10)) - (d * 10);
  5503  074A  084D               	movf	(tea5767_tuned_freq@d+1)^(0+128),w
  5504  074B  1283               	bcf	3,5	;RP0=0, select bank0
  5505  074C  1303               	bcf	3,6	;RP1=0, select bank0
  5506  074D  01A1               	clrf	___wmul@multiplier+1
  5507  074E  07A1               	addwf	___wmul@multiplier+1,f
  5508  074F  1683               	bsf	3,5	;RP0=1, select bank1
  5509  0750  1303               	bcf	3,6	;RP1=0, select bank1
  5510  0751  084C               	movf	tea5767_tuned_freq@d^(0+128),w
  5511  0752  1283               	bcf	3,5	;RP0=0, select bank0
  5512  0753  1303               	bcf	3,6	;RP1=0, select bank0
  5513  0754  01A0               	clrf	___wmul@multiplier
  5514  0755  07A0               	addwf	___wmul@multiplier,f
  5515  0756  300A               	movlw	10
  5516  0757  00A2               	movwf	___wmul@multiplicand
  5517  0758  3000               	movlw	0
  5518  0759  00A3               	movwf	___wmul@multiplicand+1
  5519  075A  160A  118A  273A   	fcall	___wmul
      +       120A  118A         
  5520  075F  1283               	bcf	3,5	;RP0=0, select bank0
  5521  0760  1303               	bcf	3,6	;RP1=0, select bank0
  5522  0761  0920               	comf	?___wmul,w
  5523  0762  00EE               	movwf	??_tea5767_tuned_freq
  5524  0763  0921               	comf	?___wmul+1,w
  5525  0764  00EF               	movwf	??_tea5767_tuned_freq+1
  5526  0765  0AEE               	incf	??_tea5767_tuned_freq,f
  5527  0766  1903               	skipnz
  5528  0767  0AEF               	incf	??_tea5767_tuned_freq+1,f
  5529  0768  1683               	bsf	3,5	;RP0=1, select bank1
  5530  0769  1303               	bcf	3,6	;RP1=0, select bank1
  5531  076A  0844               	movf	_tea5767_tuned_freq$1039^(0+128),w
  5532  076B  00A6               	movwf	___fttol@f1^(0+128)
  5533  076C  0845               	movf	(_tea5767_tuned_freq$1039+1)^(0+128),w
  5534  076D  00A7               	movwf	(___fttol@f1+1)^(0+128)
  5535  076E  0846               	movf	(_tea5767_tuned_freq$1039+2)^(0+128),w
  5536  076F  00A8               	movwf	(___fttol@f1+2)^(0+128)
  5537  0770  120A  158A  26C1   	fcall	___fttol
      +       120A  118A         
  5538  0775  1283               	bcf	3,5	;RP0=0, select bank0
  5539  0776  1303               	bcf	3,6	;RP1=0, select bank0
  5540  0777  086E               	movf	??_tea5767_tuned_freq,w
  5541  0778  1683               	bsf	3,5	;RP0=1, select bank1
  5542  0779  1303               	bcf	3,6	;RP1=0, select bank1
  5543  077A  0726               	addwf	?___fttol^(0+128),w
  5544  077B  00C7               	movwf	tea5767_tuned_freq@f^(0+128)
  5545  077C  1283               	bcf	3,5	;RP0=0, select bank0
  5546  077D  1303               	bcf	3,6	;RP1=0, select bank0
  5547  077E  086F               	movf	??_tea5767_tuned_freq+1,w
  5548  077F  1803               	skipnc
  5549  0780  0A6F               	incf	??_tea5767_tuned_freq+1,w
  5550  0781  1683               	bsf	3,5	;RP0=1, select bank1
  5551  0782  1303               	bcf	3,6	;RP1=0, select bank1
  5552  0783  0727               	addwf	(?___fttol^(0+128)+1),w
  5553  0784  00C8               	movwf	(tea5767_tuned_freq@f+1)^(0+128)
  5554                           
  5555                           ;tea5767.c: 106: return ((d * 10) + f);
  5556  0785  084D               	movf	(tea5767_tuned_freq@d+1)^(0+128),w
  5557  0786  1283               	bcf	3,5	;RP0=0, select bank0
  5558  0787  1303               	bcf	3,6	;RP1=0, select bank0
  5559  0788  01A1               	clrf	___wmul@multiplier+1
  5560  0789  07A1               	addwf	___wmul@multiplier+1,f
  5561  078A  1683               	bsf	3,5	;RP0=1, select bank1
  5562  078B  1303               	bcf	3,6	;RP1=0, select bank1
  5563  078C  084C               	movf	tea5767_tuned_freq@d^(0+128),w
  5564  078D  1283               	bcf	3,5	;RP0=0, select bank0
  5565  078E  1303               	bcf	3,6	;RP1=0, select bank0
  5566  078F  01A0               	clrf	___wmul@multiplier
  5567  0790  07A0               	addwf	___wmul@multiplier,f
  5568  0791  300A               	movlw	10
  5569  0792  00A2               	movwf	___wmul@multiplicand
  5570  0793  3000               	movlw	0
  5571  0794  00A3               	movwf	___wmul@multiplicand+1
  5572  0795  160A  118A  273A   	fcall	___wmul
  5573  0798  1683               	bsf	3,5	;RP0=1, select bank1
  5574  0799  1303               	bcf	3,6	;RP1=0, select bank1
  5575  079A  0847               	movf	tea5767_tuned_freq@f^(0+128),w
  5576  079B  1283               	bcf	3,5	;RP0=0, select bank0
  5577  079C  1303               	bcf	3,6	;RP1=0, select bank0
  5578  079D  0720               	addwf	?___wmul,w
  5579  079E  1683               	bsf	3,5	;RP0=1, select bank1
  5580  079F  1303               	bcf	3,6	;RP1=0, select bank1
  5581  07A0  00C2               	movwf	?_tea5767_tuned_freq^(0+128)
  5582  07A1  0848               	movf	(tea5767_tuned_freq@f+1)^(0+128),w
  5583  07A2  1803               	skipnc
  5584  07A3  0A48               	incf	(tea5767_tuned_freq@f+1)^(0+128),w
  5585  07A4  1283               	bcf	3,5	;RP0=0, select bank0
  5586  07A5  1303               	bcf	3,6	;RP1=0, select bank0
  5587  07A6  0721               	addwf	?___wmul+1,w
  5588  07A7  1683               	bsf	3,5	;RP0=1, select bank1
  5589  07A8  1303               	bcf	3,6	;RP1=0, select bank1
  5590  07A9  00C3               	movwf	(?_tea5767_tuned_freq+1)^(0+128)
  5591  07AA  0008               	return
  5592  07AB                     __end_of_tea5767_tuned_freq:	
  5593                           
  5594                           	psect	text33
  5595  0CE4                     __ptext33:	
  5596 ;; *************** function _trunc *****************
  5597 ;; Defined at:
  5598 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\trunc.c"
  5599 ;; Parameters:    Size  Location     Type
  5600 ;;  x               3   26[BANK1 ] int 
  5601 ;; Auto vars:     Size  Location     Type
  5602 ;;  i               3   29[BANK1 ] int 
  5603 ;;  expon           2   32[BANK1 ] int 
  5604 ;; Return value:  Size  Location     Type
  5605 ;;                  3   26[BANK1 ] int 
  5606 ;; Registers used:
  5607 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5608 ;; Tracked objects:
  5609 ;;		On entry : 0/0
  5610 ;;		On exit  : 0/0
  5611 ;;		Unchanged: 0/0
  5612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5613 ;;      Params:         0       0       3       0       0
  5614 ;;      Locals:         0       0       5       0       0
  5615 ;;      Temps:          0       1       0       0       0
  5616 ;;      Totals:         0       1       8       0       0
  5617 ;;Total ram usage:        9 bytes
  5618 ;; Hardware stack levels used:    1
  5619 ;; Hardware stack levels required when called:    3
  5620 ;; This function calls:
  5621 ;;		___altoft
  5622 ;;		___fttol
  5623 ;;		_frexp
  5624 ;; This function is called by:
  5625 ;;		_tea5767_tuned_freq
  5626 ;; This function uses a non-reentrant model
  5627 ;;
  5628                           
  5629                           
  5630                           ;psect for function _trunc
  5631  0CE4                     _trunc:	
  5632                           
  5633                           ;incstack = 0
  5634                           ; Regs used in _trunc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5635  0CE4  1683               	bsf	3,5	;RP0=1, select bank1
  5636  0CE5  1303               	bcf	3,6	;RP1=0, select bank1
  5637  0CE6  083A               	movf	trunc@x^(0+128),w
  5638  0CE7  1283               	bcf	3,5	;RP0=0, select bank0
  5639  0CE8  1303               	bcf	3,6	;RP1=0, select bank0
  5640  0CE9  00A0               	movwf	frexp@value
  5641  0CEA  1683               	bsf	3,5	;RP0=1, select bank1
  5642  0CEB  1303               	bcf	3,6	;RP1=0, select bank1
  5643  0CEC  083B               	movf	(trunc@x+1)^(0+128),w
  5644  0CED  1283               	bcf	3,5	;RP0=0, select bank0
  5645  0CEE  1303               	bcf	3,6	;RP1=0, select bank0
  5646  0CEF  00A1               	movwf	frexp@value+1
  5647  0CF0  1683               	bsf	3,5	;RP0=1, select bank1
  5648  0CF1  1303               	bcf	3,6	;RP1=0, select bank1
  5649  0CF2  083C               	movf	(trunc@x+2)^(0+128),w
  5650  0CF3  1283               	bcf	3,5	;RP0=0, select bank0
  5651  0CF4  1303               	bcf	3,6	;RP1=0, select bank0
  5652  0CF5  00A2               	movwf	frexp@value+2
  5653  0CF6  30C0               	movlw	trunc@expon& (0+255)
  5654  0CF7  00ED               	movwf	??_trunc
  5655  0CF8  086D               	movf	??_trunc,w
  5656  0CF9  00A3               	movwf	frexp@eptr
  5657  0CFA  120A  158A  217D   	fcall	_frexp
      +       120A  158A         
  5658  0CFF  1683               	bsf	3,5	;RP0=1, select bank1
  5659  0D00  1303               	bcf	3,6	;RP1=0, select bank1
  5660  0D01  1FC1               	btfss	(trunc@expon+1)^(0+128),7
  5661  0D02  2D0A               	goto	l5306
  5662  0D03  3000               	movlw	0
  5663  0D04  00BA               	movwf	?_trunc^(0+128)
  5664  0D05  3000               	movlw	0
  5665  0D06  00BB               	movwf	(?_trunc+1)^(0+128)
  5666  0D07  3000               	movlw	0
  5667  0D08  00BC               	movwf	(?_trunc+2)^(0+128)
  5668  0D09  0008               	return
  5669  0D0A                     l5306:	
  5670  0D0A  3000               	movlw	0
  5671  0D0B  0241               	subwf	(trunc@expon+1)^(0+128),w
  5672  0D0C  3015               	movlw	21
  5673  0D0D  1903               	skipnz
  5674  0D0E  0240               	subwf	trunc@expon^(0+128),w
  5675  0D0F  1803               	btfsc	3,0
  5676  0D10  0008               	return
  5677  0D11  083A               	movf	trunc@x^(0+128),w
  5678  0D12  00A6               	movwf	___fttol@f1^(0+128)
  5679  0D13  083B               	movf	(trunc@x+1)^(0+128),w
  5680  0D14  00A7               	movwf	(___fttol@f1+1)^(0+128)
  5681  0D15  083C               	movf	(trunc@x+2)^(0+128),w
  5682  0D16  00A8               	movwf	(___fttol@f1+2)^(0+128)
  5683  0D17  120A  158A  26C1   	fcall	___fttol
      +       120A  158A         
  5684  0D1C  1683               	bsf	3,5	;RP0=1, select bank1
  5685  0D1D  1303               	bcf	3,6	;RP1=0, select bank1
  5686  0D1E  0829               	movf	(?___fttol+3)^(0+128),w
  5687  0D1F  1283               	bcf	3,5	;RP0=0, select bank0
  5688  0D20  1303               	bcf	3,6	;RP1=0, select bank0
  5689  0D21  00AB               	movwf	___altoft@c+3
  5690  0D22  1683               	bsf	3,5	;RP0=1, select bank1
  5691  0D23  1303               	bcf	3,6	;RP1=0, select bank1
  5692  0D24  0828               	movf	(?___fttol+2)^(0+128),w
  5693  0D25  1283               	bcf	3,5	;RP0=0, select bank0
  5694  0D26  1303               	bcf	3,6	;RP1=0, select bank0
  5695  0D27  00AA               	movwf	___altoft@c+2
  5696  0D28  1683               	bsf	3,5	;RP0=1, select bank1
  5697  0D29  1303               	bcf	3,6	;RP1=0, select bank1
  5698  0D2A  0827               	movf	(?___fttol+1)^(0+128),w
  5699  0D2B  1283               	bcf	3,5	;RP0=0, select bank0
  5700  0D2C  1303               	bcf	3,6	;RP1=0, select bank0
  5701  0D2D  00A9               	movwf	___altoft@c+1
  5702  0D2E  1683               	bsf	3,5	;RP0=1, select bank1
  5703  0D2F  1303               	bcf	3,6	;RP1=0, select bank1
  5704  0D30  0826               	movf	?___fttol^(0+128),w
  5705  0D31  1283               	bcf	3,5	;RP0=0, select bank0
  5706  0D32  1303               	bcf	3,6	;RP1=0, select bank0
  5707  0D33  00A8               	movwf	___altoft@c
  5708  0D34  120A  158A  22B5   	fcall	___altoft
  5709  0D37  1283               	bcf	3,5	;RP0=0, select bank0
  5710  0D38  1303               	bcf	3,6	;RP1=0, select bank0
  5711  0D39  0828               	movf	?___altoft,w
  5712  0D3A  1683               	bsf	3,5	;RP0=1, select bank1
  5713  0D3B  1303               	bcf	3,6	;RP1=0, select bank1
  5714  0D3C  00BD               	movwf	trunc@i^(0+128)
  5715  0D3D  1283               	bcf	3,5	;RP0=0, select bank0
  5716  0D3E  1303               	bcf	3,6	;RP1=0, select bank0
  5717  0D3F  0829               	movf	?___altoft+1,w
  5718  0D40  1683               	bsf	3,5	;RP0=1, select bank1
  5719  0D41  1303               	bcf	3,6	;RP1=0, select bank1
  5720  0D42  00BE               	movwf	(trunc@i+1)^(0+128)
  5721  0D43  1283               	bcf	3,5	;RP0=0, select bank0
  5722  0D44  1303               	bcf	3,6	;RP1=0, select bank0
  5723  0D45  082A               	movf	?___altoft+2,w
  5724  0D46  1683               	bsf	3,5	;RP0=1, select bank1
  5725  0D47  1303               	bcf	3,6	;RP1=0, select bank1
  5726  0D48  00BF               	movwf	(trunc@i+2)^(0+128)
  5727  0D49  083D               	movf	trunc@i^(0+128),w
  5728  0D4A  00BA               	movwf	?_trunc^(0+128)
  5729  0D4B  083E               	movf	(trunc@i+1)^(0+128),w
  5730  0D4C  00BB               	movwf	(?_trunc+1)^(0+128)
  5731  0D4D  083F               	movf	(trunc@i+2)^(0+128),w
  5732  0D4E  00BC               	movwf	(?_trunc+2)^(0+128)
  5733  0D4F  0008               	return
  5734  0D50                     __end_of_trunc:	
  5735                           
  5736                           	psect	text34
  5737  097D                     __ptext34:	
  5738 ;; *************** function _frexp *****************
  5739 ;; Defined at:
  5740 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\frexp.c"
  5741 ;; Parameters:    Size  Location     Type
  5742 ;;  value           3    0[BANK0 ] int 
  5743 ;;  eptr            1    3[BANK0 ] PTR int 
  5744 ;;		 -> trunc@expon(2), ceil@expon(2), 
  5745 ;; Auto vars:     Size  Location     Type
  5746 ;;		None
  5747 ;; Return value:  Size  Location     Type
  5748 ;;                  3    0[BANK0 ] PTR int 
  5749 ;; Registers used:
  5750 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  5751 ;; Tracked objects:
  5752 ;;		On entry : 0/0
  5753 ;;		On exit  : 0/0
  5754 ;;		Unchanged: 0/0
  5755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5756 ;;      Params:         0       4       0       0       0
  5757 ;;      Locals:         0       0       0       0       0
  5758 ;;      Temps:          0       2       0       0       0
  5759 ;;      Totals:         0       6       0       0       0
  5760 ;;Total ram usage:        6 bytes
  5761 ;; Hardware stack levels used:    1
  5762 ;; Hardware stack levels required when called:    1
  5763 ;; This function calls:
  5764 ;;		Nothing
  5765 ;; This function is called by:
  5766 ;;		_ceil
  5767 ;;		_trunc
  5768 ;; This function uses a non-reentrant model
  5769 ;;
  5770                           
  5771                           
  5772                           ;psect for function _frexp
  5773  097D                     _frexp:	
  5774                           
  5775                           ;incstack = 0
  5776                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  5777  097D  1283               	bcf	3,5	;RP0=0, select bank0
  5778  097E  1303               	bcf	3,6	;RP1=0, select bank0
  5779  097F  0822               	movf	frexp@value+2,w
  5780  0980  0421               	iorwf	frexp@value+1,w
  5781  0981  0420               	iorwf	frexp@value,w
  5782  0982  1D03               	skipz
  5783  0983  298B               	goto	l5394
  5784  0984  0823               	movf	frexp@eptr,w
  5785  0985  0084               	movwf	4
  5786  0986  1383               	bcf	3,7	;select IRP bank0
  5787  0987  0180               	clrf	0
  5788  0988  0A84               	incf	4,f
  5789  0989  0180               	clrf	0
  5790                           
  5791                           ;	Return value of _frexp is never used
  5792  098A  0008               	return
  5793  098B                     l5394:	
  5794  098B  0822               	movf	frexp@value+2,w
  5795  098C  397F               	andlw	127
  5796  098D  00A4               	movwf	??_frexp
  5797  098E  01A5               	clrf	??_frexp+1
  5798  098F  1003               	clrc
  5799  0990  0DA4               	rlf	??_frexp,f
  5800  0991  0DA5               	rlf	??_frexp+1,f
  5801  0992  0823               	movf	frexp@eptr,w
  5802  0993  0084               	movwf	4
  5803  0994  0824               	movf	??_frexp,w
  5804  0995  1383               	bcf	3,7	;select IRP bank0
  5805  0996  0080               	movwf	0
  5806  0997  0A84               	incf	4,f
  5807  0998  0825               	movf	??_frexp+1,w
  5808  0999  0080               	movwf	0
  5809  099A  0D21               	rlf	frexp@value+1,w
  5810  099B  0D21               	rlf	frexp@value+1,w
  5811  099C  3901               	andlw	1
  5812  099D  00A4               	movwf	??_frexp
  5813  099E  01A5               	clrf	??_frexp+1
  5814  099F  0823               	movf	frexp@eptr,w
  5815  09A0  0084               	movwf	4
  5816  09A1  0824               	movf	??_frexp,w
  5817  09A2  0480               	iorwf	0,f
  5818  09A3  0A84               	incf	4,f
  5819  09A4  0825               	movf	??_frexp+1,w
  5820  09A5  0480               	iorwf	0,f
  5821  09A6  0823               	movf	frexp@eptr,w
  5822  09A7  0084               	movwf	4
  5823  09A8  3082               	movlw	130
  5824  09A9  0780               	addwf	0,f
  5825  09AA  0F84               	incfsz	4,f
  5826  09AB  0800               	movf	0,w
  5827  09AC  1803               	skipnc
  5828  09AD  0A00               	incf	0,w
  5829  09AE  00FF               	movwf	127
  5830  09AF  30FF               	movlw	255
  5831  09B0  077F               	addwf	127,w
  5832  09B1  0080               	movwf	0
  5833  09B2  0384               	decf	4,f
  5834  09B3  0822               	movf	frexp@value+2,w
  5835  09B4  3980               	andlw	-128
  5836  09B5  383F               	iorlw	63
  5837  09B6  00A2               	movwf	frexp@value+2
  5838  09B7  13A1               	bcf	frexp@value+1,7
  5839  09B8  0008               	return
  5840  09B9                     __end_of_frexp:	
  5841                           ;	Return value of _frexp is never used
  5842                           
  5843                           
  5844                           	psect	text35
  5845  0EC1                     __ptext35:	
  5846 ;; *************** function ___fttol *****************
  5847 ;; Defined at:
  5848 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\fttol.c"
  5849 ;; Parameters:    Size  Location     Type
  5850 ;;  f1              3    6[BANK1 ] float 
  5851 ;; Auto vars:     Size  Location     Type
  5852 ;;  lval            4   21[BANK1 ] unsigned long 
  5853 ;;  exp1            1   25[BANK1 ] unsigned char 
  5854 ;;  sign1           1   20[BANK1 ] unsigned char 
  5855 ;; Return value:  Size  Location     Type
  5856 ;;                  4    6[BANK1 ] long 
  5857 ;; Registers used:
  5858 ;;		wreg, status,2, status,0
  5859 ;; Tracked objects:
  5860 ;;		On entry : 0/0
  5861 ;;		On exit  : 0/0
  5862 ;;		Unchanged: 0/0
  5863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5864 ;;      Params:         0       0       4       0       0
  5865 ;;      Locals:         0       0      12       0       0
  5866 ;;      Temps:          0       0       4       0       0
  5867 ;;      Totals:         0       0      20       0       0
  5868 ;;Total ram usage:       20 bytes
  5869 ;; Hardware stack levels used:    1
  5870 ;; Hardware stack levels required when called:    1
  5871 ;; This function calls:
  5872 ;;		Nothing
  5873 ;; This function is called by:
  5874 ;;		_tea5767_getpll
  5875 ;;		_tea5767_tuned_freq
  5876 ;;		_ceil
  5877 ;;		_trunc
  5878 ;; This function uses a non-reentrant model
  5879 ;;
  5880                           
  5881                           
  5882                           ;psect for function ___fttol
  5883  0EC1                     ___fttol:	
  5884                           
  5885                           ;incstack = 0
  5886                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  5887  0EC1  1683               	bsf	3,5	;RP0=1, select bank1
  5888  0EC2  1303               	bcf	3,6	;RP1=0, select bank1
  5889  0EC3  0826               	movf	___fttol@f1^(0+128),w
  5890  0EC4  00AA               	movwf	??___fttol^(0+128)
  5891  0EC5  0827               	movf	(___fttol@f1+1)^(0+128),w
  5892  0EC6  00AB               	movwf	(??___fttol^(0+128)+1)
  5893  0EC7  0828               	movf	(___fttol@f1+2)^(0+128),w
  5894  0EC8  00AC               	movwf	(??___fttol^(0+128)+2)
  5895  0EC9  1003               	clrc
  5896  0ECA  0D2B               	rlf	(??___fttol^(0+128)+1),w
  5897  0ECB  0D2C               	rlf	(??___fttol^(0+128)+2),w
  5898  0ECC  00AD               	movwf	(??___fttol+3)^(0+128)
  5899  0ECD  082D               	movf	(??___fttol+3)^(0+128),w
  5900  0ECE  00B9               	movwf	___fttol@exp1^(0+128)
  5901  0ECF  08B9               	movf	___fttol@exp1^(0+128),f
  5902  0ED0  1D03               	skipz
  5903  0ED1  2EDB               	goto	l4506
  5904  0ED2  3000               	movlw	0
  5905  0ED3  00A9               	movwf	(?___fttol+3)^(0+128)
  5906  0ED4  3000               	movlw	0
  5907  0ED5  00A8               	movwf	(?___fttol+2)^(0+128)
  5908  0ED6  3000               	movlw	0
  5909  0ED7  00A7               	movwf	(?___fttol+1)^(0+128)
  5910  0ED8  3000               	movlw	0
  5911  0ED9  00A6               	movwf	?___fttol^(0+128)
  5912  0EDA  0008               	return
  5913  0EDB                     l4506:	
  5914  0EDB  0826               	movf	___fttol@f1^(0+128),w
  5915  0EDC  00AA               	movwf	??___fttol^(0+128)
  5916  0EDD  0827               	movf	(___fttol@f1+1)^(0+128),w
  5917  0EDE  00AB               	movwf	(??___fttol^(0+128)+1)
  5918  0EDF  0828               	movf	(___fttol@f1+2)^(0+128),w
  5919  0EE0  00AC               	movwf	(??___fttol^(0+128)+2)
  5920  0EE1  3017               	movlw	23
  5921  0EE2                     u4405:	
  5922  0EE2  1003               	clrc
  5923  0EE3  0CAC               	rrf	(??___fttol^(0+128)+2),f
  5924  0EE4  0CAB               	rrf	(??___fttol^(0+128)+1),f
  5925  0EE5  0CAA               	rrf	??___fttol^(0+128),f
  5926  0EE6  3EFF               	addlw	-1
  5927  0EE7  1D03               	skipz
  5928  0EE8  2EE2               	goto	u4405
  5929  0EE9  082A               	movf	??___fttol^(0+128),w
  5930  0EEA  00AD               	movwf	(??___fttol+3)^(0+128)
  5931  0EEB  082D               	movf	(??___fttol+3)^(0+128),w
  5932  0EEC  00B4               	movwf	___fttol@sign1^(0+128)
  5933  0EED  17A7               	bsf	(___fttol@f1^(0+128)+1),7
  5934  0EEE  30FF               	movlw	255
  5935  0EEF  05A6               	andwf	___fttol@f1^(0+128),f
  5936  0EF0  30FF               	movlw	255
  5937  0EF1  05A7               	andwf	(___fttol@f1+1)^(0+128),f
  5938  0EF2  3000               	movlw	0
  5939  0EF3  05A8               	andwf	(___fttol@f1+2)^(0+128),f
  5940  0EF4  0826               	movf	___fttol@f1^(0+128),w
  5941  0EF5  00B5               	movwf	___fttol@lval^(0+128)
  5942  0EF6  0827               	movf	(___fttol@f1+1)^(0+128),w
  5943  0EF7  00B6               	movwf	(___fttol@lval^(0+128)+1)
  5944  0EF8  0828               	movf	(___fttol@f1+2)^(0+128),w
  5945  0EF9  00B7               	movwf	(___fttol@lval^(0+128)+2)
  5946  0EFA  01B8               	clrf	(___fttol@lval^(0+128)+3)
  5947  0EFB  308E               	movlw	142
  5948  0EFC  02B9               	subwf	___fttol@exp1^(0+128),f
  5949  0EFD  1FB9               	btfss	___fttol@exp1^(0+128),7
  5950  0EFE  2F1D               	goto	l4526
  5951  0EFF  0839               	movf	___fttol@exp1^(0+128),w
  5952  0F00  3A80               	xorlw	128
  5953  0F01  3E8F               	addlw	143
  5954  0F02  1803               	skipnc
  5955  0F03  2F0D               	goto	l4524
  5956  0F04  3000               	movlw	0
  5957  0F05  00A9               	movwf	(?___fttol+3)^(0+128)
  5958  0F06  3000               	movlw	0
  5959  0F07  00A8               	movwf	(?___fttol+2)^(0+128)
  5960  0F08  3000               	movlw	0
  5961  0F09  00A7               	movwf	(?___fttol+1)^(0+128)
  5962  0F0A  3000               	movlw	0
  5963  0F0B  00A6               	movwf	?___fttol^(0+128)
  5964  0F0C  0008               	return
  5965  0F0D                     l4524:	
  5966  0F0D  3001               	movlw	1
  5967  0F0E                     u4435:	
  5968  0F0E  1003               	clrc
  5969  0F0F  0CB8               	rrf	(___fttol@lval+3)^(0+128),f
  5970  0F10  0CB7               	rrf	(___fttol@lval+2)^(0+128),f
  5971  0F11  0CB6               	rrf	(___fttol@lval+1)^(0+128),f
  5972  0F12  0CB5               	rrf	___fttol@lval^(0+128),f
  5973  0F13  3EFF               	addlw	-1
  5974  0F14  1D03               	skipz
  5975  0F15  2F0E               	goto	u4435
  5976  0F16  3001               	movlw	1
  5977  0F17  00AA               	movwf	??___fttol^(0+128)
  5978  0F18  082A               	movf	??___fttol^(0+128),w
  5979  0F19  07B9               	addwf	___fttol@exp1^(0+128),f
  5980  0F1A  1903               	btfsc	3,2
  5981  0F1B  2F38               	goto	l4536
  5982  0F1C  2F0D               	goto	l4524
  5983  0F1D                     l4526:	
  5984  0F1D  3018               	movlw	24
  5985  0F1E  0239               	subwf	___fttol@exp1^(0+128),w
  5986  0F1F  1C03               	skipc
  5987  0F20  2F35               	goto	l4534
  5988  0F21  3000               	movlw	0
  5989  0F22  00A9               	movwf	(?___fttol+3)^(0+128)
  5990  0F23  3000               	movlw	0
  5991  0F24  00A8               	movwf	(?___fttol+2)^(0+128)
  5992  0F25  3000               	movlw	0
  5993  0F26  00A7               	movwf	(?___fttol+1)^(0+128)
  5994  0F27  3000               	movlw	0
  5995  0F28  00A6               	movwf	?___fttol^(0+128)
  5996  0F29  0008               	return
  5997  0F2A                     l4532:	
  5998  0F2A  3001               	movlw	1
  5999  0F2B  00AA               	movwf	??___fttol^(0+128)
  6000  0F2C                     u4465:	
  6001  0F2C  1003               	clrc
  6002  0F2D  0DB5               	rlf	___fttol@lval^(0+128),f
  6003  0F2E  0DB6               	rlf	(___fttol@lval+1)^(0+128),f
  6004  0F2F  0DB7               	rlf	(___fttol@lval+2)^(0+128),f
  6005  0F30  0DB8               	rlf	(___fttol@lval+3)^(0+128),f
  6006  0F31  0BAA               	decfsz	??___fttol^(0+128),f
  6007  0F32  2F2C               	goto	u4465
  6008  0F33  3001               	movlw	1
  6009  0F34  02B9               	subwf	___fttol@exp1^(0+128),f
  6010  0F35                     l4534:	
  6011  0F35  08B9               	movf	___fttol@exp1^(0+128),f
  6012  0F36  1D03               	skipz
  6013  0F37  2F2A               	goto	l4532
  6014  0F38                     l4536:	
  6015  0F38  0834               	movf	___fttol@sign1^(0+128),w
  6016  0F39  1903               	btfsc	3,2
  6017  0F3A  2F46               	goto	l4540
  6018  0F3B  09B5               	comf	___fttol@lval^(0+128),f
  6019  0F3C  09B6               	comf	(___fttol@lval+1)^(0+128),f
  6020  0F3D  09B7               	comf	(___fttol@lval+2)^(0+128),f
  6021  0F3E  09B8               	comf	(___fttol@lval+3)^(0+128),f
  6022  0F3F  0AB5               	incf	___fttol@lval^(0+128),f
  6023  0F40  1903               	skipnz
  6024  0F41  0AB6               	incf	(___fttol@lval+1)^(0+128),f
  6025  0F42  1903               	skipnz
  6026  0F43  0AB7               	incf	(___fttol@lval+2)^(0+128),f
  6027  0F44  1903               	skipnz
  6028  0F45  0AB8               	incf	(___fttol@lval+3)^(0+128),f
  6029  0F46                     l4540:	
  6030  0F46  0838               	movf	(___fttol@lval+3)^(0+128),w
  6031  0F47  00A9               	movwf	(?___fttol+3)^(0+128)
  6032  0F48  0837               	movf	(___fttol@lval+2)^(0+128),w
  6033  0F49  00A8               	movwf	(?___fttol+2)^(0+128)
  6034  0F4A  0836               	movf	(___fttol@lval+1)^(0+128),w
  6035  0F4B  00A7               	movwf	(?___fttol+1)^(0+128)
  6036  0F4C  0835               	movf	___fttol@lval^(0+128),w
  6037  0F4D  00A6               	movwf	?___fttol^(0+128)
  6038  0F4E  0008               	return
  6039  0F4F                     __end_of___fttol:	
  6040                           
  6041                           	psect	text36
  6042  0AB5                     __ptext36:	
  6043 ;; *************** function ___altoft *****************
  6044 ;; Defined at:
  6045 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\altoft.c"
  6046 ;; Parameters:    Size  Location     Type
  6047 ;;  c               4    8[BANK0 ] long 
  6048 ;; Auto vars:     Size  Location     Type
  6049 ;;  sign            1   17[BANK0 ] unsigned char 
  6050 ;;  exp             1   16[BANK0 ] unsigned char 
  6051 ;; Return value:  Size  Location     Type
  6052 ;;                  3    8[BANK0 ] float 
  6053 ;; Registers used:
  6054 ;;		wreg, status,2, status,0, pclath, cstack
  6055 ;; Tracked objects:
  6056 ;;		On entry : 0/0
  6057 ;;		On exit  : 0/0
  6058 ;;		Unchanged: 0/0
  6059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6060 ;;      Params:         0       4       0       0       0
  6061 ;;      Locals:         0       4       0       0       0
  6062 ;;      Temps:          0       2       0       0       0
  6063 ;;      Totals:         0      10       0       0       0
  6064 ;;Total ram usage:       10 bytes
  6065 ;; Hardware stack levels used:    1
  6066 ;; Hardware stack levels required when called:    2
  6067 ;; This function calls:
  6068 ;;		___ftpack
  6069 ;; This function is called by:
  6070 ;;		_ceil
  6071 ;;		_trunc
  6072 ;; This function uses a non-reentrant model
  6073 ;;
  6074                           
  6075                           
  6076                           ;psect for function ___altoft
  6077  0AB5                     ___altoft:	
  6078                           
  6079                           ;incstack = 0
  6080                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  6081  0AB5  1283               	bcf	3,5	;RP0=0, select bank0
  6082  0AB6  1303               	bcf	3,6	;RP1=0, select bank0
  6083  0AB7  01B1               	clrf	___altoft@sign
  6084  0AB8  308E               	movlw	142
  6085  0AB9  00AC               	movwf	??___altoft
  6086  0ABA  082C               	movf	??___altoft,w
  6087  0ABB  00B0               	movwf	___altoft@exp
  6088  0ABC  1FAB               	btfss	___altoft@c+3,7
  6089  0ABD  2ACB               	goto	l5370
  6090  0ABE  09A8               	comf	___altoft@c,f
  6091  0ABF  09A9               	comf	___altoft@c+1,f
  6092  0AC0  09AA               	comf	___altoft@c+2,f
  6093  0AC1  09AB               	comf	___altoft@c+3,f
  6094  0AC2  0AA8               	incf	___altoft@c,f
  6095  0AC3  1903               	skipnz
  6096  0AC4  0AA9               	incf	___altoft@c+1,f
  6097  0AC5  1903               	skipnz
  6098  0AC6  0AAA               	incf	___altoft@c+2,f
  6099  0AC7  1903               	skipnz
  6100  0AC8  0AAB               	incf	___altoft@c+3,f
  6101  0AC9  01B1               	clrf	___altoft@sign
  6102  0ACA  0AB1               	incf	___altoft@sign,f
  6103  0ACB                     l5370:	
  6104  0ACB  30FF               	movlw	255
  6105  0ACC  052B               	andwf	___altoft@c+3,w
  6106  0ACD  1903               	btfsc	3,2
  6107  0ACE  2ADD               	goto	l5372
  6108  0ACF  3001               	movlw	1
  6109  0AD0                     u5135:	
  6110  0AD0  1003               	clrc
  6111  0AD1  0CAB               	rrf	___altoft@c+3,f
  6112  0AD2  0CAA               	rrf	___altoft@c+2,f
  6113  0AD3  0CA9               	rrf	___altoft@c+1,f
  6114  0AD4  0CA8               	rrf	___altoft@c,f
  6115  0AD5  3EFF               	addlw	-1
  6116  0AD6  1D03               	skipz
  6117  0AD7  2AD0               	goto	u5135
  6118  0AD8  3001               	movlw	1
  6119  0AD9  00AC               	movwf	??___altoft
  6120  0ADA  082C               	movf	??___altoft,w
  6121  0ADB  07B0               	addwf	___altoft@exp,f
  6122  0ADC  2ACB               	goto	l5370
  6123  0ADD                     l5372:	
  6124  0ADD  0828               	movf	___altoft@c,w
  6125  0ADE  00A0               	movwf	___ftpack@arg
  6126  0ADF  0829               	movf	___altoft@c+1,w
  6127  0AE0  00A1               	movwf	___ftpack@arg+1
  6128  0AE1  082A               	movf	___altoft@c+2,w
  6129  0AE2  00A2               	movwf	___ftpack@arg+2
  6130  0AE3  0830               	movf	___altoft@exp,w
  6131  0AE4  00AC               	movwf	??___altoft
  6132  0AE5  082C               	movf	??___altoft,w
  6133  0AE6  00A3               	movwf	___ftpack@exp
  6134  0AE7  0831               	movf	___altoft@sign,w
  6135  0AE8  00AD               	movwf	??___altoft+1
  6136  0AE9  082D               	movf	??___altoft+1,w
  6137  0AEA  00A4               	movwf	___ftpack@sign
  6138  0AEB  120A  158A  247A   	fcall	___ftpack
  6139  0AEE  1283               	bcf	3,5	;RP0=0, select bank0
  6140  0AEF  1303               	bcf	3,6	;RP1=0, select bank0
  6141  0AF0  0820               	movf	?___ftpack,w
  6142  0AF1  00A8               	movwf	?___altoft
  6143  0AF2  0821               	movf	?___ftpack+1,w
  6144  0AF3  00A9               	movwf	?___altoft+1
  6145  0AF4  0822               	movf	?___ftpack+2,w
  6146  0AF5  00AA               	movwf	?___altoft+2
  6147  0AF6  0008               	return
  6148  0AF7                     __end_of___altoft:	
  6149                           
  6150                           	psect	text37
  6151  173A                     __ptext37:	
  6152 ;; *************** function ___wmul *****************
  6153 ;; Defined at:
  6154 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\wmul.c"
  6155 ;; Parameters:    Size  Location     Type
  6156 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6157 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6158 ;; Auto vars:     Size  Location     Type
  6159 ;;  product         2    4[COMMON] unsigned int 
  6160 ;; Return value:  Size  Location     Type
  6161 ;;                  2    0[BANK0 ] unsigned int 
  6162 ;; Registers used:
  6163 ;;		wreg, status,2, status,0
  6164 ;; Tracked objects:
  6165 ;;		On entry : 0/0
  6166 ;;		On exit  : 0/0
  6167 ;;		Unchanged: 0/0
  6168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6169 ;;      Params:         0       4       0       0       0
  6170 ;;      Locals:         2       0       0       0       0
  6171 ;;      Temps:          0       0       0       0       0
  6172 ;;      Totals:         2       4       0       0       0
  6173 ;;Total ram usage:        6 bytes
  6174 ;; Hardware stack levels used:    1
  6175 ;; Hardware stack levels required when called:    1
  6176 ;; This function calls:
  6177 ;;		Nothing
  6178 ;; This function is called by:
  6179 ;;		_print_freq
  6180 ;;		_tea5767_tuned_freq
  6181 ;; This function uses a non-reentrant model
  6182 ;;
  6183                           
  6184                           
  6185                           ;psect for function ___wmul
  6186  173A                     ___wmul:	
  6187                           
  6188                           ;incstack = 0
  6189                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6190  173A  01F4               	clrf	___wmul@product
  6191  173B  01F5               	clrf	___wmul@product+1
  6192  173C                     l4572:	
  6193  173C  1283               	bcf	3,5	;RP0=0, select bank0
  6194  173D  1303               	bcf	3,6	;RP1=0, select bank0
  6195  173E  1C20               	btfss	___wmul@multiplier,0
  6196  173F  2F46               	goto	l904
  6197  1740  0822               	movf	___wmul@multiplicand,w
  6198  1741  07F4               	addwf	___wmul@product,f
  6199  1742  1803               	skipnc
  6200  1743  0AF5               	incf	___wmul@product+1,f
  6201  1744  0823               	movf	___wmul@multiplicand+1,w
  6202  1745  07F5               	addwf	___wmul@product+1,f
  6203  1746                     l904:	
  6204  1746  3001               	movlw	1
  6205  1747                     u4575:	
  6206  1747  1003               	clrc
  6207  1748  0DA2               	rlf	___wmul@multiplicand,f
  6208  1749  0DA3               	rlf	___wmul@multiplicand+1,f
  6209  174A  3EFF               	addlw	-1
  6210  174B  1D03               	skipz
  6211  174C  2F47               	goto	u4575
  6212  174D  3001               	movlw	1
  6213  174E                     u4585:	
  6214  174E  1003               	clrc
  6215  174F  0CA1               	rrf	___wmul@multiplier+1,f
  6216  1750  0CA0               	rrf	___wmul@multiplier,f
  6217  1751  3EFF               	addlw	-1
  6218  1752  1D03               	skipz
  6219  1753  2F4E               	goto	u4585
  6220  1754  0821               	movf	___wmul@multiplier+1,w
  6221  1755  0420               	iorwf	___wmul@multiplier,w
  6222  1756  1D03               	skipz
  6223  1757  2F3C               	goto	l4572
  6224  1758  0875               	movf	___wmul@product+1,w
  6225  1759  01A1               	clrf	?___wmul+1
  6226  175A  07A1               	addwf	?___wmul+1,f
  6227  175B  0874               	movf	___wmul@product,w
  6228  175C  01A0               	clrf	?___wmul
  6229  175D  07A0               	addwf	?___wmul,f
  6230  175E  0008               	return
  6231  175F                     __end_of___wmul:	
  6232                           
  6233                           	psect	text38
  6234  17D3                     __ptext38:	
  6235 ;; *************** function _hd44780_printdecimal *****************
  6236 ;; Defined at:
  6237 ;;		line 176 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\hd44780.c"
  6238 ;; Parameters:    Size  Location     Type
  6239 ;;  i               2   29[BANK0 ] int 
  6240 ;;  d               2   31[BANK0 ] int 
  6241 ;;  loc             1   33[BANK0 ] unsigned char 
  6242 ;; Auto vars:     Size  Location     Type
  6243 ;;		None
  6244 ;; Return value:  Size  Location     Type
  6245 ;;		None               void
  6246 ;; Registers used:
  6247 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6248 ;; Tracked objects:
  6249 ;;		On entry : 0/0
  6250 ;;		On exit  : 0/0
  6251 ;;		Unchanged: 0/0
  6252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6253 ;;      Params:         0       5       0       0       0
  6254 ;;      Locals:         0       0       0       0       0
  6255 ;;      Temps:          0       1       0       0       0
  6256 ;;      Totals:         0       6       0       0       0
  6257 ;;Total ram usage:        6 bytes
  6258 ;; Hardware stack levels used:    1
  6259 ;; Hardware stack levels required when called:    5
  6260 ;; This function calls:
  6261 ;;		_hd44780_printstr
  6262 ;;		_sprintf
  6263 ;; This function is called by:
  6264 ;;		_print_freq
  6265 ;; This function uses a non-reentrant model
  6266 ;;
  6267                           
  6268                           
  6269                           ;psect for function _hd44780_printdecimal
  6270  17D3                     _hd44780_printdecimal:	
  6271                           
  6272                           ;hd44780.c: 182: if(d < 0){
  6273                           
  6274                           ;incstack = 0
  6275                           ; Regs used in _hd44780_printdecimal: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  6276  17D3  1283               	bcf	3,5	;RP0=0, select bank0
  6277  17D4  1303               	bcf	3,6	;RP1=0, select bank0
  6278  17D5  1FC0               	btfss	hd44780_printdecimal@d+1,7
  6279  17D6  2FDC               	goto	l3806
  6280                           
  6281                           ;hd44780.c: 183: d = -d;
  6282  17D7  09BF               	comf	hd44780_printdecimal@d,f
  6283  17D8  09C0               	comf	hd44780_printdecimal@d+1,f
  6284  17D9  0ABF               	incf	hd44780_printdecimal@d,f
  6285  17DA  1903               	skipnz
  6286  17DB  0AC0               	incf	hd44780_printdecimal@d+1,f
  6287  17DC                     l3806:	
  6288                           
  6289                           ;hd44780.c: 184: }
  6290                           ;hd44780.c: 186: sprintf(buff, "%d.%d", i, d);
  6291  17DC  3074               	movlw	(STR_9-__stringbase)& (0+255)
  6292  17DD  00C2               	movwf	??_hd44780_printdecimal
  6293  17DE  0842               	movf	??_hd44780_printdecimal,w
  6294  17DF  00AC               	movwf	sprintf@f
  6295  17E0  083E               	movf	hd44780_printdecimal@i+1,w
  6296  17E1  01AE               	clrf	?_sprintf+2
  6297  17E2  07AE               	addwf	?_sprintf+2,f
  6298  17E3  083D               	movf	hd44780_printdecimal@i,w
  6299  17E4  01AD               	clrf	?_sprintf+1
  6300  17E5  07AD               	addwf	?_sprintf+1,f
  6301  17E6  0840               	movf	hd44780_printdecimal@d+1,w
  6302  17E7  01B0               	clrf	?_sprintf+4
  6303  17E8  07B0               	addwf	?_sprintf+4,f
  6304  17E9  083F               	movf	hd44780_printdecimal@d,w
  6305  17EA  01AF               	clrf	?_sprintf+3
  6306  17EB  07AF               	addwf	?_sprintf+3,f
  6307  17EC  30E8               	movlw	_buff& (0+255)
  6308  17ED  120A  118A  2472   	fcall	_sprintf
      +       160A  118A         
  6309                           
  6310                           ;hd44780.c: 188: hd44780_printstr( &buff, loc );
  6311  17F2  30E8               	movlw	_buff& (0+255)
  6312  17F3  1283               	bcf	3,5	;RP0=0, select bank0
  6313  17F4  1303               	bcf	3,6	;RP1=0, select bank0
  6314  17F5  00A3               	movwf	hd44780_printstr@dta
  6315  17F6  3000               	movlw	0
  6316  17F7  00A4               	movwf	hd44780_printstr@dta+1
  6317  17F8  0841               	movf	hd44780_printdecimal@loc,w
  6318  17F9  00C2               	movwf	??_hd44780_printdecimal
  6319  17FA  0842               	movf	??_hd44780_printdecimal,w
  6320  17FB  00A5               	movwf	hd44780_printstr@loc
  6321  17FC  120A  158A  2235   	fcall	_hd44780_printstr
  6322  17FF  0008               	return
  6323  1800                     __end_of_hd44780_printdecimal:	
  6324                           
  6325                           	psect	text39
  6326  0472                     __ptext39:	
  6327 ;; *************** function _sprintf *****************
  6328 ;; Defined at:
  6329 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\doprnt.c"
  6330 ;; Parameters:    Size  Location     Type
  6331 ;;  sp              1    wreg     PTR unsigned char 
  6332 ;;		 -> buff(5), 
  6333 ;;  f               1   12[BANK0 ] PTR const unsigned char 
  6334 ;;		 -> STR_9(6), STR_8(3), 
  6335 ;; Auto vars:     Size  Location     Type
  6336 ;;  sp              1   27[BANK0 ] PTR unsigned char 
  6337 ;;		 -> buff(5), 
  6338 ;;  _val            4   23[BANK0 ] struct .
  6339 ;;  c               1   28[BANK0 ] char 
  6340 ;;  prec            1   22[BANK0 ] char 
  6341 ;;  flag            1   21[BANK0 ] unsigned char 
  6342 ;;  ap              1   20[BANK0 ] PTR void [1]
  6343 ;;		 -> ?_sprintf(2), 
  6344 ;; Return value:  Size  Location     Type
  6345 ;;                  2   12[BANK0 ] int 
  6346 ;; Registers used:
  6347 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6348 ;; Tracked objects:
  6349 ;;		On entry : 0/0
  6350 ;;		On exit  : 0/0
  6351 ;;		Unchanged: 0/0
  6352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6353 ;;      Params:         0       5       0       0       0
  6354 ;;      Locals:         0       9       0       0       0
  6355 ;;      Temps:          0       3       0       0       0
  6356 ;;      Totals:         0      17       0       0       0
  6357 ;;Total ram usage:       17 bytes
  6358 ;; Hardware stack levels used:    1
  6359 ;; Hardware stack levels required when called:    2
  6360 ;; This function calls:
  6361 ;;		___lwdiv
  6362 ;;		___lwmod
  6363 ;; This function is called by:
  6364 ;;		_hd44780_printint
  6365 ;;		_hd44780_printdecimal
  6366 ;; This function uses a non-reentrant model
  6367 ;;
  6368                           
  6369                           
  6370                           ;psect for function _sprintf
  6371  0472                     _sprintf:	
  6372                           
  6373                           ;incstack = 0
  6374                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6375                           ;sprintf@sp stored from wreg
  6376  0472  1283               	bcf	3,5	;RP0=0, select bank0
  6377  0473  1303               	bcf	3,6	;RP1=0, select bank0
  6378  0474  00BB               	movwf	sprintf@sp
  6379                           
  6380                           ;doprnt.c: 494: va_list ap;
  6381                           ;doprnt.c: 499: signed char c;
  6382                           ;doprnt.c: 506: signed char prec;
  6383                           ;doprnt.c: 508: unsigned char flag;
  6384                           ;doprnt.c: 527: union {
  6385                           ;doprnt.c: 528: unsigned int _val;
  6386                           ;doprnt.c: 529: struct {
  6387                           ;doprnt.c: 530: const char * _cp;
  6388                           ;doprnt.c: 531: unsigned _len;
  6389                           ;doprnt.c: 532: } _str;
  6390                           ;doprnt.c: 533: } _val;
  6391                           ;doprnt.c: 542: *ap = __va_start();
  6392  0475  302D               	movlw	(?_sprintf+1)& (0+255)
  6393  0476  00B1               	movwf	??_sprintf
  6394  0477  0831               	movf	??_sprintf,w
  6395  0478  00B4               	movwf	sprintf@ap
  6396  0479                     l4182:	
  6397                           ;doprnt.c: 545: while(c = *f++) {
  6398                           
  6399  0479  3001               	movlw	1
  6400  047A  07AC               	addwf	sprintf@f,f
  6401  047B  30FF               	movlw	-1
  6402  047C  072C               	addwf	sprintf@f,w
  6403  047D  0084               	movwf	4
  6404  047E  120A  158A  200A   	fcall	stringdir
      +       120A  118A         
  6405  0483  00B1               	movwf	??_sprintf
  6406  0484  0831               	movf	??_sprintf,w
  6407  0485  00BC               	movwf	sprintf@c
  6408  0486  08BC               	movf	sprintf@c,f
  6409  0487  1903               	btfsc	3,2
  6410  0488  2D48               	goto	l4184
  6411                           
  6412                           ;doprnt.c: 547: if(c != '%')
  6413  0489  083C               	movf	sprintf@c,w
  6414  048A  3A25               	xorlw	37
  6415  048B  1903               	skipnz
  6416  048C  2C99               	goto	l4138
  6417                           
  6418                           ;doprnt.c: 549: {
  6419                           ;doprnt.c: 550: ((*sp++ = (c)));
  6420  048D  083C               	movf	sprintf@c,w
  6421  048E  00B1               	movwf	??_sprintf
  6422  048F  083B               	movf	sprintf@sp,w
  6423  0490  0084               	movwf	4
  6424  0491  0831               	movf	??_sprintf,w
  6425  0492  1383               	bcf	3,7	;select IRP bank0
  6426  0493  0080               	movwf	0
  6427  0494  3001               	movlw	1
  6428  0495  00B1               	movwf	??_sprintf
  6429  0496  0831               	movf	??_sprintf,w
  6430  0497  07BB               	addwf	sprintf@sp,f
  6431                           
  6432                           ;doprnt.c: 551: continue;
  6433  0498  2C79               	goto	l4182
  6434  0499                     l4138:	
  6435                           
  6436                           ;doprnt.c: 552: }
  6437                           ;doprnt.c: 557: flag = 0;
  6438  0499  01B5               	clrf	sprintf@flag
  6439                           
  6440                           ;doprnt.c: 831: }
  6441                           
  6442                           ;doprnt.c: 822: continue;
  6443                           
  6444                           ;doprnt.c: 811: default:
  6445                           
  6446                           ;doprnt.c: 707: case 'i':
  6447                           ;doprnt.c: 708: break;
  6448                           
  6449                           ;doprnt.c: 706: case 'd':
  6450                           
  6451                           ;doprnt.c: 647: goto alldone;
  6452                           
  6453                           ;doprnt.c: 646: case 0:
  6454                           
  6455                           ;doprnt.c: 644: switch(c = *f++) {
  6456  049A  3001               	movlw	1
  6457  049B  07AC               	addwf	sprintf@f,f
  6458  049C  30FF               	movlw	-1
  6459  049D  072C               	addwf	sprintf@f,w
  6460  049E  0084               	movwf	4
  6461  049F  120A  158A  200A   	fcall	stringdir
      +       120A  118A         
  6462  04A4  00BC               	movwf	sprintf@c
  6463                           
  6464                           ; Switch size 1, requested type "space"
  6465                           ; Number of cases is 3, Range of values is 0 to 105
  6466                           ; switch strategies available:
  6467                           ; Name         Instructions Cycles
  6468                           ; simple_byte           10     6 (average)
  6469                           ; jumptable            260     6 (fixed)
  6470                           ;	Chosen strategy is simple_byte
  6471  04A5  3A00               	xorlw	0	; case 0
  6472  04A6  1903               	skipnz
  6473  04A7  2D48               	goto	l4184
  6474  04A8  3A64               	xorlw	100	; case 100
  6475  04A9  1903               	skipnz
  6476  04AA  2CAF               	goto	l4144
  6477  04AB  3A0D               	xorlw	13	; case 105
  6478  04AC  1903               	skipnz
  6479  04AD  2CAF               	goto	l4144
  6480  04AE  2C79               	goto	l4182
  6481  04AF                     l4144:	
  6482                           
  6483                           ;doprnt.c: 1262: {
  6484                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6485  04AF  0834               	movf	sprintf@ap,w
  6486  04B0  0084               	movwf	4
  6487  04B1  1383               	bcf	3,7	;select IRP bank0
  6488  04B2  0800               	movf	0,w
  6489  04B3  00B7               	movwf	sprintf@_val
  6490  04B4  0A84               	incf	4,f
  6491  04B5  0800               	movf	0,w
  6492  04B6  00B8               	movwf	sprintf@_val+1
  6493  04B7  3002               	movlw	2
  6494  04B8  00B1               	movwf	??_sprintf
  6495  04B9  0831               	movf	??_sprintf,w
  6496  04BA  07B4               	addwf	sprintf@ap,f
  6497                           
  6498                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  6499  04BB  1FB8               	btfss	sprintf@_val+1,7
  6500  04BC  2CC6               	goto	l4154
  6501                           
  6502                           ;doprnt.c: 1271: flag |= 0x03;
  6503  04BD  3003               	movlw	3
  6504  04BE  00B1               	movwf	??_sprintf
  6505  04BF  0831               	movf	??_sprintf,w
  6506  04C0  04B5               	iorwf	sprintf@flag,f
  6507                           
  6508                           ;doprnt.c: 1272: _val._val = -_val._val;
  6509  04C1  09B7               	comf	sprintf@_val,f
  6510  04C2  09B8               	comf	sprintf@_val+1,f
  6511  04C3  0AB7               	incf	sprintf@_val,f
  6512  04C4  1903               	skipnz
  6513  04C5  0AB8               	incf	sprintf@_val+1,f
  6514  04C6                     l4154:	
  6515                           
  6516                           ;doprnt.c: 1273: }
  6517                           ;doprnt.c: 1275: }
  6518                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6519  04C6  01BC               	clrf	sprintf@c
  6520  04C7  0ABC               	incf	sprintf@c,f
  6521  04C8  083C               	movf	sprintf@c,w
  6522  04C9  3A05               	xorlw	5
  6523  04CA  1903               	btfsc	3,2
  6524  04CB  2CED               	goto	l4166
  6525  04CC                     l4158:	
  6526                           
  6527                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  6528  04CC  083C               	movf	sprintf@c,w
  6529  04CD  00B1               	movwf	??_sprintf
  6530  04CE  0731               	addwf	??_sprintf,w
  6531  04CF  3E01               	addlw	low (_dpowers-__stringbase)
  6532  04D0  0084               	movwf	4
  6533  04D1  120A  158A  200A   	fcall	stringdir
      +       120A  118A         
  6534  04D6  00B2               	movwf	??_sprintf+1
  6535  04D7  120A  158A  200A   	fcall	stringdir
      +       120A  118A         
  6536  04DC  00B3               	movwf	??_sprintf+2
  6537  04DD  0833               	movf	??_sprintf+2,w
  6538  04DE  0238               	subwf	sprintf@_val+1,w
  6539  04DF  1D03               	skipz
  6540  04E0  2CE3               	goto	u3565
  6541  04E1  0832               	movf	??_sprintf+1,w
  6542  04E2  0237               	subwf	sprintf@_val,w
  6543  04E3                     u3565:	
  6544  04E3  1C03               	btfss	3,0
  6545  04E4  2CED               	goto	l4166
  6546                           
  6547                           ;doprnt.c: 1316: break;
  6548  04E5  3001               	movlw	1
  6549  04E6  00B1               	movwf	??_sprintf
  6550  04E7  0831               	movf	??_sprintf,w
  6551  04E8  07BC               	addwf	sprintf@c,f
  6552  04E9  083C               	movf	sprintf@c,w
  6553  04EA  3A05               	xorlw	5
  6554  04EB  1D03               	skipz
  6555  04EC  2CCC               	goto	l4158
  6556  04ED                     l4166:	
  6557                           
  6558                           ;doprnt.c: 1431: {
  6559                           ;doprnt.c: 1447: if(flag & 0x03)
  6560  04ED  0835               	movf	sprintf@flag,w
  6561  04EE  3903               	andlw	3
  6562  04EF  1903               	btfsc	3,2
  6563  04F0  2CFC               	goto	l4172
  6564                           
  6565                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  6566  04F1  302D               	movlw	45
  6567  04F2  00B1               	movwf	??_sprintf
  6568  04F3  083B               	movf	sprintf@sp,w
  6569  04F4  0084               	movwf	4
  6570  04F5  0831               	movf	??_sprintf,w
  6571  04F6  1383               	bcf	3,7	;select IRP bank0
  6572  04F7  0080               	movwf	0
  6573  04F8  3001               	movlw	1
  6574  04F9  00B1               	movwf	??_sprintf
  6575  04FA  0831               	movf	??_sprintf,w
  6576  04FB  07BB               	addwf	sprintf@sp,f
  6577  04FC                     l4172:	
  6578                           
  6579                           ;doprnt.c: 1478: }
  6580                           ;doprnt.c: 1481: prec = c;
  6581  04FC  083C               	movf	sprintf@c,w
  6582  04FD  00B1               	movwf	??_sprintf
  6583  04FE  0831               	movf	??_sprintf,w
  6584  04FF  00B6               	movwf	sprintf@prec
  6585  0500                     l4180:	
  6586                           ;doprnt.c: 1483: while(prec--) {
  6587                           
  6588  0500  30FF               	movlw	-1
  6589  0501  00B1               	movwf	??_sprintf
  6590  0502  0831               	movf	??_sprintf,w
  6591  0503  07B6               	addwf	sprintf@prec,f
  6592  0504  0836               	movf	sprintf@prec,w
  6593  0505  3AFF               	xorlw	-1
  6594  0506  1903               	btfsc	3,2
  6595  0507  2C79               	goto	l4182
  6596                           
  6597                           ;doprnt.c: 1487: {
  6598                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  6599  0508  300A               	movlw	10
  6600  0509  00A7               	movwf	___lwmod@divisor
  6601  050A  3000               	movlw	0
  6602  050B  00A8               	movwf	___lwmod@divisor+1
  6603  050C  0836               	movf	sprintf@prec,w
  6604  050D  00B1               	movwf	??_sprintf
  6605  050E  0731               	addwf	??_sprintf,w
  6606  050F  3E01               	addlw	low (_dpowers-__stringbase)
  6607  0510  0084               	movwf	4
  6608  0511  120A  158A  200A   	fcall	stringdir
      +       120A  118A         
  6609  0516  00A0               	movwf	___lwdiv@divisor
  6610  0517  120A  158A  200A   	fcall	stringdir
      +       120A  118A         
  6611  051C  00A1               	movwf	___lwdiv@divisor+1
  6612  051D  0838               	movf	sprintf@_val+1,w
  6613  051E  01A3               	clrf	___lwdiv@dividend+1
  6614  051F  07A3               	addwf	___lwdiv@dividend+1,f
  6615  0520  0837               	movf	sprintf@_val,w
  6616  0521  01A2               	clrf	___lwdiv@dividend
  6617  0522  07A2               	addwf	___lwdiv@dividend,f
  6618  0523  120A  158A  2275   	fcall	___lwdiv
      +       120A  118A         
  6619  0528  1283               	bcf	3,5	;RP0=0, select bank0
  6620  0529  1303               	bcf	3,6	;RP1=0, select bank0
  6621  052A  0821               	movf	?___lwdiv+1,w
  6622  052B  01AA               	clrf	___lwmod@dividend+1
  6623  052C  07AA               	addwf	___lwmod@dividend+1,f
  6624  052D  0820               	movf	?___lwdiv,w
  6625  052E  01A9               	clrf	___lwmod@dividend
  6626  052F  07A9               	addwf	___lwmod@dividend,f
  6627  0530  120A  158A  2098   	fcall	___lwmod
      +       120A  118A         
  6628  0535  1283               	bcf	3,5	;RP0=0, select bank0
  6629  0536  1303               	bcf	3,6	;RP1=0, select bank0
  6630  0537  0827               	movf	?___lwmod,w
  6631  0538  3E30               	addlw	48
  6632  0539  00B2               	movwf	??_sprintf+1
  6633  053A  0832               	movf	??_sprintf+1,w
  6634  053B  00BC               	movwf	sprintf@c
  6635                           
  6636                           ;doprnt.c: 1532: }
  6637                           ;doprnt.c: 1533: ((*sp++ = (c)));
  6638  053C  083C               	movf	sprintf@c,w
  6639  053D  00B1               	movwf	??_sprintf
  6640  053E  083B               	movf	sprintf@sp,w
  6641  053F  0084               	movwf	4
  6642  0540  0831               	movf	??_sprintf,w
  6643  0541  1383               	bcf	3,7	;select IRP bank0
  6644  0542  0080               	movwf	0
  6645  0543  3001               	movlw	1
  6646  0544  00B1               	movwf	??_sprintf
  6647  0545  0831               	movf	??_sprintf,w
  6648  0546  07BB               	addwf	sprintf@sp,f
  6649  0547  2D00               	goto	l4180
  6650  0548                     l4184:	
  6651                           ;doprnt.c: 1534: }
  6652                           ;doprnt.c: 1542: }
  6653                           ;doprnt.c: 1544: alldone:
  6654                           
  6655                           
  6656                           ;doprnt.c: 1547: *sp = 0;
  6657  0548  083B               	movf	sprintf@sp,w
  6658  0549  0084               	movwf	4
  6659  054A  1383               	bcf	3,7	;select IRP bank0
  6660  054B  0180               	clrf	0
  6661  054C  0008               	return
  6662  054D                     __end_of_sprintf:	
  6663                           ;doprnt.c: 1549: return 0;
  6664                           ;	Return value of _sprintf is never used
  6665                           
  6666                           
  6667                           	psect	text40
  6668  0898                     __ptext40:	
  6669 ;; *************** function ___lwmod *****************
  6670 ;; Defined at:
  6671 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\lwmod.c"
  6672 ;; Parameters:    Size  Location     Type
  6673 ;;  divisor         2    7[BANK0 ] unsigned int 
  6674 ;;  dividend        2    9[BANK0 ] unsigned int 
  6675 ;; Auto vars:     Size  Location     Type
  6676 ;;  counter         1   11[BANK0 ] unsigned char 
  6677 ;; Return value:  Size  Location     Type
  6678 ;;                  2    7[BANK0 ] unsigned int 
  6679 ;; Registers used:
  6680 ;;		wreg, status,2, status,0
  6681 ;; Tracked objects:
  6682 ;;		On entry : 0/0
  6683 ;;		On exit  : 0/0
  6684 ;;		Unchanged: 0/0
  6685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6686 ;;      Params:         0       4       0       0       0
  6687 ;;      Locals:         0       1       0       0       0
  6688 ;;      Temps:          1       0       0       0       0
  6689 ;;      Totals:         1       5       0       0       0
  6690 ;;Total ram usage:        6 bytes
  6691 ;; Hardware stack levels used:    1
  6692 ;; Hardware stack levels required when called:    1
  6693 ;; This function calls:
  6694 ;;		Nothing
  6695 ;; This function is called by:
  6696 ;;		_sprintf
  6697 ;; This function uses a non-reentrant model
  6698 ;;
  6699                           
  6700                           
  6701                           ;psect for function ___lwmod
  6702  0898                     ___lwmod:	
  6703                           
  6704                           ;incstack = 0
  6705                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  6706  0898  1283               	bcf	3,5	;RP0=0, select bank0
  6707  0899  1303               	bcf	3,6	;RP1=0, select bank0
  6708  089A  0828               	movf	___lwmod@divisor+1,w
  6709  089B  0427               	iorwf	___lwmod@divisor,w
  6710  089C  1903               	skipnz
  6711  089D  28C7               	goto	l3550
  6712  089E  01AB               	clrf	___lwmod@counter
  6713  089F  0AAB               	incf	___lwmod@counter,f
  6714  08A0                     l3540:	
  6715  08A0  1BA8               	btfsc	___lwmod@divisor+1,7
  6716  08A1  28AE               	goto	l3542
  6717  08A2  3001               	movlw	1
  6718  08A3                     u3085:	
  6719  08A3  1003               	clrc
  6720  08A4  0DA7               	rlf	___lwmod@divisor,f
  6721  08A5  0DA8               	rlf	___lwmod@divisor+1,f
  6722  08A6  3EFF               	addlw	-1
  6723  08A7  1D03               	skipz
  6724  08A8  28A3               	goto	u3085
  6725  08A9  3001               	movlw	1
  6726  08AA  00F5               	movwf	??___lwmod
  6727  08AB  0875               	movf	??___lwmod,w
  6728  08AC  07AB               	addwf	___lwmod@counter,f
  6729  08AD  28A0               	goto	l3540
  6730  08AE                     l3542:	
  6731  08AE  0828               	movf	___lwmod@divisor+1,w
  6732  08AF  022A               	subwf	___lwmod@dividend+1,w
  6733  08B0  1D03               	skipz
  6734  08B1  28B4               	goto	u3105
  6735  08B2  0827               	movf	___lwmod@divisor,w
  6736  08B3  0229               	subwf	___lwmod@dividend,w
  6737  08B4                     u3105:	
  6738  08B4  1C03               	skipc
  6739  08B5  28BC               	goto	l3546
  6740  08B6  0827               	movf	___lwmod@divisor,w
  6741  08B7  02A9               	subwf	___lwmod@dividend,f
  6742  08B8  0828               	movf	___lwmod@divisor+1,w
  6743  08B9  1C03               	skipc
  6744  08BA  03AA               	decf	___lwmod@dividend+1,f
  6745  08BB  02AA               	subwf	___lwmod@dividend+1,f
  6746  08BC                     l3546:	
  6747  08BC  3001               	movlw	1
  6748  08BD                     u3115:	
  6749  08BD  1003               	clrc
  6750  08BE  0CA8               	rrf	___lwmod@divisor+1,f
  6751  08BF  0CA7               	rrf	___lwmod@divisor,f
  6752  08C0  3EFF               	addlw	-1
  6753  08C1  1D03               	skipz
  6754  08C2  28BD               	goto	u3115
  6755  08C3  3001               	movlw	1
  6756  08C4  02AB               	subwf	___lwmod@counter,f
  6757  08C5  1D03               	btfss	3,2
  6758  08C6  28AE               	goto	l3542
  6759  08C7                     l3550:	
  6760  08C7  082A               	movf	___lwmod@dividend+1,w
  6761  08C8  01A8               	clrf	?___lwmod+1
  6762  08C9  07A8               	addwf	?___lwmod+1,f
  6763  08CA  0829               	movf	___lwmod@dividend,w
  6764  08CB  01A7               	clrf	?___lwmod
  6765  08CC  07A7               	addwf	?___lwmod,f
  6766  08CD  0008               	return
  6767  08CE                     __end_of___lwmod:	
  6768                           
  6769                           	psect	text41
  6770  0A75                     __ptext41:	
  6771 ;; *************** function ___lwdiv *****************
  6772 ;; Defined at:
  6773 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\lwdiv.c"
  6774 ;; Parameters:    Size  Location     Type
  6775 ;;  divisor         2    0[BANK0 ] unsigned int 
  6776 ;;  dividend        2    2[BANK0 ] unsigned int 
  6777 ;; Auto vars:     Size  Location     Type
  6778 ;;  quotient        2    5[BANK0 ] unsigned int 
  6779 ;;  counter         1    4[BANK0 ] unsigned char 
  6780 ;; Return value:  Size  Location     Type
  6781 ;;                  2    0[BANK0 ] unsigned int 
  6782 ;; Registers used:
  6783 ;;		wreg, status,2, status,0
  6784 ;; Tracked objects:
  6785 ;;		On entry : 0/0
  6786 ;;		On exit  : 0/0
  6787 ;;		Unchanged: 0/0
  6788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6789 ;;      Params:         0       4       0       0       0
  6790 ;;      Locals:         0       3       0       0       0
  6791 ;;      Temps:          1       0       0       0       0
  6792 ;;      Totals:         1       7       0       0       0
  6793 ;;Total ram usage:        8 bytes
  6794 ;; Hardware stack levels used:    1
  6795 ;; Hardware stack levels required when called:    1
  6796 ;; This function calls:
  6797 ;;		Nothing
  6798 ;; This function is called by:
  6799 ;;		_sprintf
  6800 ;; This function uses a non-reentrant model
  6801 ;;
  6802                           
  6803                           
  6804                           ;psect for function ___lwdiv
  6805  0A75                     ___lwdiv:	
  6806                           
  6807                           ;incstack = 0
  6808                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6809  0A75  1283               	bcf	3,5	;RP0=0, select bank0
  6810  0A76  1303               	bcf	3,6	;RP1=0, select bank0
  6811  0A77  01A5               	clrf	___lwdiv@quotient
  6812  0A78  01A6               	clrf	___lwdiv@quotient+1
  6813  0A79  0821               	movf	___lwdiv@divisor+1,w
  6814  0A7A  0420               	iorwf	___lwdiv@divisor,w
  6815  0A7B  1903               	skipnz
  6816  0A7C  2AAE               	goto	l4566
  6817  0A7D  01A4               	clrf	___lwdiv@counter
  6818  0A7E  0AA4               	incf	___lwdiv@counter,f
  6819  0A7F                     l4554:	
  6820  0A7F  1BA1               	btfsc	___lwdiv@divisor+1,7
  6821  0A80  2A8D               	goto	l4556
  6822  0A81  3001               	movlw	1
  6823  0A82                     u4505:	
  6824  0A82  1003               	clrc
  6825  0A83  0DA0               	rlf	___lwdiv@divisor,f
  6826  0A84  0DA1               	rlf	___lwdiv@divisor+1,f
  6827  0A85  3EFF               	addlw	-1
  6828  0A86  1D03               	skipz
  6829  0A87  2A82               	goto	u4505
  6830  0A88  3001               	movlw	1
  6831  0A89  00F4               	movwf	??___lwdiv
  6832  0A8A  0874               	movf	??___lwdiv,w
  6833  0A8B  07A4               	addwf	___lwdiv@counter,f
  6834  0A8C  2A7F               	goto	l4554
  6835  0A8D                     l4556:	
  6836  0A8D  3001               	movlw	1
  6837  0A8E                     u4525:	
  6838  0A8E  1003               	clrc
  6839  0A8F  0DA5               	rlf	___lwdiv@quotient,f
  6840  0A90  0DA6               	rlf	___lwdiv@quotient+1,f
  6841  0A91  3EFF               	addlw	-1
  6842  0A92  1D03               	skipz
  6843  0A93  2A8E               	goto	u4525
  6844  0A94  0821               	movf	___lwdiv@divisor+1,w
  6845  0A95  0223               	subwf	___lwdiv@dividend+1,w
  6846  0A96  1D03               	skipz
  6847  0A97  2A9A               	goto	u4535
  6848  0A98  0820               	movf	___lwdiv@divisor,w
  6849  0A99  0222               	subwf	___lwdiv@dividend,w
  6850  0A9A                     u4535:	
  6851  0A9A  1C03               	skipc
  6852  0A9B  2AA3               	goto	l4562
  6853  0A9C  0820               	movf	___lwdiv@divisor,w
  6854  0A9D  02A2               	subwf	___lwdiv@dividend,f
  6855  0A9E  0821               	movf	___lwdiv@divisor+1,w
  6856  0A9F  1C03               	skipc
  6857  0AA0  03A3               	decf	___lwdiv@dividend+1,f
  6858  0AA1  02A3               	subwf	___lwdiv@dividend+1,f
  6859  0AA2  1425               	bsf	___lwdiv@quotient,0
  6860  0AA3                     l4562:	
  6861  0AA3  3001               	movlw	1
  6862  0AA4                     u4545:	
  6863  0AA4  1003               	clrc
  6864  0AA5  0CA1               	rrf	___lwdiv@divisor+1,f
  6865  0AA6  0CA0               	rrf	___lwdiv@divisor,f
  6866  0AA7  3EFF               	addlw	-1
  6867  0AA8  1D03               	skipz
  6868  0AA9  2AA4               	goto	u4545
  6869  0AAA  3001               	movlw	1
  6870  0AAB  02A4               	subwf	___lwdiv@counter,f
  6871  0AAC  1D03               	btfss	3,2
  6872  0AAD  2A8D               	goto	l4556
  6873  0AAE                     l4566:	
  6874  0AAE  0826               	movf	___lwdiv@quotient+1,w
  6875  0AAF  01A1               	clrf	?___lwdiv+1
  6876  0AB0  07A1               	addwf	?___lwdiv+1,f
  6877  0AB1  0825               	movf	___lwdiv@quotient,w
  6878  0AB2  01A0               	clrf	?___lwdiv
  6879  0AB3  07A0               	addwf	?___lwdiv,f
  6880  0AB4  0008               	return
  6881  0AB5                     __end_of___lwdiv:	
  6882                           
  6883                           	psect	text42
  6884  0A35                     __ptext42:	
  6885 ;; *************** function _hd44780_printstr *****************
  6886 ;; Defined at:
  6887 ;;		line 98 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\hd44780.c"
  6888 ;; Parameters:    Size  Location     Type
  6889 ;;  dta             2    3[BANK0 ] PTR unsigned char 
  6890 ;;		 -> buff(5), STR_2(2), STR_1(2), 
  6891 ;;  loc             1    5[BANK0 ] unsigned char 
  6892 ;; Auto vars:     Size  Location     Type
  6893 ;;		None
  6894 ;; Return value:  Size  Location     Type
  6895 ;;		None               void
  6896 ;; Registers used:
  6897 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6898 ;; Tracked objects:
  6899 ;;		On entry : 0/0
  6900 ;;		On exit  : 0/0
  6901 ;;		Unchanged: 0/0
  6902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6903 ;;      Params:         0       3       0       0       0
  6904 ;;      Locals:         0       0       0       0       0
  6905 ;;      Temps:          0       0       0       0       0
  6906 ;;      Totals:         0       3       0       0       0
  6907 ;;Total ram usage:        3 bytes
  6908 ;; Hardware stack levels used:    1
  6909 ;; Hardware stack levels required when called:    4
  6910 ;; This function calls:
  6911 ;;		_hd44780_char
  6912 ;;		_hd44780_newline
  6913 ;;		_hd44780_write
  6914 ;; This function is called by:
  6915 ;;		_print_mode
  6916 ;;		_hd44780_printint
  6917 ;;		_hd44780_printdecimal
  6918 ;; This function uses a non-reentrant model
  6919 ;;
  6920                           
  6921                           
  6922                           ;psect for function _hd44780_printstr
  6923  0A35                     _hd44780_printstr:	
  6924                           
  6925                           ;hd44780.c: 102: hd44780_write( 0x80 | loc );
  6926                           
  6927                           ;incstack = 0
  6928                           ; Regs used in _hd44780_printstr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6929  0A35  1283               	bcf	3,5	;RP0=0, select bank0
  6930  0A36  1303               	bcf	3,6	;RP1=0, select bank0
  6931  0A37  0825               	movf	hd44780_printstr@loc,w
  6932  0A38  3880               	iorlw	128
  6933  0A39  120A  158A  2106   	fcall	_hd44780_write
      +       120A  158A         
  6934  0A3E                     l3840:	
  6935                           ;hd44780.c: 104: while( *dta != '\0' ){
  6936                           
  6937  0A3E  1283               	bcf	3,5	;RP0=0, select bank0
  6938  0A3F  1303               	bcf	3,6	;RP1=0, select bank0
  6939  0A40  0824               	movf	hd44780_printstr@dta+1,w
  6940  0A41  00FF               	movwf	127
  6941  0A42  0823               	movf	hd44780_printstr@dta,w
  6942  0A43  0084               	movwf	4
  6943  0A44  120A  158A  2000   	fcall	stringtab
      +       120A  158A         
  6944  0A49  3800               	iorlw	0
  6945  0A4A  1903               	btfsc	3,2
  6946  0A4B  0008               	return
  6947                           
  6948                           ;hd44780.c: 105: if( *dta != '\n' ){
  6949  0A4C  1283               	bcf	3,5	;RP0=0, select bank0
  6950  0A4D  1303               	bcf	3,6	;RP1=0, select bank0
  6951  0A4E  0824               	movf	hd44780_printstr@dta+1,w
  6952  0A4F  00FF               	movwf	127
  6953  0A50  0823               	movf	hd44780_printstr@dta,w
  6954  0A51  0084               	movwf	4
  6955  0A52  120A  158A  2000   	fcall	stringtab
      +       120A  158A         
  6956  0A57  3A0A               	xorlw	10
  6957  0A58  1903               	skipnz
  6958  0A59  2A69               	goto	l3836
  6959                           
  6960                           ;hd44780.c: 106: hd44780_char( *dta );
  6961  0A5A  0824               	movf	hd44780_printstr@dta+1,w
  6962  0A5B  00FF               	movwf	127
  6963  0A5C  0823               	movf	hd44780_printstr@dta,w
  6964  0A5D  0084               	movwf	4
  6965  0A5E  120A  158A  2000   	fcall	stringtab
      +       120A  158A         
  6966  0A63  160A  118A  266D   	fcall	_hd44780_char
      +       120A  158A         
  6967                           
  6968                           ;hd44780.c: 107: }else{
  6969  0A68  2A6E               	goto	l3838
  6970  0A69                     l3836:	
  6971                           
  6972                           ;hd44780.c: 109: hd44780_newline();
  6973  0A69  160A  118A  25FE   	fcall	_hd44780_newline
      +       120A  158A         
  6974  0A6E                     l3838:	
  6975                           
  6976                           ;hd44780.c: 110: }
  6977                           ;hd44780.c: 112: dta++;
  6978  0A6E  3001               	movlw	1
  6979  0A6F  1283               	bcf	3,5	;RP0=0, select bank0
  6980  0A70  1303               	bcf	3,6	;RP1=0, select bank0
  6981  0A71  07A3               	addwf	hd44780_printstr@dta,f
  6982  0A72  1803               	skipnc
  6983  0A73  0AA4               	incf	hd44780_printstr@dta+1,f
  6984  0A74  2A3E               	goto	l3840
  6985  0A75                     __end_of_hd44780_printstr:	
  6986                           
  6987                           	psect	text43
  6988  15FE                     __ptext43:	
  6989 ;; *************** function _hd44780_newline *****************
  6990 ;; Defined at:
  6991 ;;		line 124 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\hd44780.c"
  6992 ;; Parameters:    Size  Location     Type
  6993 ;;		None
  6994 ;; Auto vars:     Size  Location     Type
  6995 ;;		None
  6996 ;; Return value:  Size  Location     Type
  6997 ;;		None               void
  6998 ;; Registers used:
  6999 ;;		wreg, status,2, status,0, pclath, cstack
  7000 ;; Tracked objects:
  7001 ;;		On entry : 0/0
  7002 ;;		On exit  : 0/0
  7003 ;;		Unchanged: 0/0
  7004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7005 ;;      Params:         0       0       0       0       0
  7006 ;;      Locals:         0       0       0       0       0
  7007 ;;      Temps:          0       0       0       0       0
  7008 ;;      Totals:         0       0       0       0       0
  7009 ;;Total ram usage:        0 bytes
  7010 ;; Hardware stack levels used:    1
  7011 ;; Hardware stack levels required when called:    3
  7012 ;; This function calls:
  7013 ;;		_hd44780_write
  7014 ;; This function is called by:
  7015 ;;		_hd44780_printstr
  7016 ;; This function uses a non-reentrant model
  7017 ;;
  7018                           
  7019                           
  7020                           ;psect for function _hd44780_newline
  7021  15FE                     _hd44780_newline:	
  7022                           
  7023                           ;hd44780.c: 126: hd44780_write( 0xC0 );
  7024                           
  7025                           ;incstack = 0
  7026                           ; Regs used in _hd44780_newline: [wreg+status,2+status,0+pclath+cstack]
  7027  15FE  30C0               	movlw	192
  7028  15FF  120A  158A  2106   	fcall	_hd44780_write
  7029  1602  0008               	return
  7030  1603                     __end_of_hd44780_newline:	
  7031                           
  7032                           	psect	text44
  7033  17AA                     __ptext44:	
  7034 ;; *************** function _hd44780_block_erase *****************
  7035 ;; Defined at:
  7036 ;;		line 219 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\hd44780.c"
  7037 ;; Parameters:    Size  Location     Type
  7038 ;;  start_loc       1    wreg     unsigned char 
  7039 ;;  length          1    3[BANK0 ] unsigned char 
  7040 ;; Auto vars:     Size  Location     Type
  7041 ;;  start_loc       1    5[BANK0 ] unsigned char 
  7042 ;;  i               2    6[BANK0 ] int 
  7043 ;; Return value:  Size  Location     Type
  7044 ;;		None               void
  7045 ;; Registers used:
  7046 ;;		wreg, status,2, status,0, pclath, cstack
  7047 ;; Tracked objects:
  7048 ;;		On entry : 0/0
  7049 ;;		On exit  : 0/0
  7050 ;;		Unchanged: 0/0
  7051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7052 ;;      Params:         0       1       0       0       0
  7053 ;;      Locals:         0       3       0       0       0
  7054 ;;      Temps:          0       1       0       0       0
  7055 ;;      Totals:         0       5       0       0       0
  7056 ;;Total ram usage:        5 bytes
  7057 ;; Hardware stack levels used:    1
  7058 ;; Hardware stack levels required when called:    4
  7059 ;; This function calls:
  7060 ;;		_hd44780_char
  7061 ;;		_hd44780_write
  7062 ;; This function is called by:
  7063 ;;		_print_freq
  7064 ;;		_print_signal_level
  7065 ;; This function uses a non-reentrant model
  7066 ;;
  7067                           
  7068                           
  7069                           ;psect for function _hd44780_block_erase
  7070  17AA                     _hd44780_block_erase:	
  7071                           
  7072                           ;incstack = 0
  7073                           ; Regs used in _hd44780_block_erase: [wreg+status,2+status,0+pclath+cstack]
  7074                           ;hd44780_block_erase@start_loc stored from wreg
  7075  17AA  1283               	bcf	3,5	;RP0=0, select bank0
  7076  17AB  1303               	bcf	3,6	;RP1=0, select bank0
  7077  17AC  00A5               	movwf	hd44780_block_erase@start_loc
  7078                           
  7079                           ;hd44780.c: 221: int i;
  7080                           ;hd44780.c: 224: for(i=0;i<length;i++){
  7081  17AD  01A6               	clrf	hd44780_block_erase@i
  7082  17AE  01A7               	clrf	hd44780_block_erase@i+1
  7083  17AF                     l3800:	
  7084  17AF  0827               	movf	hd44780_block_erase@i+1,w
  7085  17B0  3A80               	xorlw	128
  7086  17B1  00A4               	movwf	??_hd44780_block_erase
  7087  17B2  3080               	movlw	128
  7088  17B3  0224               	subwf	??_hd44780_block_erase,w
  7089  17B4  1D03               	skipz
  7090  17B5  2FB8               	goto	u3255
  7091  17B6  0823               	movf	hd44780_block_erase@length,w
  7092  17B7  0226               	subwf	hd44780_block_erase@i,w
  7093  17B8                     u3255:	
  7094  17B8  1803               	btfsc	3,0
  7095  17B9  0008               	return
  7096                           
  7097                           ;hd44780.c: 225: hd44780_write( 0x80 | (start_loc+i) );
  7098  17BA  1283               	bcf	3,5	;RP0=0, select bank0
  7099  17BB  1303               	bcf	3,6	;RP1=0, select bank0
  7100  17BC  0826               	movf	hd44780_block_erase@i,w
  7101  17BD  0725               	addwf	hd44780_block_erase@start_loc,w
  7102  17BE  3880               	iorlw	128
  7103  17BF  120A  158A  2106   	fcall	_hd44780_write
      +       160A  118A         
  7104                           
  7105                           ;hd44780.c: 227: hd44780_char( ' ' );
  7106  17C4  3020               	movlw	32
  7107  17C5  160A  118A  266D   	fcall	_hd44780_char
      +       160A  118A         
  7108  17CA  3001               	movlw	1
  7109  17CB  1283               	bcf	3,5	;RP0=0, select bank0
  7110  17CC  1303               	bcf	3,6	;RP1=0, select bank0
  7111  17CD  07A6               	addwf	hd44780_block_erase@i,f
  7112  17CE  1803               	skipnc
  7113  17CF  0AA7               	incf	hd44780_block_erase@i+1,f
  7114  17D0  3000               	movlw	0
  7115  17D1  07A7               	addwf	hd44780_block_erase@i+1,f
  7116  17D2  2FAF               	goto	l3800
  7117  17D3                     __end_of_hd44780_block_erase:	
  7118                           
  7119                           	psect	text45
  7120  166D                     __ptext45:	
  7121 ;; *************** function _hd44780_char *****************
  7122 ;; Defined at:
  7123 ;;		line 72 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\hd44780.c"
  7124 ;; Parameters:    Size  Location     Type
  7125 ;;  bt              1    wreg     unsigned char 
  7126 ;; Auto vars:     Size  Location     Type
  7127 ;;  bt              1    2[BANK0 ] unsigned char 
  7128 ;; Return value:  Size  Location     Type
  7129 ;;		None               void
  7130 ;; Registers used:
  7131 ;;		wreg, status,2, status,0, pclath, cstack
  7132 ;; Tracked objects:
  7133 ;;		On entry : 0/0
  7134 ;;		On exit  : 0/0
  7135 ;;		Unchanged: 0/0
  7136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7137 ;;      Params:         0       0       0       0       0
  7138 ;;      Locals:         0       1       0       0       0
  7139 ;;      Temps:          0       0       0       0       0
  7140 ;;      Totals:         0       1       0       0       0
  7141 ;;Total ram usage:        1 bytes
  7142 ;; Hardware stack levels used:    1
  7143 ;; Hardware stack levels required when called:    3
  7144 ;; This function calls:
  7145 ;;		_hd44780_write
  7146 ;; This function is called by:
  7147 ;;		_hd44780_printstr
  7148 ;;		_hd44780_block_erase
  7149 ;;		_hd44780_printchr
  7150 ;; This function uses a non-reentrant model
  7151 ;;
  7152                           
  7153                           
  7154                           ;psect for function _hd44780_char
  7155  166D                     _hd44780_char:	
  7156                           
  7157                           ;incstack = 0
  7158                           ; Regs used in _hd44780_char: [wreg+status,2+status,0+pclath+cstack]
  7159                           ;hd44780_char@bt stored from wreg
  7160  166D  1283               	bcf	3,5	;RP0=0, select bank0
  7161  166E  1303               	bcf	3,6	;RP1=0, select bank0
  7162  166F  00A2               	movwf	hd44780_char@bt
  7163                           
  7164                           ;hd44780.c: 75: RE2 = 1;
  7165  1670  1509               	bsf	9,2	;volatile
  7166                           
  7167                           ;hd44780.c: 76: rs_flag = 1;
  7168  1671  1479               	bsf	_rs_flag/(0+8),_rs_flag& (0+7)
  7169                           
  7170                           ;hd44780.c: 77: hd44780_write( bt );
  7171  1672  0822               	movf	hd44780_char@bt,w
  7172  1673  120A  158A  2106   	fcall	_hd44780_write
  7173                           
  7174                           ;hd44780.c: 78: RE2 = 0;
  7175  1676  1283               	bcf	3,5	;RP0=0, select bank0
  7176  1677  1303               	bcf	3,6	;RP1=0, select bank0
  7177  1678  1109               	bcf	9,2	;volatile
  7178                           
  7179                           ;hd44780.c: 79: rs_flag = 0;
  7180  1679  1079               	bcf	_rs_flag/(0+8),_rs_flag& (0+7)
  7181  167A  0008               	return
  7182  167B                     __end_of_hd44780_char:	
  7183                           
  7184                           	psect	text46
  7185  0AF7                     __ptext46:	
  7186 ;; *************** function ___awdiv *****************
  7187 ;; Defined at:
  7188 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\awdiv.c"
  7189 ;; Parameters:    Size  Location     Type
  7190 ;;  divisor         2    0[BANK0 ] int 
  7191 ;;  dividend        2    2[BANK0 ] int 
  7192 ;; Auto vars:     Size  Location     Type
  7193 ;;  quotient        2    6[BANK0 ] int 
  7194 ;;  sign            1    5[BANK0 ] unsigned char 
  7195 ;;  counter         1    4[BANK0 ] unsigned char 
  7196 ;; Return value:  Size  Location     Type
  7197 ;;                  2    0[BANK0 ] int 
  7198 ;; Registers used:
  7199 ;;		wreg, status,2, status,0
  7200 ;; Tracked objects:
  7201 ;;		On entry : 0/0
  7202 ;;		On exit  : 0/0
  7203 ;;		Unchanged: 0/0
  7204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7205 ;;      Params:         0       4       0       0       0
  7206 ;;      Locals:         0       4       0       0       0
  7207 ;;      Temps:          1       0       0       0       0
  7208 ;;      Totals:         1       8       0       0       0
  7209 ;;Total ram usage:        9 bytes
  7210 ;; Hardware stack levels used:    1
  7211 ;; Hardware stack levels required when called:    1
  7212 ;; This function calls:
  7213 ;;		Nothing
  7214 ;; This function is called by:
  7215 ;;		_print_freq
  7216 ;; This function uses a non-reentrant model
  7217 ;;
  7218                           
  7219                           
  7220                           ;psect for function ___awdiv
  7221  0AF7                     ___awdiv:	
  7222                           
  7223                           ;incstack = 0
  7224                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7225  0AF7  1283               	bcf	3,5	;RP0=0, select bank0
  7226  0AF8  1303               	bcf	3,6	;RP1=0, select bank0
  7227  0AF9  01A5               	clrf	___awdiv@sign
  7228  0AFA  1FA1               	btfss	___awdiv@divisor+1,7
  7229  0AFB  2B03               	goto	l4244
  7230  0AFC  09A0               	comf	___awdiv@divisor,f
  7231  0AFD  09A1               	comf	___awdiv@divisor+1,f
  7232  0AFE  0AA0               	incf	___awdiv@divisor,f
  7233  0AFF  1903               	skipnz
  7234  0B00  0AA1               	incf	___awdiv@divisor+1,f
  7235  0B01  01A5               	clrf	___awdiv@sign
  7236  0B02  0AA5               	incf	___awdiv@sign,f
  7237  0B03                     l4244:	
  7238  0B03  1FA3               	btfss	___awdiv@dividend+1,7
  7239  0B04  2B0E               	goto	l4250
  7240  0B05  09A2               	comf	___awdiv@dividend,f
  7241  0B06  09A3               	comf	___awdiv@dividend+1,f
  7242  0B07  0AA2               	incf	___awdiv@dividend,f
  7243  0B08  1903               	skipnz
  7244  0B09  0AA3               	incf	___awdiv@dividend+1,f
  7245  0B0A  3001               	movlw	1
  7246  0B0B  00F4               	movwf	??___awdiv
  7247  0B0C  0874               	movf	??___awdiv,w
  7248  0B0D  06A5               	xorwf	___awdiv@sign,f
  7249  0B0E                     l4250:	
  7250  0B0E  01A6               	clrf	___awdiv@quotient
  7251  0B0F  01A7               	clrf	___awdiv@quotient+1
  7252  0B10  0821               	movf	___awdiv@divisor+1,w
  7253  0B11  0420               	iorwf	___awdiv@divisor,w
  7254  0B12  1903               	skipnz
  7255  0B13  2B45               	goto	l4272
  7256  0B14  01A4               	clrf	___awdiv@counter
  7257  0B15  0AA4               	incf	___awdiv@counter,f
  7258  0B16                     l4260:	
  7259  0B16  1BA1               	btfsc	___awdiv@divisor+1,7
  7260  0B17  2B24               	goto	l4262
  7261  0B18  3001               	movlw	1
  7262  0B19                     u3785:	
  7263  0B19  1003               	clrc
  7264  0B1A  0DA0               	rlf	___awdiv@divisor,f
  7265  0B1B  0DA1               	rlf	___awdiv@divisor+1,f
  7266  0B1C  3EFF               	addlw	-1
  7267  0B1D  1D03               	skipz
  7268  0B1E  2B19               	goto	u3785
  7269  0B1F  3001               	movlw	1
  7270  0B20  00F4               	movwf	??___awdiv
  7271  0B21  0874               	movf	??___awdiv,w
  7272  0B22  07A4               	addwf	___awdiv@counter,f
  7273  0B23  2B16               	goto	l4260
  7274  0B24                     l4262:	
  7275  0B24  3001               	movlw	1
  7276  0B25                     u3805:	
  7277  0B25  1003               	clrc
  7278  0B26  0DA6               	rlf	___awdiv@quotient,f
  7279  0B27  0DA7               	rlf	___awdiv@quotient+1,f
  7280  0B28  3EFF               	addlw	-1
  7281  0B29  1D03               	skipz
  7282  0B2A  2B25               	goto	u3805
  7283  0B2B  0821               	movf	___awdiv@divisor+1,w
  7284  0B2C  0223               	subwf	___awdiv@dividend+1,w
  7285  0B2D  1D03               	skipz
  7286  0B2E  2B31               	goto	u3815
  7287  0B2F  0820               	movf	___awdiv@divisor,w
  7288  0B30  0222               	subwf	___awdiv@dividend,w
  7289  0B31                     u3815:	
  7290  0B31  1C03               	skipc
  7291  0B32  2B3A               	goto	l4268
  7292  0B33  0820               	movf	___awdiv@divisor,w
  7293  0B34  02A2               	subwf	___awdiv@dividend,f
  7294  0B35  0821               	movf	___awdiv@divisor+1,w
  7295  0B36  1C03               	skipc
  7296  0B37  03A3               	decf	___awdiv@dividend+1,f
  7297  0B38  02A3               	subwf	___awdiv@dividend+1,f
  7298  0B39  1426               	bsf	___awdiv@quotient,0
  7299  0B3A                     l4268:	
  7300  0B3A  3001               	movlw	1
  7301  0B3B                     u3825:	
  7302  0B3B  1003               	clrc
  7303  0B3C  0CA1               	rrf	___awdiv@divisor+1,f
  7304  0B3D  0CA0               	rrf	___awdiv@divisor,f
  7305  0B3E  3EFF               	addlw	-1
  7306  0B3F  1D03               	skipz
  7307  0B40  2B3B               	goto	u3825
  7308  0B41  3001               	movlw	1
  7309  0B42  02A4               	subwf	___awdiv@counter,f
  7310  0B43  1D03               	btfss	3,2
  7311  0B44  2B24               	goto	l4262
  7312  0B45                     l4272:	
  7313  0B45  0825               	movf	___awdiv@sign,w
  7314  0B46  1903               	btfsc	3,2
  7315  0B47  2B4D               	goto	l4276
  7316  0B48  09A6               	comf	___awdiv@quotient,f
  7317  0B49  09A7               	comf	___awdiv@quotient+1,f
  7318  0B4A  0AA6               	incf	___awdiv@quotient,f
  7319  0B4B  1903               	skipnz
  7320  0B4C  0AA7               	incf	___awdiv@quotient+1,f
  7321  0B4D                     l4276:	
  7322  0B4D  0827               	movf	___awdiv@quotient+1,w
  7323  0B4E  01A1               	clrf	?___awdiv+1
  7324  0B4F  07A1               	addwf	?___awdiv+1,f
  7325  0B50  0826               	movf	___awdiv@quotient,w
  7326  0B51  01A0               	clrf	?___awdiv
  7327  0B52  07A0               	addwf	?___awdiv,f
  7328  0B53  0008               	return
  7329  0B54                     __end_of___awdiv:	
  7330                           
  7331                           	psect	text47
  7332  0941                     __ptext47:	
  7333 ;; *************** function _init *****************
  7334 ;; Defined at:
  7335 ;;		line 28 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\main.c"
  7336 ;; Parameters:    Size  Location     Type
  7337 ;;		None
  7338 ;; Auto vars:     Size  Location     Type
  7339 ;;		None
  7340 ;; Return value:  Size  Location     Type
  7341 ;;		None               void
  7342 ;; Registers used:
  7343 ;;		wreg, status,2, status,0, pclath, cstack
  7344 ;; Tracked objects:
  7345 ;;		On entry : 0/0
  7346 ;;		On exit  : 0/0
  7347 ;;		Unchanged: 0/0
  7348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7349 ;;      Params:         0       0       0       0       0
  7350 ;;      Locals:         0       0       0       0       0
  7351 ;;      Temps:          0       2       0       0       0
  7352 ;;      Totals:         0       2       0       0       0
  7353 ;;Total ram usage:        2 bytes
  7354 ;; Hardware stack levels used:    1
  7355 ;; Hardware stack levels required when called:    4
  7356 ;; This function calls:
  7357 ;;		_hd44780_init
  7358 ;;		_serial_init
  7359 ;; This function is called by:
  7360 ;;		_main
  7361 ;; This function uses a non-reentrant model
  7362 ;;
  7363                           
  7364                           
  7365                           ;psect for function _init
  7366  0941                     _init:	
  7367                           
  7368                           ;main.c: 36: ADCON1 = 0x06;
  7369                           
  7370                           ;incstack = 0
  7371                           ; Regs used in _init: [wreg+status,2+status,0+pclath+cstack]
  7372  0941  3006               	movlw	6
  7373  0942  1683               	bsf	3,5	;RP0=1, select bank1
  7374  0943  1303               	bcf	3,6	;RP1=0, select bank1
  7375  0944  009F               	movwf	31	;volatile
  7376                           
  7377                           ;main.c: 38: TRISA = 0x00;
  7378  0945  0185               	clrf	5	;volatile
  7379                           
  7380                           ;main.c: 40: TRISE = 0x00;
  7381  0946  0189               	clrf	9	;volatile
  7382                           
  7383                           ;main.c: 42: PORTA = 0x00;
  7384  0947  1283               	bcf	3,5	;RP0=0, select bank0
  7385  0948  1303               	bcf	3,6	;RP1=0, select bank0
  7386  0949  0185               	clrf	5	;volatile
  7387                           
  7388                           ;main.c: 43: PORTE = 0x00;
  7389  094A  0189               	clrf	9	;volatile
  7390                           
  7391                           ;main.c: 50: TRISCbits.TRISC3 = 1;
  7392  094B  1683               	bsf	3,5	;RP0=1, select bank1
  7393  094C  1303               	bcf	3,6	;RP1=0, select bank1
  7394  094D  1587               	bsf	7,3	;volatile
  7395                           
  7396                           ;main.c: 51: TRISCbits.TRISC4 = 1;
  7397  094E  1607               	bsf	7,4	;volatile
  7398                           
  7399                           ;main.c: 52: PORTC = 0x00;
  7400  094F  1283               	bcf	3,5	;RP0=0, select bank0
  7401  0950  1303               	bcf	3,6	;RP1=0, select bank0
  7402  0951  0187               	clrf	7	;volatile
  7403                           
  7404                           ;main.c: 55: TRISB = 0x02;
  7405  0952  3002               	movlw	2
  7406  0953  1683               	bsf	3,5	;RP0=1, select bank1
  7407  0954  1303               	bcf	3,6	;RP1=0, select bank1
  7408  0955  0086               	movwf	6	;volatile
  7409                           
  7410                           ;main.c: 56: PORTB = 0x00;
  7411  0956  1283               	bcf	3,5	;RP0=0, select bank0
  7412  0957  1303               	bcf	3,6	;RP1=0, select bank0
  7413  0958  0186               	clrf	6	;volatile
  7414                           
  7415                           ;main.c: 58: SSPCON = 0b00101000;
  7416  0959  3028               	movlw	40
  7417  095A  0094               	movwf	20	;volatile
  7418                           
  7419                           ;main.c: 59: SSPSTAT = 0b10000000;
  7420  095B  3080               	movlw	128
  7421  095C  1683               	bsf	3,5	;RP0=1, select bank1
  7422  095D  1303               	bcf	3,6	;RP1=0, select bank1
  7423  095E  0094               	movwf	20	;volatile
  7424                           
  7425                           ;main.c: 60: SSPADD = (20000 / (4 * 100)) - 1;
  7426  095F  3031               	movlw	49
  7427  0960  0093               	movwf	19	;volatile
  7428                           
  7429                           ;main.c: 62: _delay((unsigned long)((10)*(20000000/4000.0)));
  7430  0961  3041               	movlw	65
  7431  0962  1283               	bcf	3,5	;RP0=0, select bank0
  7432  0963  1303               	bcf	3,6	;RP1=0, select bank0
  7433  0964  00A5               	movwf	??_init+1
  7434  0965  30EE               	movlw	238
  7435  0966  00A4               	movwf	??_init
  7436  0967                     u5197:	
  7437  0967  0BA4               	decfsz	??_init,f
  7438  0968  2967               	goto	u5197
  7439  0969  0BA5               	decfsz	??_init+1,f
  7440  096A  2967               	goto	u5197
  7441  096B  0000               	nop
  7442                           
  7443                           ;main.c: 64: OPTION_REGbits.T0CS = 0;
  7444  096C  1683               	bsf	3,5	;RP0=1, select bank1
  7445  096D  1303               	bcf	3,6	;RP1=0, select bank1
  7446  096E  1281               	bcf	1,5	;volatile
  7447                           
  7448                           ;main.c: 65: OPTION_REGbits.T0SE = 0;
  7449  096F  1201               	bcf	1,4	;volatile
  7450                           
  7451                           ;main.c: 66: OPTION_REGbits.PSA = 0;
  7452  0970  1181               	bcf	1,3	;volatile
  7453                           
  7454                           ;main.c: 69: OPTION_REGbits.PS0 = 0;
  7455  0971  1001               	bcf	1,0	;volatile
  7456                           
  7457                           ;main.c: 70: OPTION_REGbits.PS1 = 0;
  7458  0972  1081               	bcf	1,1	;volatile
  7459                           
  7460                           ;main.c: 71: OPTION_REGbits.PS2 = 1;
  7461  0973  1501               	bsf	1,2	;volatile
  7462                           
  7463                           ;main.c: 73: serial_init();
  7464  0974  120A  118A  27ED   	fcall	_serial_init
      +       120A  158A         
  7465                           
  7466                           ;main.c: 74: hd44780_init();
  7467  0979  120A  158A  2414   	fcall	_hd44780_init
  7468  097C  0008               	return
  7469  097D                     __end_of_init:	
  7470                           
  7471                           	psect	text48
  7472  07ED                     __ptext48:	
  7473 ;; *************** function _serial_init *****************
  7474 ;; Defined at:
  7475 ;;		line 5 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\serial.c"
  7476 ;; Parameters:    Size  Location     Type
  7477 ;;		None
  7478 ;; Auto vars:     Size  Location     Type
  7479 ;;		None
  7480 ;; Return value:  Size  Location     Type
  7481 ;;		None               void
  7482 ;; Registers used:
  7483 ;;		None
  7484 ;; Tracked objects:
  7485 ;;		On entry : 0/0
  7486 ;;		On exit  : 0/0
  7487 ;;		Unchanged: 0/0
  7488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7489 ;;      Params:         0       0       0       0       0
  7490 ;;      Locals:         0       0       0       0       0
  7491 ;;      Temps:          0       0       0       0       0
  7492 ;;      Totals:         0       0       0       0       0
  7493 ;;Total ram usage:        0 bytes
  7494 ;; Hardware stack levels used:    1
  7495 ;; Hardware stack levels required when called:    1
  7496 ;; This function calls:
  7497 ;;		Nothing
  7498 ;; This function is called by:
  7499 ;;		_init
  7500 ;; This function uses a non-reentrant model
  7501 ;;
  7502                           
  7503                           
  7504                           ;psect for function _serial_init
  7505  07ED                     _serial_init:	
  7506                           
  7507                           ;incstack = 0
  7508                           ; Regs used in _serial_init: []
  7509  07ED  1303 1283          	banksel	25	;# 
  7510  07EF  0199               	clrf	25	;# 
  7511  07F0  1303 1283          	banksel	26	;# 
  7512  07F2  019A               	clrf	26	;# 
  7513  07F3  1303 1683          	banksel	153	;# 
  7514  07F5  3040               	movlw	64	;# 
  7515  07F6  0099               	movwf	153	;# 
  7516  07F7  1303 1683          	banksel	152	;# 
  7517  07F9  3024               	movlw	36	;# 
  7518  07FA  0098               	movwf	152	;# 
  7519  07FB  1303 1283          	banksel	24	;# 
  7520  07FD  3090               	movlw	144	;# 
  7521  07FE  0098               	movwf	24	;# 
  7522  07FF  0008               	return
  7523  0800                     __end_of_serial_init:	
  7524                           
  7525                           	psect	text49
  7526  0C14                     __ptext49:	
  7527 ;; *************** function _hd44780_init *****************
  7528 ;; Defined at:
  7529 ;;		line 12 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\hd44780.c"
  7530 ;; Parameters:    Size  Location     Type
  7531 ;;		None
  7532 ;; Auto vars:     Size  Location     Type
  7533 ;;		None
  7534 ;; Return value:  Size  Location     Type
  7535 ;;		None               void
  7536 ;; Registers used:
  7537 ;;		wreg, status,2, status,0, pclath, cstack
  7538 ;; Tracked objects:
  7539 ;;		On entry : 0/0
  7540 ;;		On exit  : 0/0
  7541 ;;		Unchanged: 0/0
  7542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7543 ;;      Params:         0       0       0       0       0
  7544 ;;      Locals:         0       0       0       0       0
  7545 ;;      Temps:          0       2       0       0       0
  7546 ;;      Totals:         0       2       0       0       0
  7547 ;;Total ram usage:        2 bytes
  7548 ;; Hardware stack levels used:    1
  7549 ;; Hardware stack levels required when called:    3
  7550 ;; This function calls:
  7551 ;;		_hd44780_busy
  7552 ;;		_hd44780_pulse
  7553 ;;		_hd44780_write
  7554 ;; This function is called by:
  7555 ;;		_init
  7556 ;; This function uses a non-reentrant model
  7557 ;;
  7558                           
  7559                           
  7560                           ;psect for function _hd44780_init
  7561  0C14                     _hd44780_init:	
  7562                           
  7563                           ;hd44780.c: 15: TRISA = 0x00;
  7564                           
  7565                           ;incstack = 0
  7566                           ; Regs used in _hd44780_init: [wreg+status,2+status,0+pclath+cstack]
  7567  0C14  1683               	bsf	3,5	;RP0=1, select bank1
  7568  0C15  1303               	bcf	3,6	;RP1=0, select bank1
  7569  0C16  0185               	clrf	5	;volatile
  7570                           
  7571                           ;hd44780.c: 16: PORTA = 0x00;
  7572  0C17  1283               	bcf	3,5	;RP0=0, select bank0
  7573  0C18  1303               	bcf	3,6	;RP1=0, select bank0
  7574  0C19  0185               	clrf	5	;volatile
  7575                           
  7576                           ;hd44780.c: 18: _delay((unsigned long)((20)*(20000000/4000.0)));
  7577  0C1A  3082               	movlw	130
  7578  0C1B  00A3               	movwf	??_hd44780_init+1
  7579  0C1C  30DD               	movlw	221
  7580  0C1D  00A2               	movwf	??_hd44780_init
  7581  0C1E                     u5207:	
  7582  0C1E  0BA2               	decfsz	??_hd44780_init,f
  7583  0C1F  2C1E               	goto	u5207
  7584  0C20  0BA3               	decfsz	??_hd44780_init+1,f
  7585  0C21  2C1E               	goto	u5207
  7586  0C22  2C23               	nop2
  7587                           
  7588                           ;hd44780.c: 19: PORTA = 0b00000011;
  7589  0C23  3003               	movlw	3
  7590  0C24  1283               	bcf	3,5	;RP0=0, select bank0
  7591  0C25  1303               	bcf	3,6	;RP1=0, select bank0
  7592  0C26  0085               	movwf	5	;volatile
  7593                           
  7594                           ;hd44780.c: 20: hd44780_pulse();
  7595  0C27  160A  118A  2622   	fcall	_hd44780_pulse
      +       120A  158A         
  7596                           
  7597                           ;hd44780.c: 21: _delay((unsigned long)((5)*(20000000/4000.0)));
  7598  0C2C  3021               	movlw	33
  7599  0C2D  1283               	bcf	3,5	;RP0=0, select bank0
  7600  0C2E  1303               	bcf	3,6	;RP1=0, select bank0
  7601  0C2F  00A3               	movwf	??_hd44780_init+1
  7602  0C30  3076               	movlw	118
  7603  0C31  00A2               	movwf	??_hd44780_init
  7604  0C32                     u5217:	
  7605  0C32  0BA2               	decfsz	??_hd44780_init,f
  7606  0C33  2C32               	goto	u5217
  7607  0C34  0BA3               	decfsz	??_hd44780_init+1,f
  7608  0C35  2C32               	goto	u5217
  7609  0C36  0000               	nop
  7610                           
  7611                           ;hd44780.c: 22: PORTA = 0b00000011;
  7612  0C37  3003               	movlw	3
  7613  0C38  1283               	bcf	3,5	;RP0=0, select bank0
  7614  0C39  1303               	bcf	3,6	;RP1=0, select bank0
  7615  0C3A  0085               	movwf	5	;volatile
  7616                           
  7617                           ;hd44780.c: 23: hd44780_pulse();
  7618  0C3B  160A  118A  2622   	fcall	_hd44780_pulse
      +       120A  158A         
  7619                           
  7620                           ;hd44780.c: 24: _delay((unsigned long)((120)*(20000000/4000000.0)));
  7621  0C40  30C7               	movlw	199
  7622  0C41  1283               	bcf	3,5	;RP0=0, select bank0
  7623  0C42  1303               	bcf	3,6	;RP1=0, select bank0
  7624  0C43  00A2               	movwf	??_hd44780_init
  7625  0C44                     u5227:	
  7626  0C44  0BA2               	decfsz	??_hd44780_init,f
  7627  0C45  2C44               	goto	u5227
  7628  0C46  2C47               	nop2	;nop
  7629                           
  7630                           ;hd44780.c: 25: PORTA = 0b00000011;
  7631  0C47  3003               	movlw	3
  7632  0C48  1283               	bcf	3,5	;RP0=0, select bank0
  7633  0C49  1303               	bcf	3,6	;RP1=0, select bank0
  7634  0C4A  0085               	movwf	5	;volatile
  7635                           
  7636                           ;hd44780.c: 26: hd44780_pulse();
  7637  0C4B  160A  118A  2622   	fcall	_hd44780_pulse
      +       120A  158A         
  7638                           
  7639                           ;hd44780.c: 28: hd44780_busy();
  7640  0C50  160A  118A  26AD   	fcall	_hd44780_busy
      +       120A  158A         
  7641                           
  7642                           ;hd44780.c: 30: PORTA = 0b00000010;
  7643  0C55  3002               	movlw	2
  7644  0C56  1283               	bcf	3,5	;RP0=0, select bank0
  7645  0C57  1303               	bcf	3,6	;RP1=0, select bank0
  7646  0C58  0085               	movwf	5	;volatile
  7647                           
  7648                           ;hd44780.c: 31: hd44780_pulse();
  7649  0C59  160A  118A  2622   	fcall	_hd44780_pulse
      +       120A  158A         
  7650                           
  7651                           ;hd44780.c: 33: hd44780_busy();
  7652  0C5E  160A  118A  26AD   	fcall	_hd44780_busy
      +       120A  158A         
  7653                           
  7654                           ;hd44780.c: 36: hd44780_write( 0b00101000 );
  7655  0C63  3028               	movlw	40
  7656  0C64  120A  158A  2106   	fcall	_hd44780_write
      +       120A  158A         
  7657                           
  7658                           ;hd44780.c: 38: hd44780_write( 0b00001100 );
  7659  0C69  300C               	movlw	12
  7660  0C6A  120A  158A  2106   	fcall	_hd44780_write
      +       120A  158A         
  7661                           
  7662                           ;hd44780.c: 39: hd44780_write( 0b00000001 );
  7663  0C6F  3001               	movlw	1
  7664  0C70  120A  158A  2106   	fcall	_hd44780_write
      +       120A  158A         
  7665                           
  7666                           ;hd44780.c: 40: hd44780_write( 0b00000110 );
  7667  0C75  3006               	movlw	6
  7668  0C76  120A  158A  2106   	fcall	_hd44780_write
  7669  0C79  0008               	return
  7670  0C7A                     __end_of_hd44780_init:	
  7671                           
  7672                           	psect	text50
  7673  0906                     __ptext50:	
  7674 ;; *************** function _hd44780_write *****************
  7675 ;; Defined at:
  7676 ;;		line 43 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\hd44780.c"
  7677 ;; Parameters:    Size  Location     Type
  7678 ;;  bt              1    wreg     unsigned char 
  7679 ;; Auto vars:     Size  Location     Type
  7680 ;;  bt              1    0[BANK0 ] unsigned char 
  7681 ;;  tmp             1    1[BANK0 ] unsigned char 
  7682 ;; Return value:  Size  Location     Type
  7683 ;;		None               void
  7684 ;; Registers used:
  7685 ;;		wreg, status,2, status,0, pclath, cstack
  7686 ;; Tracked objects:
  7687 ;;		On entry : 0/0
  7688 ;;		On exit  : 0/0
  7689 ;;		Unchanged: 0/0
  7690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7691 ;;      Params:         0       0       0       0       0
  7692 ;;      Locals:         0       2       0       0       0
  7693 ;;      Temps:          2       0       0       0       0
  7694 ;;      Totals:         2       2       0       0       0
  7695 ;;Total ram usage:        4 bytes
  7696 ;; Hardware stack levels used:    1
  7697 ;; Hardware stack levels required when called:    2
  7698 ;; This function calls:
  7699 ;;		_hd44780_busy
  7700 ;;		_hd44780_pulse
  7701 ;; This function is called by:
  7702 ;;		_hd44780_init
  7703 ;;		_hd44780_char
  7704 ;;		_hd44780_printstr
  7705 ;;		_hd44780_newline
  7706 ;;		_hd44780_block_erase
  7707 ;;		_hd44780_printchr
  7708 ;;		_hd44780_clear
  7709 ;; This function uses a non-reentrant model
  7710 ;;
  7711                           
  7712                           
  7713                           ;psect for function _hd44780_write
  7714  0906                     _hd44780_write:	
  7715                           
  7716                           ;incstack = 0
  7717                           ; Regs used in _hd44780_write: [wreg+status,2+status,0+pclath+cstack]
  7718                           ;hd44780_write@bt stored from wreg
  7719  0906  1283               	bcf	3,5	;RP0=0, select bank0
  7720  0907  1303               	bcf	3,6	;RP1=0, select bank0
  7721  0908  00A0               	movwf	hd44780_write@bt
  7722                           
  7723                           ;hd44780.c: 45: unsigned char tmp;
  7724                           ;hd44780.c: 47: tmp = bt & 0xF0;
  7725  0909  0820               	movf	hd44780_write@bt,w
  7726  090A  39F0               	andlw	240
  7727  090B  00F4               	movwf	??_hd44780_write
  7728  090C  0874               	movf	??_hd44780_write,w
  7729  090D  00A1               	movwf	hd44780_write@tmp
  7730                           
  7731                           ;hd44780.c: 48: tmp = tmp >> 4;
  7732  090E  0821               	movf	hd44780_write@tmp,w
  7733  090F  00F4               	movwf	??_hd44780_write
  7734  0910  3004               	movlw	4
  7735  0911                     u3505:	
  7736  0911  1003               	clrc
  7737  0912  0CF4               	rrf	??_hd44780_write,f
  7738  0913  3EFF               	addlw	-1
  7739  0914  1D03               	skipz
  7740  0915  2911               	goto	u3505
  7741  0916  0874               	movf	??_hd44780_write,w
  7742  0917  00F5               	movwf	??_hd44780_write+1
  7743  0918  0875               	movf	??_hd44780_write+1,w
  7744  0919  00A1               	movwf	hd44780_write@tmp
  7745                           
  7746                           ;hd44780.c: 50: if(rs_flag == 1){
  7747  091A  1C79               	btfss	_rs_flag/(0+8),_rs_flag& (0+7)
  7748  091B  2921               	goto	l4102
  7749                           
  7750                           ;hd44780.c: 51: tmp = tmp | 0x20;
  7751  091C  0821               	movf	hd44780_write@tmp,w
  7752  091D  3820               	iorlw	32
  7753  091E  00F4               	movwf	??_hd44780_write
  7754  091F  0874               	movf	??_hd44780_write,w
  7755  0920  00A1               	movwf	hd44780_write@tmp
  7756  0921                     l4102:	
  7757                           
  7758                           ;hd44780.c: 52: }
  7759                           ;hd44780.c: 53: PORTA = tmp;
  7760  0921  0821               	movf	hd44780_write@tmp,w
  7761  0922  0085               	movwf	5	;volatile
  7762                           
  7763                           ;hd44780.c: 55: hd44780_pulse();
  7764  0923  160A  118A  2622   	fcall	_hd44780_pulse
      +       120A  158A         
  7765                           
  7766                           ;hd44780.c: 57: tmp = bt & 0x0F;
  7767  0928  1283               	bcf	3,5	;RP0=0, select bank0
  7768  0929  1303               	bcf	3,6	;RP1=0, select bank0
  7769  092A  0820               	movf	hd44780_write@bt,w
  7770  092B  390F               	andlw	15
  7771  092C  00F4               	movwf	??_hd44780_write
  7772  092D  0874               	movf	??_hd44780_write,w
  7773  092E  00A1               	movwf	hd44780_write@tmp
  7774                           
  7775                           ;hd44780.c: 59: if(rs_flag == 1){
  7776  092F  1C79               	btfss	_rs_flag/(0+8),_rs_flag& (0+7)
  7777  0930  2936               	goto	l4112
  7778                           
  7779                           ;hd44780.c: 60: tmp = tmp | 0x20;
  7780  0931  0821               	movf	hd44780_write@tmp,w
  7781  0932  3820               	iorlw	32
  7782  0933  00F4               	movwf	??_hd44780_write
  7783  0934  0874               	movf	??_hd44780_write,w
  7784  0935  00A1               	movwf	hd44780_write@tmp
  7785  0936                     l4112:	
  7786                           
  7787                           ;hd44780.c: 61: }
  7788                           ;hd44780.c: 63: PORTA = tmp;
  7789  0936  0821               	movf	hd44780_write@tmp,w
  7790  0937  0085               	movwf	5	;volatile
  7791                           
  7792                           ;hd44780.c: 65: hd44780_pulse();
  7793  0938  160A  118A  2622   	fcall	_hd44780_pulse
      +       120A  158A         
  7794                           
  7795                           ;hd44780.c: 69: hd44780_busy();
  7796  093D  160A  118A  26AD   	fcall	_hd44780_busy
  7797  0940  0008               	return
  7798  0941                     __end_of_hd44780_write:	
  7799                           
  7800                           	psect	text51
  7801  1622                     __ptext51:	
  7802 ;; *************** function _hd44780_pulse *****************
  7803 ;; Defined at:
  7804 ;;		line 5 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\hd44780.c"
  7805 ;; Parameters:    Size  Location     Type
  7806 ;;		None
  7807 ;; Auto vars:     Size  Location     Type
  7808 ;;		None
  7809 ;; Return value:  Size  Location     Type
  7810 ;;		None               void
  7811 ;; Registers used:
  7812 ;;		None
  7813 ;; Tracked objects:
  7814 ;;		On entry : 0/0
  7815 ;;		On exit  : 0/0
  7816 ;;		Unchanged: 0/0
  7817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7818 ;;      Params:         0       0       0       0       0
  7819 ;;      Locals:         0       0       0       0       0
  7820 ;;      Temps:          0       0       0       0       0
  7821 ;;      Totals:         0       0       0       0       0
  7822 ;;Total ram usage:        0 bytes
  7823 ;; Hardware stack levels used:    1
  7824 ;; Hardware stack levels required when called:    1
  7825 ;; This function calls:
  7826 ;;		Nothing
  7827 ;; This function is called by:
  7828 ;;		_hd44780_init
  7829 ;;		_hd44780_write
  7830 ;; This function uses a non-reentrant model
  7831 ;;
  7832                           
  7833                           
  7834                           ;psect for function _hd44780_pulse
  7835  1622                     _hd44780_pulse:	
  7836                           
  7837                           ;hd44780.c: 7: RE0 = 1;
  7838                           
  7839                           ;incstack = 0
  7840                           ; Regs used in _hd44780_pulse: []
  7841  1622  1283               	bcf	3,5	;RP0=0, select bank0
  7842  1623  1303               	bcf	3,6	;RP1=0, select bank0
  7843  1624  1409               	bsf	9,0	;volatile
  7844                           
  7845                           ;hd44780.c: 8: _delay((unsigned long)((1)*(20000000/4000000.0)));
  7846  1625  2E26               	nop2	;2 cycle nop
  7847  1626  2E27               	nop2	;2 cycle nop
  7848  1627  0000               	nop
  7849                           
  7850                           ;hd44780.c: 9: RE0 = 0;
  7851  1628  1283               	bcf	3,5	;RP0=0, select bank0
  7852  1629  1303               	bcf	3,6	;RP1=0, select bank0
  7853  162A  1009               	bcf	9,0	;volatile
  7854  162B  0008               	return
  7855  162C                     __end_of_hd44780_pulse:	
  7856                           
  7857                           	psect	text52
  7858  16AD                     __ptext52:	
  7859 ;; *************** function _hd44780_busy *****************
  7860 ;; Defined at:
  7861 ;;		line 82 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\hd44780.c"
  7862 ;; Parameters:    Size  Location     Type
  7863 ;;		None
  7864 ;; Auto vars:     Size  Location     Type
  7865 ;;		None
  7866 ;; Return value:  Size  Location     Type
  7867 ;;		None               void
  7868 ;; Registers used:
  7869 ;;		wreg, status,2
  7870 ;; Tracked objects:
  7871 ;;		On entry : 0/0
  7872 ;;		On exit  : 0/0
  7873 ;;		Unchanged: 0/0
  7874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7875 ;;      Params:         0       0       0       0       0
  7876 ;;      Locals:         0       0       0       0       0
  7877 ;;      Temps:          0       0       0       0       0
  7878 ;;      Totals:         0       0       0       0       0
  7879 ;;Total ram usage:        0 bytes
  7880 ;; Hardware stack levels used:    1
  7881 ;; Hardware stack levels required when called:    1
  7882 ;; This function calls:
  7883 ;;		Nothing
  7884 ;; This function is called by:
  7885 ;;		_hd44780_init
  7886 ;;		_hd44780_write
  7887 ;; This function uses a non-reentrant model
  7888 ;;
  7889                           
  7890                           
  7891                           ;psect for function _hd44780_busy
  7892  16AD                     _hd44780_busy:	
  7893                           
  7894                           ;hd44780.c: 84: RE2 = 0;
  7895                           
  7896                           ;incstack = 0
  7897                           ; Regs used in _hd44780_busy: [wreg+status,2]
  7898  16AD  1283               	bcf	3,5	;RP0=0, select bank0
  7899  16AE  1303               	bcf	3,6	;RP1=0, select bank0
  7900  16AF  1109               	bcf	9,2	;volatile
  7901                           
  7902                           ;hd44780.c: 85: rs_flag = 0;
  7903  16B0  1079               	bcf	_rs_flag/(0+8),_rs_flag& (0+7)
  7904                           
  7905                           ;hd44780.c: 86: TRISA = 0x08;
  7906  16B1  3008               	movlw	8
  7907  16B2  1683               	bsf	3,5	;RP0=1, select bank1
  7908  16B3  1303               	bcf	3,6	;RP1=0, select bank1
  7909  16B4  0085               	movwf	5	;volatile
  7910                           
  7911                           ;hd44780.c: 87: RE1 = 1;
  7912  16B5  1283               	bcf	3,5	;RP0=0, select bank0
  7913  16B6  1303               	bcf	3,6	;RP1=0, select bank0
  7914  16B7  1489               	bsf	9,1	;volatile
  7915                           
  7916                           ;hd44780.c: 88: RE0 = 1;
  7917  16B8  1409               	bsf	9,0	;volatile
  7918  16B9                     l366:	
  7919                           ;hd44780.c: 90: while( RA3 == 1 );
  7920                           
  7921  16B9  1985               	btfsc	5,3	;volatile
  7922  16BA  2EB9               	goto	l366
  7923                           
  7924                           ;hd44780.c: 92: RE0 = 0;
  7925  16BB  1009               	bcf	9,0	;volatile
  7926                           
  7927                           ;hd44780.c: 93: RE1 = 0;
  7928  16BC  1089               	bcf	9,1	;volatile
  7929                           
  7930                           ;hd44780.c: 95: TRISA = 0x00;
  7931  16BD  1683               	bsf	3,5	;RP0=1, select bank1
  7932  16BE  1303               	bcf	3,6	;RP1=0, select bank1
  7933  16BF  0185               	clrf	5	;volatile
  7934  16C0  0008               	return
  7935  16C1                     __end_of_hd44780_busy:	
  7936                           
  7937                           	psect	text53
  7938  1715                     __ptext53:	
  7939 ;; *************** function _debounce_lo *****************
  7940 ;; Defined at:
  7941 ;;		line 89 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\main.c"
  7942 ;; Parameters:    Size  Location     Type
  7943 ;;  prt             1    wreg     unsigned char 
  7944 ;; Auto vars:     Size  Location     Type
  7945 ;;  prt             1    0[BANK0 ] unsigned char 
  7946 ;;  count           1    1[BANK0 ] unsigned char 
  7947 ;; Return value:  Size  Location     Type
  7948 ;;                  1    wreg      unsigned char 
  7949 ;; Registers used:
  7950 ;;		wreg, status,2, status,0
  7951 ;; Tracked objects:
  7952 ;;		On entry : 0/0
  7953 ;;		On exit  : 0/0
  7954 ;;		Unchanged: 0/0
  7955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7956 ;;      Params:         0       0       0       0       0
  7957 ;;      Locals:         0       2       0       0       0
  7958 ;;      Temps:          2       0       0       0       0
  7959 ;;      Totals:         2       2       0       0       0
  7960 ;;Total ram usage:        4 bytes
  7961 ;; Hardware stack levels used:    1
  7962 ;; Hardware stack levels required when called:    1
  7963 ;; This function calls:
  7964 ;;		Nothing
  7965 ;; This function is called by:
  7966 ;;		_main
  7967 ;; This function uses a non-reentrant model
  7968 ;;
  7969                           
  7970                           
  7971                           ;psect for function _debounce_lo
  7972  1715                     _debounce_lo:	
  7973                           
  7974                           ;incstack = 0
  7975                           ; Regs used in _debounce_lo: [wreg+status,2+status,0]
  7976                           ;debounce_lo@prt stored from wreg
  7977  1715  1283               	bcf	3,5	;RP0=0, select bank0
  7978  1716  1303               	bcf	3,6	;RP1=0, select bank0
  7979  1717  00A0               	movwf	debounce_lo@prt
  7980                           
  7981                           ;main.c: 91: uint8_t count = 0;
  7982  1718  01A1               	clrf	debounce_lo@count
  7983                           
  7984                           ;main.c: 93: if( !prt ){
  7985  1719  08A0               	movf	debounce_lo@prt,f
  7986  171A  1903               	btfsc	3,2
  7987  171B  2F2B               	goto	l128
  7988  171C  2F38               	goto	l3760
  7989  171D                     l3748:	
  7990                           ;main.c: 94: while( !prt && count < 10 ){
  7991                           
  7992                           
  7993                           ;main.c: 95: _delay((unsigned long)((1)*(20000000/4000.0)));
  7994  171D  3007               	movlw	7
  7995  171E  00F5               	movwf	??_debounce_lo+1
  7996  171F  307D               	movlw	125
  7997  1720  00F4               	movwf	??_debounce_lo
  7998  1721                     u5237:	
  7999  1721  0BF4               	decfsz	??_debounce_lo,f
  8000  1722  2F21               	goto	u5237
  8001  1723  0BF5               	decfsz	??_debounce_lo+1,f
  8002  1724  2F21               	goto	u5237
  8003                           
  8004                           ;main.c: 96: count++;
  8005  1725  3001               	movlw	1
  8006  1726  00F4               	movwf	??_debounce_lo
  8007  1727  0874               	movf	??_debounce_lo,w
  8008  1728  1283               	bcf	3,5	;RP0=0, select bank0
  8009  1729  1303               	bcf	3,6	;RP1=0, select bank0
  8010  172A  07A1               	addwf	debounce_lo@count,f
  8011  172B                     l128:	
  8012  172B  08A0               	movf	debounce_lo@prt,f
  8013  172C  1D03               	skipz
  8014  172D  2F32               	goto	l3754
  8015  172E  300A               	movlw	10
  8016  172F  0221               	subwf	debounce_lo@count,w
  8017  1730  1C03               	skipc
  8018  1731  2F1D               	goto	l3748
  8019  1732                     l3754:	
  8020                           
  8021                           ;main.c: 97: }
  8022                           ;main.c: 98: if( count == 10 )
  8023  1732  0821               	movf	debounce_lo@count,w
  8024  1733  3A0A               	xorlw	10
  8025  1734  1D03               	skipz
  8026  1735  2F38               	goto	l3760
  8027                           
  8028                           ;main.c: 99: return 1;
  8029  1736  3001               	movlw	1
  8030  1737  0008               	return
  8031  1738                     l3760:	
  8032                           
  8033                           ;main.c: 100: }
  8034                           ;main.c: 101: return 0;
  8035  1738  3000               	movlw	0
  8036  1739  0008               	return
  8037  173A                     __end_of_debounce_lo:	
  8038                           
  8039                           	psect	text54
  8040  0622                     __ptext54:	
  8041 ;; *************** function ___ftmul *****************
  8042 ;; Defined at:
  8043 ;;		line 51 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\ftmul.c"
  8044 ;; Parameters:    Size  Location     Type
  8045 ;;  f1              3   45[BANK0 ] float 
  8046 ;;  f2              3   48[BANK0 ] float 
  8047 ;; Auto vars:     Size  Location     Type
  8048 ;;  f3_as_produc    3   68[BANK0 ] unsigned um
  8049 ;;  sign            1   72[BANK0 ] unsigned char 
  8050 ;;  cntr            1   71[BANK0 ] unsigned char 
  8051 ;;  exp             1   67[BANK0 ] unsigned char 
  8052 ;; Return value:  Size  Location     Type
  8053 ;;                  3   45[BANK0 ] float 
  8054 ;; Registers used:
  8055 ;;		wreg, status,2, status,0, pclath, cstack
  8056 ;; Tracked objects:
  8057 ;;		On entry : 0/0
  8058 ;;		On exit  : 0/0
  8059 ;;		Unchanged: 0/0
  8060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8061 ;;      Params:         0       6       0       0       0
  8062 ;;      Locals:         0      18       0       0       0
  8063 ;;      Temps:          0       4       0       0       0
  8064 ;;      Totals:         0      28       0       0       0
  8065 ;;Total ram usage:       28 bytes
  8066 ;; Hardware stack levels used:    1
  8067 ;; Hardware stack levels required when called:    2
  8068 ;; This function calls:
  8069 ;;		___ftpack
  8070 ;; This function is called by:
  8071 ;;		_tea5767_getpll
  8072 ;;		_tea5767_getfreq
  8073 ;;		_tea5767_round_freq
  8074 ;;		_tea5767_tuned_freq
  8075 ;; This function uses a non-reentrant model
  8076 ;;
  8077                           
  8078                           
  8079                           ;psect for function ___ftmul
  8080  0622                     ___ftmul:	
  8081                           
  8082                           ;incstack = 0
  8083                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8084  0622  1283               	bcf	3,5	;RP0=0, select bank0
  8085  0623  1303               	bcf	3,6	;RP1=0, select bank0
  8086  0624  084D               	movf	___ftmul@f1,w
  8087  0625  00D3               	movwf	??___ftmul
  8088  0626  084E               	movf	___ftmul@f1+1,w
  8089  0627  00D4               	movwf	??___ftmul+1
  8090  0628  084F               	movf	___ftmul@f1+2,w
  8091  0629  00D5               	movwf	??___ftmul+2
  8092  062A  1003               	clrc
  8093  062B  0D54               	rlf	??___ftmul+1,w
  8094  062C  0D55               	rlf	??___ftmul+2,w
  8095  062D  00D6               	movwf	??___ftmul+3
  8096  062E  0856               	movf	??___ftmul+3,w
  8097  062F  00E3               	movwf	___ftmul@exp
  8098  0630  08E3               	movf	___ftmul@exp,f
  8099  0631  1D03               	skipz
  8100  0632  2E3A               	goto	l4448
  8101  0633  3000               	movlw	0
  8102  0634  00CD               	movwf	?___ftmul
  8103  0635  3000               	movlw	0
  8104  0636  00CE               	movwf	?___ftmul+1
  8105  0637  3000               	movlw	0
  8106  0638  00CF               	movwf	?___ftmul+2
  8107  0639  0008               	return
  8108  063A                     l4448:	
  8109  063A  0850               	movf	___ftmul@f2,w
  8110  063B  00D3               	movwf	??___ftmul
  8111  063C  0851               	movf	___ftmul@f2+1,w
  8112  063D  00D4               	movwf	??___ftmul+1
  8113  063E  0852               	movf	___ftmul@f2+2,w
  8114  063F  00D5               	movwf	??___ftmul+2
  8115  0640  1003               	clrc
  8116  0641  0D54               	rlf	??___ftmul+1,w
  8117  0642  0D55               	rlf	??___ftmul+2,w
  8118  0643  00D6               	movwf	??___ftmul+3
  8119  0644  0856               	movf	??___ftmul+3,w
  8120  0645  00E8               	movwf	___ftmul@sign
  8121  0646  08E8               	movf	___ftmul@sign,f
  8122  0647  1D03               	skipz
  8123  0648  2E50               	goto	l4454
  8124  0649  3000               	movlw	0
  8125  064A  00CD               	movwf	?___ftmul
  8126  064B  3000               	movlw	0
  8127  064C  00CE               	movwf	?___ftmul+1
  8128  064D  3000               	movlw	0
  8129  064E  00CF               	movwf	?___ftmul+2
  8130  064F  0008               	return
  8131  0650                     l4454:	
  8132  0650  0868               	movf	___ftmul@sign,w
  8133  0651  3E7B               	addlw	123
  8134  0652  00D3               	movwf	??___ftmul
  8135  0653  0853               	movf	??___ftmul,w
  8136  0654  07E3               	addwf	___ftmul@exp,f
  8137  0655  084D               	movf	___ftmul@f1,w
  8138  0656  00D3               	movwf	??___ftmul
  8139  0657  084E               	movf	___ftmul@f1+1,w
  8140  0658  00D4               	movwf	??___ftmul+1
  8141  0659  084F               	movf	___ftmul@f1+2,w
  8142  065A  00D5               	movwf	??___ftmul+2
  8143  065B  3010               	movlw	16
  8144  065C                     u4265:	
  8145  065C  1003               	clrc
  8146  065D  0CD5               	rrf	??___ftmul+2,f
  8147  065E  0CD4               	rrf	??___ftmul+1,f
  8148  065F  0CD3               	rrf	??___ftmul,f
  8149  0660  3EFF               	addlw	-1
  8150  0661  1D03               	skipz
  8151  0662  2E5C               	goto	u4265
  8152  0663  0853               	movf	??___ftmul,w
  8153  0664  00D6               	movwf	??___ftmul+3
  8154  0665  0856               	movf	??___ftmul+3,w
  8155  0666  00E8               	movwf	___ftmul@sign
  8156  0667  0850               	movf	___ftmul@f2,w
  8157  0668  00D3               	movwf	??___ftmul
  8158  0669  0851               	movf	___ftmul@f2+1,w
  8159  066A  00D4               	movwf	??___ftmul+1
  8160  066B  0852               	movf	___ftmul@f2+2,w
  8161  066C  00D5               	movwf	??___ftmul+2
  8162  066D  3010               	movlw	16
  8163  066E                     u4275:	
  8164  066E  1003               	clrc
  8165  066F  0CD5               	rrf	??___ftmul+2,f
  8166  0670  0CD4               	rrf	??___ftmul+1,f
  8167  0671  0CD3               	rrf	??___ftmul,f
  8168  0672  3EFF               	addlw	-1
  8169  0673  1D03               	skipz
  8170  0674  2E6E               	goto	u4275
  8171  0675  0853               	movf	??___ftmul,w
  8172  0676  00D6               	movwf	??___ftmul+3
  8173  0677  0856               	movf	??___ftmul+3,w
  8174  0678  06E8               	xorwf	___ftmul@sign,f
  8175  0679  3080               	movlw	128
  8176  067A  00D3               	movwf	??___ftmul
  8177  067B  0853               	movf	??___ftmul,w
  8178  067C  05E8               	andwf	___ftmul@sign,f
  8179  067D  17CE               	bsf	___ftmul@f1+1,7
  8180  067E  17D1               	bsf	___ftmul@f2+1,7
  8181  067F  30FF               	movlw	255
  8182  0680  05D0               	andwf	___ftmul@f2,f
  8183  0681  30FF               	movlw	255
  8184  0682  05D1               	andwf	___ftmul@f2+1,f
  8185  0683  3000               	movlw	0
  8186  0684  05D2               	andwf	___ftmul@f2+2,f
  8187  0685  3000               	movlw	0
  8188  0686  00E4               	movwf	___ftmul@f3_as_product
  8189  0687  3000               	movlw	0
  8190  0688  00E5               	movwf	___ftmul@f3_as_product+1
  8191  0689  3000               	movlw	0
  8192  068A  00E6               	movwf	___ftmul@f3_as_product+2
  8193  068B  3007               	movlw	7
  8194  068C  00D3               	movwf	??___ftmul
  8195  068D  0853               	movf	??___ftmul,w
  8196  068E  00E7               	movwf	___ftmul@cntr
  8197  068F                     l4466:	
  8198  068F  1C4D               	btfss	___ftmul@f1,0
  8199  0690  2E9F               	goto	l4470
  8200  0691  0850               	movf	___ftmul@f2,w
  8201  0692  07E4               	addwf	___ftmul@f3_as_product,f
  8202  0693  0851               	movf	___ftmul@f2+1,w
  8203  0694  1103               	clrz
  8204  0695  1803               	skipnc
  8205  0696  0A51               	incf	___ftmul@f2+1,w
  8206  0697  1D03               	btfss	3,2
  8207  0698  07E5               	addwf	___ftmul@f3_as_product+1,f
  8208  0699  0852               	movf	___ftmul@f2+2,w
  8209  069A  1103               	clrz
  8210  069B  1803               	skipnc
  8211  069C  0A52               	incf	___ftmul@f2+2,w
  8212  069D  1D03               	btfss	3,2
  8213  069E  07E6               	addwf	___ftmul@f3_as_product+2,f
  8214  069F                     l4470:	
  8215  069F  3001               	movlw	1
  8216  06A0                     u4305:	
  8217  06A0  1003               	clrc
  8218  06A1  0CCF               	rrf	___ftmul@f1+2,f
  8219  06A2  0CCE               	rrf	___ftmul@f1+1,f
  8220  06A3  0CCD               	rrf	___ftmul@f1,f
  8221  06A4  3EFF               	addlw	-1
  8222  06A5  1D03               	skipz
  8223  06A6  2EA0               	goto	u4305
  8224  06A7  3001               	movlw	1
  8225  06A8                     u4315:	
  8226  06A8  1003               	clrc
  8227  06A9  0DD0               	rlf	___ftmul@f2,f
  8228  06AA  0DD1               	rlf	___ftmul@f2+1,f
  8229  06AB  0DD2               	rlf	___ftmul@f2+2,f
  8230  06AC  3EFF               	addlw	-1
  8231  06AD  1D03               	skipz
  8232  06AE  2EA8               	goto	u4315
  8233  06AF  3001               	movlw	1
  8234  06B0  02E7               	subwf	___ftmul@cntr,f
  8235  06B1  1D03               	btfss	3,2
  8236  06B2  2E8F               	goto	l4466
  8237  06B3  3009               	movlw	9
  8238  06B4  00D3               	movwf	??___ftmul
  8239  06B5  0853               	movf	??___ftmul,w
  8240  06B6  00E7               	movwf	___ftmul@cntr
  8241  06B7                     l4478:	
  8242  06B7  1C4D               	btfss	___ftmul@f1,0
  8243  06B8  2EC7               	goto	l4482
  8244  06B9  0850               	movf	___ftmul@f2,w
  8245  06BA  07E4               	addwf	___ftmul@f3_as_product,f
  8246  06BB  0851               	movf	___ftmul@f2+1,w
  8247  06BC  1103               	clrz
  8248  06BD  1803               	skipnc
  8249  06BE  0A51               	incf	___ftmul@f2+1,w
  8250  06BF  1D03               	btfss	3,2
  8251  06C0  07E5               	addwf	___ftmul@f3_as_product+1,f
  8252  06C1  0852               	movf	___ftmul@f2+2,w
  8253  06C2  1103               	clrz
  8254  06C3  1803               	skipnc
  8255  06C4  0A52               	incf	___ftmul@f2+2,w
  8256  06C5  1D03               	btfss	3,2
  8257  06C6  07E6               	addwf	___ftmul@f3_as_product+2,f
  8258  06C7                     l4482:	
  8259  06C7  3001               	movlw	1
  8260  06C8                     u4355:	
  8261  06C8  1003               	clrc
  8262  06C9  0CCF               	rrf	___ftmul@f1+2,f
  8263  06CA  0CCE               	rrf	___ftmul@f1+1,f
  8264  06CB  0CCD               	rrf	___ftmul@f1,f
  8265  06CC  3EFF               	addlw	-1
  8266  06CD  1D03               	skipz
  8267  06CE  2EC8               	goto	u4355
  8268  06CF  3001               	movlw	1
  8269  06D0                     u4365:	
  8270  06D0  1003               	clrc
  8271  06D1  0CE6               	rrf	___ftmul@f3_as_product+2,f
  8272  06D2  0CE5               	rrf	___ftmul@f3_as_product+1,f
  8273  06D3  0CE4               	rrf	___ftmul@f3_as_product,f
  8274  06D4  3EFF               	addlw	-1
  8275  06D5  1D03               	skipz
  8276  06D6  2ED0               	goto	u4365
  8277  06D7  3001               	movlw	1
  8278  06D8  02E7               	subwf	___ftmul@cntr,f
  8279  06D9  1D03               	btfss	3,2
  8280  06DA  2EB7               	goto	l4478
  8281  06DB  0864               	movf	___ftmul@f3_as_product,w
  8282  06DC  00A0               	movwf	___ftpack@arg
  8283  06DD  0865               	movf	___ftmul@f3_as_product+1,w
  8284  06DE  00A1               	movwf	___ftpack@arg+1
  8285  06DF  0866               	movf	___ftmul@f3_as_product+2,w
  8286  06E0  00A2               	movwf	___ftpack@arg+2
  8287  06E1  0863               	movf	___ftmul@exp,w
  8288  06E2  00D3               	movwf	??___ftmul
  8289  06E3  0853               	movf	??___ftmul,w
  8290  06E4  00A3               	movwf	___ftpack@exp
  8291  06E5  0868               	movf	___ftmul@sign,w
  8292  06E6  00D4               	movwf	??___ftmul+1
  8293  06E7  0854               	movf	??___ftmul+1,w
  8294  06E8  00A4               	movwf	___ftpack@sign
  8295  06E9  120A  158A  247A   	fcall	___ftpack
  8296  06EC  1283               	bcf	3,5	;RP0=0, select bank0
  8297  06ED  1303               	bcf	3,6	;RP1=0, select bank0
  8298  06EE  0820               	movf	?___ftpack,w
  8299  06EF  00CD               	movwf	?___ftmul
  8300  06F0  0821               	movf	?___ftpack+1,w
  8301  06F1  00CE               	movwf	?___ftmul+1
  8302  06F2  0822               	movf	?___ftpack+2,w
  8303  06F3  00CF               	movwf	?___ftmul+2
  8304  06F4  0008               	return
  8305  06F5                     __end_of___ftmul:	
  8306                           
  8307                           	psect	text55
  8308  0C7A                     __ptext55:	
  8309 ;; *************** function ___ftpack *****************
  8310 ;; Defined at:
  8311 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\float.c"
  8312 ;; Parameters:    Size  Location     Type
  8313 ;;  arg             3    0[BANK0 ] unsigned um
  8314 ;;  exp             1    3[BANK0 ] unsigned char 
  8315 ;;  sign            1    4[BANK0 ] unsigned char 
  8316 ;; Auto vars:     Size  Location     Type
  8317 ;;		None
  8318 ;; Return value:  Size  Location     Type
  8319 ;;                  3    0[BANK0 ] float 
  8320 ;; Registers used:
  8321 ;;		wreg, status,2, status,0
  8322 ;; Tracked objects:
  8323 ;;		On entry : 0/0
  8324 ;;		On exit  : 0/0
  8325 ;;		Unchanged: 0/0
  8326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8327 ;;      Params:         0       5       0       0       0
  8328 ;;      Locals:         0       0       0       0       0
  8329 ;;      Temps:          0       3       0       0       0
  8330 ;;      Totals:         0       8       0       0       0
  8331 ;;Total ram usage:        8 bytes
  8332 ;; Hardware stack levels used:    1
  8333 ;; Hardware stack levels required when called:    1
  8334 ;; This function calls:
  8335 ;;		Nothing
  8336 ;; This function is called by:
  8337 ;;		___altoft
  8338 ;;		___awtoft
  8339 ;;		___ftadd
  8340 ;;		___ftdiv
  8341 ;;		___ftmul
  8342 ;; This function uses a non-reentrant model
  8343 ;;
  8344                           
  8345                           
  8346                           ;psect for function ___ftpack
  8347  0C7A                     ___ftpack:	
  8348                           
  8349                           ;incstack = 0
  8350                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  8351  0C7A  1283               	bcf	3,5	;RP0=0, select bank0
  8352  0C7B  1303               	bcf	3,6	;RP1=0, select bank0
  8353  0C7C  0823               	movf	___ftpack@exp,w
  8354  0C7D  1903               	btfsc	3,2
  8355  0C7E  2C84               	goto	l4194
  8356  0C7F  0822               	movf	___ftpack@arg+2,w
  8357  0C80  0421               	iorwf	___ftpack@arg+1,w
  8358  0C81  0420               	iorwf	___ftpack@arg,w
  8359  0C82  1D03               	skipz
  8360  0C83  2C97               	goto	l4200
  8361  0C84                     l4194:	
  8362  0C84  3000               	movlw	0
  8363  0C85  00A0               	movwf	?___ftpack
  8364  0C86  3000               	movlw	0
  8365  0C87  00A1               	movwf	?___ftpack+1
  8366  0C88  3000               	movlw	0
  8367  0C89  00A2               	movwf	?___ftpack+2
  8368  0C8A  0008               	return
  8369  0C8B                     l4198:	
  8370  0C8B  3001               	movlw	1
  8371  0C8C  00A5               	movwf	??___ftpack
  8372  0C8D  0825               	movf	??___ftpack,w
  8373  0C8E  07A3               	addwf	___ftpack@exp,f
  8374  0C8F  3001               	movlw	1
  8375  0C90                     u3635:	
  8376  0C90  1003               	clrc
  8377  0C91  0CA2               	rrf	___ftpack@arg+2,f
  8378  0C92  0CA1               	rrf	___ftpack@arg+1,f
  8379  0C93  0CA0               	rrf	___ftpack@arg,f
  8380  0C94  3EFF               	addlw	-1
  8381  0C95  1D03               	skipz
  8382  0C96  2C90               	goto	u3635
  8383  0C97                     l4200:	
  8384  0C97  30FE               	movlw	254
  8385  0C98  0522               	andwf	___ftpack@arg+2,w
  8386  0C99  1903               	btfsc	3,2
  8387  0C9A  2CB2               	goto	l667
  8388  0C9B  2C8B               	goto	l4198
  8389  0C9C                     l4202:	
  8390  0C9C  3001               	movlw	1
  8391  0C9D  00A5               	movwf	??___ftpack
  8392  0C9E  0825               	movf	??___ftpack,w
  8393  0C9F  07A3               	addwf	___ftpack@exp,f
  8394  0CA0  3001               	movlw	1
  8395  0CA1  07A0               	addwf	___ftpack@arg,f
  8396  0CA2  3000               	movlw	0
  8397  0CA3  1803               	skipnc
  8398  0CA4  3001               	movlw	1
  8399  0CA5  07A1               	addwf	___ftpack@arg+1,f
  8400  0CA6  3000               	movlw	0
  8401  0CA7  1803               	skipnc
  8402  0CA8  3001               	movlw	1
  8403  0CA9  07A2               	addwf	___ftpack@arg+2,f
  8404  0CAA  3001               	movlw	1
  8405  0CAB                     u3655:	
  8406  0CAB  1003               	clrc
  8407  0CAC  0CA2               	rrf	___ftpack@arg+2,f
  8408  0CAD  0CA1               	rrf	___ftpack@arg+1,f
  8409  0CAE  0CA0               	rrf	___ftpack@arg,f
  8410  0CAF  3EFF               	addlw	-1
  8411  0CB0  1D03               	skipz
  8412  0CB1  2CAB               	goto	u3655
  8413  0CB2                     l667:	
  8414  0CB2  30FF               	movlw	255
  8415  0CB3  0522               	andwf	___ftpack@arg+2,w
  8416  0CB4  1903               	btfsc	3,2
  8417  0CB5  2CC1               	goto	l4210
  8418  0CB6  2C9C               	goto	l4202
  8419  0CB7                     l4208:	
  8420  0CB7  3001               	movlw	1
  8421  0CB8  02A3               	subwf	___ftpack@exp,f
  8422  0CB9  3001               	movlw	1
  8423  0CBA                     u3675:	
  8424  0CBA  1003               	clrc
  8425  0CBB  0DA0               	rlf	___ftpack@arg,f
  8426  0CBC  0DA1               	rlf	___ftpack@arg+1,f
  8427  0CBD  0DA2               	rlf	___ftpack@arg+2,f
  8428  0CBE  3EFF               	addlw	-1
  8429  0CBF  1D03               	skipz
  8430  0CC0  2CBA               	goto	u3675
  8431  0CC1                     l4210:	
  8432  0CC1  1FA1               	btfss	___ftpack@arg+1,7
  8433  0CC2  2CB7               	goto	l4208
  8434  0CC3  1823               	btfsc	___ftpack@exp,0
  8435  0CC4  2CCB               	goto	l673
  8436  0CC5  30FF               	movlw	255
  8437  0CC6  05A0               	andwf	___ftpack@arg,f
  8438  0CC7  307F               	movlw	127
  8439  0CC8  05A1               	andwf	___ftpack@arg+1,f
  8440  0CC9  30FF               	movlw	255
  8441  0CCA  05A2               	andwf	___ftpack@arg+2,f
  8442  0CCB                     l673:	
  8443  0CCB  1003               	clrc
  8444  0CCC  0CA3               	rrf	___ftpack@exp,f
  8445  0CCD  0823               	movf	___ftpack@exp,w
  8446  0CCE  00A5               	movwf	??___ftpack
  8447  0CCF  01A6               	clrf	??___ftpack+1
  8448  0CD0  01A7               	clrf	??___ftpack+2
  8449  0CD1  3010               	movlw	16
  8450  0CD2                     u3705:	
  8451  0CD2  1003               	clrc
  8452  0CD3  0DA5               	rlf	??___ftpack,f
  8453  0CD4  0DA6               	rlf	??___ftpack+1,f
  8454  0CD5  0DA7               	rlf	??___ftpack+2,f
  8455  0CD6  3EFF               	addlw	-1
  8456  0CD7  1D03               	skipz
  8457  0CD8  2CD2               	goto	u3705
  8458  0CD9  0825               	movf	??___ftpack,w
  8459  0CDA  04A0               	iorwf	___ftpack@arg,f
  8460  0CDB  0826               	movf	??___ftpack+1,w
  8461  0CDC  04A1               	iorwf	___ftpack@arg+1,f
  8462  0CDD  0827               	movf	??___ftpack+2,w
  8463  0CDE  04A2               	iorwf	___ftpack@arg+2,f
  8464  0CDF  0824               	movf	___ftpack@sign,w
  8465  0CE0  1903               	btfsc	3,2
  8466  0CE1  0008               	return
  8467  0CE2  17A2               	bsf	___ftpack@arg+2,7
  8468  0CE3  0008               	return
  8469  0CE4                     __end_of___ftpack:	
  8470                           
  8471                           	psect	text56
  8472  167B                     __ptext56:	
  8473 ;; *************** function _tc_int *****************
  8474 ;; Defined at:
  8475 ;;		line 78 in file "C:\Users\Dinusha\Documents\PICProjects\PIC877AProjects\CProjects\TEA5767\main.c"
  8476 ;; Parameters:    Size  Location     Type
  8477 ;;		None
  8478 ;; Auto vars:     Size  Location     Type
  8479 ;;		None
  8480 ;; Return value:  Size  Location     Type
  8481 ;;		None               void
  8482 ;; Registers used:
  8483 ;;		status,2
  8484 ;; Tracked objects:
  8485 ;;		On entry : 0/0
  8486 ;;		On exit  : 0/0
  8487 ;;		Unchanged: 0/0
  8488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8489 ;;      Params:         0       0       0       0       0
  8490 ;;      Locals:         0       0       0       0       0
  8491 ;;      Temps:          4       0       0       0       0
  8492 ;;      Totals:         4       0       0       0       0
  8493 ;;Total ram usage:        4 bytes
  8494 ;; Hardware stack levels used:    1
  8495 ;; This function calls:
  8496 ;;		Nothing
  8497 ;; This function is called by:
  8498 ;;		Interrupt level 1
  8499 ;; This function uses a non-reentrant model
  8500 ;;
  8501                           
  8502                           
  8503                           ;psect for function _tc_int
  8504  167B                     _tc_int:	
  8505                           
  8506                           ;main.c: 80: if( TMR0IE && TMR0IF ){
  8507  167B  1A8B               	btfsc	11,5	;volatile
  8508  167C  1D0B               	btfss	11,2	;volatile
  8509  167D  2E80               	goto	i1l124
  8510                           
  8511                           ;main.c: 81: TMR0IF = 0;
  8512  167E  110B               	bcf	11,2	;volatile
  8513                           
  8514                           ;main.c: 82: TMR0 = 0;
  8515  167F  0181               	clrf	1	;volatile
  8516  1680                     i1l124:	
  8517                           ;main.c: 85: return;
  8518                           
  8519  1680  0873               	movf	??_tc_int+3,w
  8520  1681  00FF               	movwf	127
  8521  1682  0872               	movf	??_tc_int+2,w
  8522  1683  008A               	movwf	10
  8523  1684  0871               	movf	??_tc_int+1,w
  8524  1685  0084               	movwf	4
  8525  1686  0E70               	swapf	??_tc_int^(0+-128),w
  8526  1687  0083               	movwf	3
  8527  1688  0EFE               	swapf	126,f
  8528  1689  0E7E               	swapf	126,w
  8529  168A  0009               	retfie
  8530  168B                     __end_of_tc_int:	
  8531  007E                     btemp	set	126	;btemp
  8532  007E                     wtemp	set	126
  8533  007E                     wtemp0	set	126
  8534  0080                     wtemp1	set	128
  8535  0082                     wtemp2	set	130
  8536  0084                     wtemp3	set	132
  8537  0086                     wtemp4	set	134
  8538  0088                     wtemp5	set	136
  8539  007F                     wtemp6	set	127
  8540  007E                     ttemp	set	126
  8541  007E                     ttemp0	set	126
  8542  0081                     ttemp1	set	129
  8543  0084                     ttemp2	set	132
  8544  0087                     ttemp3	set	135
  8545  007F                     ttemp4	set	127
  8546  007E                     ltemp	set	126
  8547  007E                     ltemp0	set	126
  8548  0082                     ltemp1	set	130
  8549  0086                     ltemp2	set	134
  8550  0080                     ltemp3	set	128
  8551                           
  8552                           	psect	intentry
  8553  0004                     __pintentry:	
  8554                           ;incstack = 0
  8555                           ; Regs used in _tc_int: [status,2]
  8556                           
  8557  0004                     interrupt_function:	
  8558  007E                     saved_w	set	btemp
  8559  0004  00FE               	movwf	btemp
  8560  0005  0E03               	swapf	3,w
  8561  0006  00F0               	movwf	??_tc_int
  8562  0007  0804               	movf	4,w
  8563  0008  00F1               	movwf	??_tc_int+1
  8564  0009  080A               	movf	10,w
  8565  000A  00F2               	movwf	??_tc_int+2
  8566  000B  1283               	bcf	3,5	;RP0=0, select bank0
  8567  000C  1303               	bcf	3,6	;RP1=0, select bank0
  8568  000D  087F               	movf	btemp+1,w
  8569  000E  00F3               	movwf	??_tc_int+3
  8570  000F  160A  118A  2E7B   	ljmp	_tc_int


Data Sizes:
    Strings     111
    Constant    14
    Data        0
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     80      80
    BANK1            80     58      77
    BANK3            96      0      13
    BANK2            96      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> trunc@expon(BANK1[2]), ceil@expon(BANK0[2]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_9(CODE[6]), STR_8(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 5
		 -> buff(BANK1[5]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S467$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    hd44780_printstr@dta	PTR unsigned char  size(2) Largest target is 5
		 -> buff(BANK1[5]), STR_2(CODE[2]), STR_1(CODE[2]), 

    serial_tx_printline@str	PTR unsigned char  size(1) Largest target is 36
		 -> STR_7(CODE[10]), STR_6(CODE[16]), STR_5(CODE[16]), STR_4(CODE[36]), 
		 -> STR_3(CODE[23]), 

    serial_tx_print@str	PTR unsigned char  size(1) Largest target is 36
		 -> STR_7(CODE[10]), STR_6(CODE[16]), STR_5(CODE[16]), STR_4(CODE[36]), 
		 -> STR_3(CODE[23]), 


Critical Paths under _main in COMMON

    _main->_debounce_lo
    _tea5767_read->_i2c_send_controlbyte
    _tea5767_write->_i2c_send_controlbyte
    _serial_tx_printline->_serial_tx_print
    _serial_tx_print->_serial_tx_poll
    _print_freq->___wmul
    _tea5767_tuned_freq->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _hd44780_printstr->_hd44780_write
    _hd44780_newline->_hd44780_write
    _hd44780_block_erase->_hd44780_write
    _hd44780_char->_hd44780_write
    _hd44780_init->_hd44780_write

Critical Paths under _tc_int in COMMON

    None.

Critical Paths under _main in BANK0

    _tea5767_search->_tea5767_getfreq
    _tea5767_search->_tea5767_getpll
    _tea5767_tune->_tea5767_getpll
    _tea5767_round_freq->_tea5767_getfreq
    _tea5767_read->_serial_tx_printline
    _tea5767_getfreq->___ftdiv
    _ceil->___ftadd
    ___awtoft->___ftpack
    _tea5767_init->_tea5767_getpll
    _tea5767_write->_serial_tx_printline
    _serial_tx_printline->_serial_tx_print
    _tea5767_getpll->___ftdiv
    ___ftadd->___awtoft
    _print_signal_level->_hd44780_printint
    _hd44780_printint->_sprintf
    _print_mode->_hd44780_printstr
    _print_freq->_tea5767_tuned_freq
    _tea5767_tuned_freq->_trunc
    ___fttol->___ftdiv
    ___altoft->___ftpack
    _hd44780_printdecimal->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _hd44780_printstr->_hd44780_char
    _hd44780_newline->_hd44780_write
    _hd44780_block_erase->_hd44780_char
    _hd44780_char->_hd44780_write
    _init->_hd44780_init
    _hd44780_init->_hd44780_write
    ___ftmul->_ceil

Critical Paths under _tc_int in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_print_freq
    _tea5767_search_up->_tea5767_search
    _tea5767_search->_tea5767_tune
    _tea5767_tune->_tea5767_getpll
    _tea5767_getfreq->___ftdiv
    _tea5767_init->_tea5767_getpll
    _tea5767_getpll->___fttol
    _print_freq->_tea5767_tuned_freq
    _tea5767_tuned_freq->_trunc
    _trunc->___fttol
    ___fttol->___ftdiv

Critical Paths under _tc_int in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tc_int in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_int in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0  106923
                                             54 BANK1      4     4      0
                        _debounce_lo
                               _init
                         _print_freq
                         _print_mode
                 _print_signal_level
                       _tea5767_init
                       _tea5767_read
                  _tea5767_search_up
 ---------------------------------------------------------------------------------
 (1) _tea5767_search_up                                    1     1      0   72096
                                             41 BANK1      1     1      0
                     _tea5767_search
 ---------------------------------------------------------------------------------
 (2) _tea5767_search                                       6     6      0   72096
                                             35 BANK1      6     6      0
                            ___ftadd
                             ___ftge
                            ___ftneg
                _serial_tx_printline
                    _tea5767_getfreq
                     _tea5767_getpll
                       _tea5767_read
                 _tea5767_round_freq
                       _tea5767_tune
                      _tea5767_write
 ---------------------------------------------------------------------------------
 (3) _tea5767_tune                                         6     3      3   12164
                                             29 BANK1      6     3      3
                     _tea5767_getpll
                      _tea5767_write
 ---------------------------------------------------------------------------------
 (3) _tea5767_round_freq                                   6     3      3   17505
                                             26 BANK1      6     3      3
                            ___ftdiv
                            ___ftmul
                               _ceil
                    _tea5767_getfreq (ARG)
 ---------------------------------------------------------------------------------
 (3) _tea5767_read                                         3     3      0     530
                                              2 BANK0      1     1      0
                      _i2c_read_data
                       _i2c_send_ack
               _i2c_send_controlbyte
                      _i2c_send_nack
                          _i2c_start
                           _i2c_stop
                _serial_tx_printline
 ---------------------------------------------------------------------------------
 (4) _i2c_send_nack                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c_send_ack                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c_read_data                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _tea5767_getfreq                                     15    12      3   24302
                                             77 BANK0      3     0      3
                                              6 BANK1     12    12      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                               _ceil
 ---------------------------------------------------------------------------------
 (4) _ceil                                                 9     6      3   10795
                                             31 BANK0     14    11      3
                           ___altoft
                           ___awtoft (ARG)
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (5) ___ftge                                              12     6      6     678
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             6     3      3    2535
                                              8 BANK0      7     4      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     175
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _tea5767_init                                         5     5      0   12037
                                             29 BANK1      5     5      0
                     _tea5767_getpll
                      _tea5767_write
 ---------------------------------------------------------------------------------
 (3) _tea5767_write                                        2     2      0     552
               _i2c_send_controlbyte
                      _i2c_send_data
                          _i2c_start
                           _i2c_stop
                _serial_tx_printline
 ---------------------------------------------------------------------------------
 (4) _serial_tx_printline                                  1     1      0     338
                                              1 BANK0      1     1      0
                     _serial_tx_poll
                    _serial_tx_print
 ---------------------------------------------------------------------------------
 (5) _serial_tx_print                                      2     2      0     126
                                              5 COMMON     1     1      0
                                              0 BANK0      1     1      0
                     _serial_tx_poll
 ---------------------------------------------------------------------------------
 (6) _serial_tx_poll                                       1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c_send_data                                        1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c_send_controlbyte                                 3     2      1     192
                                              4 COMMON     2     1      1
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _tea5767_getpll                                       6     3      3   11420
                                             77 BANK0      3     3      0
                                             26 BANK1      3     0      3
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             16    10      6    3037
                                             61 BANK0     16    16      0
                                              0 BANK1      6     0      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                               _ceil (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             13     7      6    4192
                                             15 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _print_signal_level                                   4     4      0    3939
                                             33 BANK0      4     4      0
                _hd44780_block_erase
                   _hd44780_printint
               _tea5767_signal_level
 ---------------------------------------------------------------------------------
 (2) _tea5767_signal_level                                 1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _hd44780_printint                                     4     1      3    3088
                                             29 BANK0      4     1      3
                   _hd44780_printstr
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _print_mode                                           4     4      0    1408
                                              6 BANK0      4     4      0
                   _hd44780_printstr
                       _tea5767_mode
 ---------------------------------------------------------------------------------
 (2) _tea5767_mode                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _print_freq                                           8     8      0   16436
                                             46 BANK1      8     8      0
                            ___awdiv
                             ___wmul
                _hd44780_block_erase
               _hd44780_printdecimal
                 _tea5767_tuned_freq
 ---------------------------------------------------------------------------------
 (2) _tea5767_tuned_freq                                  14    12      2   10356
                                             78 BANK0      2     2      0
                                             34 BANK1     12    10      2
                            ___ftmul
                            ___fttol
                             ___wmul
                              _trunc
 ---------------------------------------------------------------------------------
 (3) _trunc                                                9     6      3    5419
                                             77 BANK0      1     1      0
                                             26 BANK1      8     5      3
                           ___altoft
                            ___ftmul (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                6     2      4    1152
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             14    10      4     696
                                              6 BANK1     20    16      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___altoft                                             8     4      4    2833
                                              8 BANK0     10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     526
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _hd44780_printdecimal                                 6     1      5    3249
                                             29 BANK0      6     1      5
                   _hd44780_printstr
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             17    12      5    1522
                                             12 BANK0     17    12      5
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     265
                                              5 COMMON     1     1      0
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     371
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _hd44780_printstr                                     3     0      3    1374
                                              3 BANK0      3     0      3
                       _hd44780_char
                    _hd44780_newline
                      _hd44780_write
 ---------------------------------------------------------------------------------
 (4) _hd44780_newline                                      0     0      0     232
                      _hd44780_write
 ---------------------------------------------------------------------------------
 (2) _hd44780_block_erase                                  5     4      1     755
                                              3 BANK0      5     4      1
                       _hd44780_char
                      _hd44780_write
 ---------------------------------------------------------------------------------
 (4) _hd44780_char                                         1     1      0     263
                                              2 BANK0      1     1      0
                      _hd44780_write
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     705
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _init                                                 2     2      0     232
                                              4 BANK0      2     2      0
                       _hd44780_init
                        _serial_init
 ---------------------------------------------------------------------------------
 (2) _serial_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _hd44780_init                                         2     2      0     232
                                              2 BANK0      2     2      0
                       _hd44780_busy
                      _hd44780_pulse
                      _hd44780_write
 ---------------------------------------------------------------------------------
 (4) _hd44780_write                                        4     4      0     232
                                              4 COMMON     2     2      0
                                              0 BANK0      2     2      0
                       _hd44780_busy
                      _hd44780_pulse
 ---------------------------------------------------------------------------------
 (5) _hd44780_pulse                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _hd44780_busy                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _debounce_lo                                          4     4      0     130
                                              4 COMMON     2     2      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             16    10      6    3235
                                             45 BANK0     28    22      6
                           ___awtoft (ARG)
                           ___ftpack
                               _ceil (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2097
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2097
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _tc_int                                               4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _debounce_lo
   _init
     _hd44780_init
       _hd44780_busy
       _hd44780_pulse
       _hd44780_write
         _hd44780_busy
         _hd44780_pulse
     _serial_init
   _print_freq
     ___awdiv
     ___wmul
     _hd44780_block_erase
       _hd44780_char
         _hd44780_write
           _hd44780_busy
           _hd44780_pulse
       _hd44780_write
         _hd44780_busy
         _hd44780_pulse
     _hd44780_printdecimal
       _hd44780_printstr
         _hd44780_char
           _hd44780_write
             _hd44780_busy
             _hd44780_pulse
         _hd44780_newline
           _hd44780_write
             _hd44780_busy
             _hd44780_pulse
         _hd44780_write
           _hd44780_busy
           _hd44780_pulse
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _tea5767_tuned_freq
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _ceil (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftge (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           _frexp (ARG)
       ___fttol
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _ceil (ARG)
               ___altoft
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftge (ARG)
               _frexp (ARG)
           ___ftpack (ARG)
           _ceil (ARG)
             ___altoft
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftge (ARG)
             _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _ceil (ARG)
             ___altoft
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftge (ARG)
             _frexp (ARG)
       ___wmul
       _trunc
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _ceil (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftneg (ARG)
                     ___ftpack (ARG)
                   ___ftge (ARG)
                   _frexp (ARG)
               ___ftpack (ARG)
               _ceil (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftge (ARG)
                 _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _ceil (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftge (ARG)
                 _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _ceil (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftge (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             _frexp (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _ceil (ARG)
                 ___altoft
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftge (ARG)
                 _frexp (ARG)
             ___ftpack (ARG)
             _ceil (ARG)
               ___altoft
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftge (ARG)
               _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _ceil (ARG)
               ___altoft
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftge (ARG)
               _frexp (ARG)
         _frexp (ARG)
   _print_mode
     _hd44780_printstr
       _hd44780_char
         _hd44780_write
           _hd44780_busy
           _hd44780_pulse
       _hd44780_newline
         _hd44780_write
           _hd44780_busy
           _hd44780_pulse
       _hd44780_write
         _hd44780_busy
         _hd44780_pulse
     _tea5767_mode
   _print_signal_level
     _hd44780_block_erase
       _hd44780_char
         _hd44780_write
           _hd44780_busy
           _hd44780_pulse
       _hd44780_write
         _hd44780_busy
         _hd44780_pulse
     _hd44780_printint
       _hd44780_printstr
         _hd44780_char
           _hd44780_write
             _hd44780_busy
             _hd44780_pulse
         _hd44780_newline
           _hd44780_write
             _hd44780_busy
             _hd44780_pulse
         _hd44780_write
           _hd44780_busy
           _hd44780_pulse
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _tea5767_signal_level
   _tea5767_init
     _tea5767_getpll
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _ceil (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftge (ARG)
               ___fttol (ARG)
               _frexp (ARG)
           ___ftpack (ARG)
           _ceil (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftge (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _ceil (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftge (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _ceil (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftge (ARG)
             ___fttol (ARG)
             _frexp (ARG)
         ___ftpack (ARG)
         _ceil (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftge (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _ceil (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftge (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           _frexp (ARG)
       ___fttol
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _ceil (ARG)
               ___altoft
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftge (ARG)
               _frexp (ARG)
           ___ftpack (ARG)
           _ceil (ARG)
             ___altoft
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftge (ARG)
             _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _ceil (ARG)
             ___altoft
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftge (ARG)
             _frexp (ARG)
     _tea5767_write
       _i2c_send_controlbyte
       _i2c_send_data
       _i2c_start
       _i2c_stop
       _serial_tx_printline
         _serial_tx_poll
         _serial_tx_print
           _serial_tx_poll
   _tea5767_read
     _i2c_read_data
     _i2c_send_ack
     _i2c_send_controlbyte
     _i2c_send_nack
     _i2c_start
     _i2c_stop
     _serial_tx_printline
       _serial_tx_poll
       _serial_tx_print
         _serial_tx_poll
   _tea5767_search_up
     _tea5767_search
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _ceil (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftge (ARG)
               ___fttol (ARG)
               _frexp (ARG)
           ___ftpack (ARG)
           _ceil (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftge (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _ceil (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftge (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftge
       ___ftneg
       _serial_tx_printline
         _serial_tx_poll
         _serial_tx_print
           _serial_tx_poll
       _tea5767_getfreq
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _ceil (ARG)
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftge (ARG)
                 ___fttol (ARG)
                 _frexp (ARG)
             ___ftpack (ARG)
             _ceil (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftge (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _ceil (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftge (ARG)
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _ceil (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftge (ARG)
               ___fttol (ARG)
               _frexp (ARG)
           ___ftpack (ARG)
           _ceil (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftge (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _ceil (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftge (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             _frexp (ARG)
         _ceil
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftge (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           _frexp (ARG)
       _tea5767_getpll
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _ceil (ARG)
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftge (ARG)
                 ___fttol (ARG)
                 _frexp (ARG)
             ___ftpack (ARG)
             _ceil (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftge (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _ceil (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftge (ARG)
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _ceil (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftge (ARG)
               ___fttol (ARG)
               _frexp (ARG)
           ___ftpack (ARG)
           _ceil (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftge (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _ceil (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftge (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             _frexp (ARG)
         ___fttol
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _ceil (ARG)
                 ___altoft
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftge (ARG)
                 _frexp (ARG)
             ___ftpack (ARG)
             _ceil (ARG)
               ___altoft
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftge (ARG)
               _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _ceil (ARG)
               ___altoft
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftge (ARG)
               _frexp (ARG)
       _tea5767_read
         _i2c_read_data
         _i2c_send_ack
         _i2c_send_controlbyte
         _i2c_send_nack
         _i2c_start
         _i2c_stop
         _serial_tx_printline
           _serial_tx_poll
           _serial_tx_print
             _serial_tx_poll
       _tea5767_round_freq
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _ceil (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftge (ARG)
               ___fttol (ARG)
               _frexp (ARG)
           ___ftpack (ARG)
           _ceil (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftge (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _ceil (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftge (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             _frexp (ARG)
         _ceil
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftge (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           _frexp (ARG)
         _tea5767_getfreq (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _ceil (ARG)
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftge (ARG)
                   ___fttol (ARG)
                   _frexp (ARG)
               ___ftpack (ARG)
               _ceil (ARG)
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftge (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _ceil (ARG)
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftge (ARG)
                 ___fttol (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _ceil (ARG)
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftge (ARG)
                 ___fttol (ARG)
                 _frexp (ARG)
             ___ftpack (ARG)
             _ceil (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftge (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _ceil (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftge (ARG)
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               _frexp (ARG)
           _ceil
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftge (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             _frexp (ARG)
       _tea5767_tune
         _tea5767_getpll
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _ceil (ARG)
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftge (ARG)
                   ___fttol (ARG)
                   _frexp (ARG)
               ___ftpack (ARG)
               _ceil (ARG)
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftge (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _ceil (ARG)
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftge (ARG)
                 ___fttol (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _ceil (ARG)
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftge (ARG)
                 ___fttol (ARG)
                 _frexp (ARG)
             ___ftpack (ARG)
             _ceil (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftge (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _ceil (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftge (ARG)
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               _frexp (ARG)
           ___fttol
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _ceil (ARG)
                   ___altoft
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftneg (ARG)
                     ___ftpack (ARG)
                   ___ftge (ARG)
                   _frexp (ARG)
               ___ftpack (ARG)
               _ceil (ARG)
                 ___altoft
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftge (ARG)
                 _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _ceil (ARG)
                 ___altoft
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftge (ARG)
                 _frexp (ARG)
         _tea5767_write
           _i2c_send_controlbyte
           _i2c_send_data
           _i2c_start
           _i2c_stop
           _serial_tx_printline
             _serial_tx_poll
             _serial_tx_print
               _serial_tx_poll
       _tea5767_write
         _i2c_send_controlbyte
         _i2c_send_data
         _i2c_start
         _i2c_stop
         _serial_tx_printline
           _serial_tx_poll
           _serial_tx_print
             _serial_tx_poll

 _tc_int (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      B4       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     3A      4D       7       96.3%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       D       9       13.5%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      B4      12        0.0%


Microchip Technology PIC Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Thu May 01 17:12:28 2014

                 ___altoft@exp 0030        tea5767_search@prev_freq 00C4                tea5767_init@pll 00C0  
                            pc 0002             tea5767_getpll@freq 00BA                    __CFG_CP$OFF 0000  
                ___altoft@sign 0031                             l12 160A                 hd44780_char@bt 0022  
                 ___awdiv@sign 0025                             fsr 0004            ___wmul@multiplicand 0022  
                 ___ftadd@exp1 003E                   ___ftadd@exp2 003D                   ___ftadd@sign 003C  
                          l200 161F                            l206 1650                            l128 172B  
                          l224 0894                            l218 165C                            l155 0BF3  
                          l182 1632                            l194 16AA                            l188 163C  
                          l366 16B9                            l720 022C                            l904 1746  
                          l673 0CCB                            l667 0CB2                            _RB1 0031  
                          _RA3 002B                            _RB2 0032                            _RE0 0048  
                          _RE1 0049                            _RE2 004A                   __CFG_CPD$OFF 0000  
     i2c_send_controlbyte@addr 0020         __size_of_hd44780_pulse 000A         __size_of_hd44780_write 003B  
                          fsr0 0004                            indf 0000                   __CFG_FOSC$HS 0000  
              tea5767_tune@pll 00C1                   __CFG_LVP$OFF 0000                   ___ftdiv@cntr 0067  
                         RCREG 001A                           RCSTA 0018                   ___ftdiv@sign 006C  
                         SPBRG 0099                           l4102 0921                           l4200 0C97  
                         l4112 0936                           l4210 0CC1                           l4202 0C9C  
                         l4208 0CB7                           l4144 04AF                           l4320 01B4  
                         l4250 0B0E                           l4154 04C6                           l4138 0499  
                         l4260 0B16                           l4244 0B03                           l3540 08A0  
                         l4180 0500                           l4172 04FC                           l4316 01AD  
                         l5220 0BC0                           l4262 0B24                           l3542 08AE  
                         l3550 08C7                           l4166 04ED                           l4158 04CC  
                         l4182 0479                           l4350 0207                           l4326 01C3  
                         l4414 035A                           l4406 0337                           l4430 0BA4  
                         l4272 0B45                           l3800 17AF                           l4184 0548  
                         l4344 01F2                           l5320 0087                           l4194 0C84  
                         l3546 08BC                           l4506 0EDB                           l5306 0D0A  
                         l4362 023E                           l4346 01FE                           l4338 01DD  
                         l4426 0B7D                           l5242 0C04                           l4276 0B4D  
                         l4268 0B3A                           l4540 0F46                           l4532 0F2A  
                         l4524 0F0D                           l4356 021C                           l4348 0203  
                         l4198 0C8B                           l4470 069F                           l4454 0650  
                         l3806 17DC                           l4534 0F35                           l4526 0F1D  
                         l4366 0250                           l4358 0228                           l5270 0F80  
                         l5342 00CB                           l4448 063A                           l3760 1738  
                         l3840 0A3E                           l4536 0F38                           l4376 0273  
                         l4392 02D5                           l3648 16F8                           l5336 00C0  
                         l4482 06C7                           l4466 068F                           l3754 1732  
                         l4562 0AA3                           l4554 0A7F                           l5370 0ACB  
                         l4386 02B1                           l5274 0F89                           l5354 0178  
                         l3748 171D                           l3836 0A69                           l4556 0A8D  
                         l4572 173C                           l5372 0ADD                           l3828 179F  
                         l5284 0FF7                           l4478 06B7                           l3838 0A6E  
                         l4566 0AAE                           l5384 176B                           l5394 098B  
                         l3954 07E9                           l3896 0E57         ??_hd44780_printdecimal 0042  
                         STR_1 088B                           STR_2 0889                           STR_3 0842  
                         STR_4 081E                           STR_5 0859                           STR_6 0869  
                         STR_7 0879                           STR_8 0886                           STR_9 0883  
  __end_of_hd44780_block_erase 17D3                           TXREG 0019                           TXSTA 0098  
                         u3105 08B4                           u3115 08BD                           u4025 0208  
                         u4201 0B70                           u4202 0B71                           u4203 0B76  
                         u4204 0B77                           u3085 08A3                           u1725 1665  
                         u4221 0B97                           u4222 0B98                           u3255 17B8  
                         u4055 021D                           u4135 02F4                           u4223 0B9D  
                         u4224 0B9E                           u4305 06A0                           u3505 0911  
                         u4145 0312                           u4315 06A8                           u3275 08E4  
                         u4155 0338                           u4405 0EE2                           u4165 034B  
                         u3365 16A2                           u5207 0C1E                           u5135 0AD0  
                         u4175 035B                           u3705 0CD2                           u4265 065C  
                         u5217 0C32                           u4505 0A82                           u3635 0C90  
                         u4355 06C8                           u4275 066E                           u5227 0C44  
                         u4435 0F0E                           u4365 06D0                           u5237 1721  
                         u3805 0B25                           u4525 0A8E                           u3565 04E3  
                         u3655 0CAB                           u3815 0B31                           u4535 0A9A  
                         u3825 0B3B                           u4545 0AA4                           u4465 0F2C  
                         u5177 0C0C                           u3675 0CBA                           u5187 09FE  
                         u5197 0967                           u4575 1747                           u3785 0B19  
                         u4585 174E                           u3965 01DE                           u3995 01F3  
                         _TMR0 0001                           _STBY 081C                  _i2c_read_data 164A  
              __end_of_MUTE_ON 081B                           _ceil 0F4F                           _buff 00E8  
                         _main 0BB3                   ___ftpack@arg 0020                           _init 0941  
                 ___ftpack@exp 0023                           btemp 007E          ??_serial_tx_printline 0076  
                __CFG_BOREN$ON 0000            tea5767@current_freq 00E4                           ltemp 007E  
                         start 0012                           ttemp 007E                           wtemp 007E  
            tea5767_search@pll 00C7     __size_of_tea5767_search_up 0010                   print_freq@fr 00D0  
                ?_i2c_send_ack 0070                   ___ftmul@cntr 0067                   ___ftmul@sign 0068  
                _i2c_send_data 1619               tea5767_tune@freq 00BD                  _i2c_send_nack 088D  
                 ___fttol@exp1 00B9                   ___fttol@lval 00B5        __end_of_tea5767_getfreq 0472  
         _tea5767_signal_level 1660                hd44780_write@bt 0020                          ?_ceil 003F  
                        ?_main 0070                          ?_init 0070                __end_of___awdiv 0B54  
              __end_of___ftadd 028D                  __CFG_WDTE$OFF 0000                __end_of___ftdiv 038E  
              __end_of___ftneg 164A                __end_of___ftmul 06F5           hd44780_block_erase@i 0026  
              ___awdiv@divisor 0020                __end_of___fttol 0F4F                __end_of___lwdiv 0AB5  
                        i1l124 1680                __end_of___lwmod 08CE                  ?_hd44780_char 0070  
              ___awdiv@counter 0024                          _RCREG 001A                  ?_hd44780_busy 0070  
                ?_hd44780_init 0070                          _PORTA 0005                          _PORTB 0006  
                        _PORTC 0007                          _PORTE 0009                          _TRISA 0085  
                        _TRISB 0086                          _TRISE 0089                          _SM_ON 081B  
     __size_of_hd44780_newline 0005                          _TXREG 0019                  __CFG_PWRTE$ON 0000  
           _print_signal_level 08CE                  ___awtoft@sign 002E                __end_of_dpowers 081A  
                        ceil@i 0048                          ceil@x 003F                          _frexp 097D  
                        _errno 0076                  ___ftpack@sign 0024                          _trunc 0CE4  
               __pbitbssCOMMON 03C8                          pclath 000A                 ?_i2c_read_data 0070  
      __end_of_serial_tx_print 1715                          ltemp0 007E                          ltemp1 0082  
                        ltemp2 0086                          ltemp3 0080            ?_print_signal_level 0070  
           main@button_pressed 00D9                          ttemp0 007E                          ttemp1 0081  
                        ttemp2 0084                          ttemp3 0087                          ttemp4 007F  
                        status 0003                          wtemp0 007E                          wtemp1 0080  
                        wtemp2 0082                          wtemp3 0084                          wtemp4 0086  
                        wtemp5 0088                          wtemp6 007F                __end_of_sprintf 054D  
         __size_of_debounce_lo 0025                  _hd44780_pulse 1622                  _hd44780_write 0906  
       ??_i2c_send_controlbyte 0075                  print_freq@dec 00E7                 ??_i2c_send_ack 0074  
               ?_i2c_send_data 0070                   __end_of_STBY 081D                 ?_i2c_send_nack 0070  
              __initialization 0015           __end_of_tea5767_init 0A35           __end_of_tea5767_read 0EC1  
         __end_of_tea5767_mode 1609                   __end_of_ceil 1000           __end_of_tea5767_tune 09F6  
                 __end_of_main 0C14                   __end_of_init 097D          ?_tea5767_signal_level 0070  
             __end_of_i2c_stop 1640            hd44780_printint@dta 003D            hd44780_printint@loc 003F  
         ??_print_signal_level 0041                         ??_ceil 0042                         ??_main 00D6  
                ___fttol@sign1 00B4                         ??_init 0024                 ??_hd44780_char 0076  
               ??_hd44780_busy 0074                 ??_hd44780_init 0022            hd44780_printstr@dta 0023  
          hd44780_printstr@loc 0025               hd44780_write@tmp 0021                         _ADCON1 009F  
                       ?_frexp 0020               __end_of___altoft 0AF7               ___awdiv@dividend 0022  
             __end_of___awtoft 1784               __end_of___ftpack 0CE4                         ?_trunc 00BA  
                       _TMR0IE 005D                         _TMR0IF 005A                         _SSPADD 0093  
                       _SSPCON 0014                         _SSPBUF 0013                 ?_hd44780_pulse 0070  
           __size_of_i2c_start 000A                         _SUD_UP 081D                 ?_hd44780_write 0070  
      hd44780_printdecimal@loc 0041    __size_of_tea5767_round_freq 0076                   ?_serial_init 0070  
                       ___ftge 0B54                         ___wmul 173A                      ??___awdiv 0074  
                    ??___ftadd 0035                      ??___ftdiv 005D                      ??___ftneg 0074  
                    ??___ftmul 0053                      ??___fttol 00AA                      ??___lwdiv 0074  
                    ??___lwmod 0075               ?_tea5767_getfreq 006D                         _tc_int 167B  
             ___awdiv@quotient 0026    __size_of_tea5767_tuned_freq 00B6          ___ftmul@f3_as_product 0064  
     __end_of_hd44780_printint 16F5       __end_of_hd44780_printstr 0A75                         saved_w 007E  
              ??_i2c_read_data 0074                      ??_sprintf 0031                         trunc@i 00BD  
                       trunc@x 00BA              ??_hd44780_newline 0076               ?_serial_tx_print 0070  
      __end_of__initialization 0029                     ___altoft@c 0028                     ___ftadd@f1 002F  
                   ___ftadd@f2 0032                     ___ftge@ff1 0020                     ___ftge@ff2 0023  
             i2c_send_data@dta 0074                ??_i2c_send_data 0074                ??_i2c_send_nack 0074  
                   ___ftdiv@f1 00A3                     ___ftdiv@f2 00A0                     ___ftdiv@f3 0068  
                   ___ftneg@f1 0020                     ___awtoft@c 0028                  __end_of_SM_ON 081C  
                   ___ftmul@f1 004D                     ___ftmul@f2 0050                     ___fttol@f1 00A6  
               __pcstackCOMMON 0070         ??_tea5767_signal_level 0074                 print_mode@mode 0028  
        __end_of_tea5767_write 07ED                  __end_of_frexp 09B9                  __end_of_trunc 0D50  
      __size_of_tea5767_getpll 007A        __size_of_tea5767_search 0157              __end_of_i2c_start 1636  
            serial_tx_poll@val 0074                 _OPTION_REGbits 0081     i2c_send_controlbyte@rw_bit 0074  
         __end_of_i2c_send_ack 1660        __size_of_serial_tx_poll 0008                        ??_frexp 0024  
                      ??_trunc 006D   hd44780_block_erase@start_loc 0025                     __pbssBANK1 00DA  
                   __pbssBANK3 0190                ??_hd44780_pulse 0074                ??_hd44780_write 0074  
                    ?_i2c_stop 0070          __size_of_tea5767_init 003F          __size_of_tea5767_read 0081  
        __size_of_tea5767_mode 0006          __size_of_tea5767_tune 003D           __end_of_hd44780_char 167B  
         __end_of_hd44780_busy 16C1           __end_of_hd44780_init 0C7A                     __pmaintext 0BB3  
                      ?___ftge 0020                        ?___wmul 0020                     __pintentry 0004  
          _tea5767_getpll$1036 006D                      ?___altoft 0028                        ?_tc_int 0070  
                    ?___awtoft 0028                      ?___ftpack 0020                   _tea5767_init 09F6  
                      _MUTE_ON 081A                   _tea5767_read 0E40                   _tea5767_mode 1603  
                 _tea5767_tune 09B9    __end_of_serial_tx_printline 16D5                        _SSPSTAT 0094  
                   __stringtab 0800                     ??_i2c_stop 0074  __size_of_hd44780_printdecimal 002D  
       tea5767_round_freq@freq 00BA   __size_of_hd44780_block_erase 0029                __size_of___ftge 005F  
                      ___awdiv 0AF7                        ___ftadd 0184                        ___ftdiv 028D  
                      ___ftneg 1640                __size_of___wmul 0025                        ___ftmul 0622  
                      ___fttol 0EC1                        ___lwdiv 0A75                        ___lwmod 0898  
         __size_of_serial_init 0013                     ??___altoft 002C                     ??___awtoft 002B  
                   ??___ftpack 0025                __size_of_tc_int 0010                        __ptext1 168B  
                      __ptext2 002D                        __ptext3 09B9                        __ptext4 0D50  
                      __ptext5 0E40                        __ptext6 088D                        __ptext7 1655  
                      __ptext8 164A                        __ptext9 038E                        _dpowers 0810  
                      _rs_flag 03C8      hd44780_block_erase@length 0023                        _sprintf 0472  
                      clrloop0 1612           end_of_initialization 0029                  ??_debounce_lo 0074  
__size_of_i2c_send_controlbyte 0012                   _commandbytes 0190                 _tea5767_getpll 0DC6  
        tea5767_tuned_freq@tmp 00C9                 _tea5767_search 002D    __size_of_print_signal_level 0038  
        __size_of_i2c_send_ack 000B                _hd44780_newline 15FE                     _print_freq 054D  
                   _print_mode 1784              ?_hd44780_printint 003D              ?_hd44780_printstr 0023  
               _serial_tx_poll 1609                      _TRISCbits 0087             ??_hd44780_printint 0040  
           ??_hd44780_printstr 0076          __size_of_hd44780_char 000E          __size_of_hd44780_busy 0014  
        __size_of_hd44780_init 0066                    ___ftdiv@exp 006B     __end_of_tea5767_round_freq 0DC6  
               __end_of_SUD_UP 081E            __end_of_debounce_lo 173A                    print_freq@f 00D2  
                  print_freq@i 00D4                    ___ftmul@exp 0063                   _i2c_send_ack 1655  
       __end_of_tea5767_getpll 0E40     __end_of_tea5767_tuned_freq 07AB         __end_of_tea5767_search 0184  
               __end_of___ftge 0BB3                 __end_of___wmul 175F          hd44780_printdecimal@d 003F  
        hd44780_printdecimal@i 003D            tea5767_round_freq@d 00BD                 __end_of_tc_int 168B  
       __end_of_serial_tx_poll 1611                   _hd44780_char 166D                   _hd44780_busy 16AD  
                 _hd44780_init 0C14            start_initialization 0015       __size_of_tea5767_getfreq 00E4  
                    _i2c_start 162C          __end_of_i2c_read_data 1655                     frexp@value 0020  
            __size_of_i2c_stop 000A          __end_of_i2c_send_data 1622             serial_tx_print@str 0020  
        __end_of_i2c_send_nack 0898       __size_of_serial_tx_print 0020                       ??___ftge 0026  
                     ??___wmul 0074                ?_tea5767_getpll 00BA        __end_of_hd44780_newline 1603  
              ?_tea5767_search 0070  __size_of_tea5767_signal_level 000D                       ??_tc_int 0070  
          tea5767_tuned_freq@d 00CC            tea5767_tuned_freq@f 00C7              __size_of___altoft 0042  
                  ?_print_freq 0070                ?_serial_tx_poll 0070                    ?_print_mode 0070  
            __size_of___awtoft 0025              __size_of___ftpack 006A                    __pbssCOMMON 0076  
          _hd44780_block_erase 17AA                      ___latbits 0002                  __pcstackBANK0 0020  
                __pcstackBANK1 00A0           tea5767@responsebytes 00DF               debounce_lo@count 0021  
                   ?_i2c_start 0070            __end_of__stringdata 088D         __size_of_tea5767_write 0042  
                  _debounce_lo 1715         serial_tx_printline@str 0021                    sprintf@_val 0037  
                  sprintf@flag 0035          __end_of_hd44780_pulse 162C                    sprintf@prec 0036  
        __end_of_hd44780_write 0941                   _current_freq 019A           ?_hd44780_block_erase 0023  
      _tea5767_tuned_freq$1039 00C4               ___lwdiv@dividend 0022                       ?___awdiv 0020  
                     ?___ftadd 002F                       ?___ftdiv 00A0                       ?___ftneg 0020  
                     ?___ftmul 004D                       ?___fttol 00A6                       ?___lwdiv 0020  
                     ?___lwmod 0027   __end_of_hd44780_printdecimal 1800                      __pstrings 0800  
         _tea5767_getfreq$1037 00AC           _tea5767_getfreq$1038 00AF                      ceil@expon 004B  
             ___lwdiv@quotient 0025                       ?_sprintf 002C                 __size_of_frexp 003C  
               __size_of_trunc 006C              ??_tea5767_getfreq 00A6              interrupt_function 0004  
               ___wmul@product 0074                      clear_ram0 1611          ??_hd44780_block_erase 0024  
 __size_of_serial_tx_printline 0014            __size_of_print_freq 00D5            __size_of_print_mode 0026  
                     _PIR1bits 000C                  ??_serial_init 0074               ?_hd44780_newline 0070  
                _tea5767_write 07AB          print_signal_level@lvl 0043                    __stringbase 080F  
                  __stringdata 081E              ??_serial_tx_print 0075              ___wmul@multiplier 0020  
 __end_of_i2c_send_controlbyte 16AD                    ??_i2c_start 0074                       _i2c_stop 1636  
                    frexp@eptr 0023      __size_of_hd44780_printint 0020      __size_of_hd44780_printstr 0040  
   print_signal_level@prev_lvl 0078     __end_of_print_signal_level 0906                 ?_tea5767_write 0070  
             __size_of___awdiv 005D               __size_of___ftadd 0109               __size_of___ftdiv 0101  
             __size_of___ftneg 000A                       ___altoft 0AB5               __size_of___ftmul 00D3  
             __size_of___fttol 008E               __size_of___lwdiv 0040               __size_of___lwmod 0036  
                     ___awtoft 175F                       ___ftpack 0C7A             _tea5767_round_freq 0D50  
          __end_of_serial_init 0800             __end_of__stringtab 0810                  _responsebytes 0195  
          ?_tea5767_round_freq 00BA                ___lwdiv@divisor 0020             _tea5767_tuned_freq 06F5  
              ___lwdiv@counter 0024                       __ptext10 0F4F                       __ptext11 0B54  
                     __ptext20 162C                       __ptext12 175F                       __ptext21 1619  
                     __ptext13 1640                       __ptext30 1603                       __ptext22 169B  
                     __ptext14 09F6                       __ptext31 054D                       __ptext23 0DC6  
                     __ptext15 07AB                       __ptext40 0898                       __ptext32 06F5  
                     __ptext24 028D                       __ptext16 16C1                       __ptext41 0A75  
                     __ptext33 0CE4                       __ptext25 0184                       __ptext17 16F5  
                     __ptext50 0906                       __ptext42 0A35                       __ptext34 097D  
                     __ptext26 08CE                       __ptext18 1609                       __ptext51 1622  
                     __ptext43 15FE                       __ptext35 0EC1                       __ptext27 1660  
                     __ptext19 1636                       __ptext52 16AD                       __ptext44 17AA  
                     __ptext36 0AB5                       __ptext28 16D5                       __ptext53 1715  
                     __ptext45 166D                       __ptext37 173A                       __ptext29 1784  
                     __ptext54 0622                       __ptext46 0AF7                       __ptext38 17D3  
                     __ptext55 0C7A                       __ptext47 0941                       __ptext39 0472  
                     __ptext56 167B                       __ptext48 07ED                       __ptext49 0C14  
             __size_of_sprintf 00DB            ?_tea5767_tuned_freq 00C2                     trunc@expon 00C0  
         _hd44780_printdecimal 17D3                  __size_of_ceil 00B1                  __size_of_main 0061  
                __size_of_init 003C               ??_tea5767_getpll 0074               ??_tea5767_search 00C3  
         ??_tea5767_round_freq 0074              _tea5767_search_up 168B               ??_serial_tx_poll 0074  
          tea5767@commandbytes 00DA             ?_tea5767_search_up 0070           ??_tea5767_tuned_freq 006E  
                 ??_print_freq 00CE                   ??_print_mode 0026            ??_tea5767_search_up 00C9  
                ?_tea5767_init 0070                  ?_tea5767_read 0070                  ?_tea5767_mode 0070  
                ?_tea5767_tune 00BD                 debounce_lo@prt 0020   __end_of_tea5767_signal_level 166D  
                     intlevel1 0000                      sprintf@ap 0034                      sprintf@sp 003B  
                 ?_debounce_lo 0070          ?_hd44780_printdecimal 003D               ___lwmod@dividend 0029  
                    stringcode 080A      __end_of_tea5767_search_up 169B             __end_of_print_freq 0622  
           __end_of_print_mode 17AA                ??_tea5767_write 0076           _i2c_send_controlbyte 169B  
                  _serial_init 07ED         __size_of_i2c_read_data 000B                       sprintf@c 003C  
                     sprintf@f 002C                _tea5767_getfreq 038E                ___lwmod@divisor 0027  
          _serial_tx_printline 16C1                ___lwmod@counter 002B                       stringdir 080A  
               ??_tea5767_init 00BD                 ??_tea5767_read 0022                       stringtab 0800  
               ??_tea5767_mode 0074                 ??_tea5767_tune 00C0                    _SSPCON2bits 0091  
       __size_of_i2c_send_data 0009         __size_of_i2c_send_nack 000B           tea5767_getfreq@byte1 00A8  
         tea5767_getfreq@byte2 006D               _hd44780_printint 16D5               _hd44780_printstr 0A35  
         ?_serial_tx_printline 0070             tea5767_getfreq@dta 00A9                _serial_tx_print 16F5  
        ?_i2c_send_controlbyte 0074  
