;**********************************************************************
;   This file is a basic code template for object module code         *
;   generation on the PIC16F877A. This file contains the              *
;   basic code building blocks to build upon.                         *
;                                                                     *
;   Refer to the MPASM User's Guide for additional information on     *
;   features of the assembler and linker (Document DS33014).          *
;                                                                     *
;   Refer to the respective PIC data sheet for additional             *
;   information on the instruction set.                               *
;                                                                     *
;**********************************************************************
;                                                                     *
;    Filename:      xxx.asm                                           *
;    Date:                                                            *
;    File Version:                                                    *
;                                                                     *
;    Author:                                                          *
;    Company:                                                         *
;                                                                     * 
;                                                                     *
;**********************************************************************
;                                                                     *
;    Files required: P16F877A.INC                                     *
;                                                                     *
;                                                                     *
;                                                                     *
;**********************************************************************
;                                                                     *
;    Notes:                                                           *
;                                                                     *
;                                                                     *
;                                                                     *
;                                                                     *
;**********************************************************************


    list        p=16f877a   ; list directive to define processor
    #include    <p16f877a.inc>  ; processor specific variable definitions
    
    ;__CONFIG _CP_OFF & _WDT_OFF & _BODEN_OFF & _PWRTE_ON & _RC_OSC & _WRT_OFF & _LVP_ON & _CPD_OFF
	__CONFIG  _FOSC_HS & _WRT_OFF & _LVP_OFF & _CPD_OFF & _CP_OFF & _WDT_OFF & _BODEN_OFF & _PWRTE_ON


; '__CONFIG' directive is used to embed configuration data within .asm file.
; The labels following the directive are located in the respective .inc file.
; See respective data sheet for additional information on configuration word.

;***** VARIABLE DEFINITIONS (examples)

#define PWM1		PORTB, RB1
#define PWM1_TRIS	TRISB, RB1

#define PWM2		PORTB, RB2
#define PWM2_TRIS	TRISB, RB2

; example of using Shared Uninitialized Data Section
INT_VAR     UDATA_SHR      
w_temp      RES     1       ; variable used for context saving 
status_temp RES     1       ; variable used for context saving
pclath_temp RES	    1       ; variable used for context saving

; example of using Uninitialized Data Section
TEMP_VAR    UDATA           ; explicit address specified is not required
sPORTB		RES		1		; Shadow PORTB
temp_count  RES     1       ; temporary variable (example)
periodc		RES		1		; Period Counter
PWM1_duty	RES		1		; PWM1 duty counter
PWM2_duty	RES		1		; PWM2 duty counter

; example of using Overlayed Uninitialized Data Section
; in this example both variables are assigned the same GPR location by linker
G_DATA      UDATA_OVR       ; explicit address can be specified
flag        RES 2           ; temporary variable (shared locations - G_DATA)

G_DATA      UDATA_OVR   
count       RES 2           ; temporary variable (shared locations - G_DATA)

;**********************************************************************
RESET_VECTOR    CODE    0x0000 ; processor reset vector
    nop                        ; nop for icd
    pagesel start
    goto    start              ; go to beginning of program


INT_VECTOR      CODE    0x0004 ; interrupt vector location

INTERRUPT

    movwf   w_temp          ; save off current W register contents
    movf    STATUS,w        ; move status register into W register
    movwf   status_temp     ; save off contents of STATUS register
    movf    PCLATH,w        ; move pclath register into w register
    movwf   pclath_temp     ; save off contents of PCLATH register

	banksel	periodc
	decfsz	periodc, f
	goto	_check_duty

	movlw	.100
	movwf	periodc

	movlw	.1
	banksel	PWM1_duty
	movwf	PWM1_duty

	banksel	PORTB
	bsf		PWM1
	bsf		PWM2

	movlw	.50
	banksel	PWM2_duty
	movwf	PWM2_duty

	;goto	_duty_done

	;banksel	PORTB
	;bsf		PWM2

_check_duty
	movlw	.0	
	banksel	PWM1_duty
	xorwf	PWM1_duty, w
	btfsc	STATUS, Z
	goto	_duty1_off	

	;banksel	PWM1_duty
	;decfsz	PWM1_duty, f
	decf	PWM1_duty, f
	goto	_duty2

_duty1_off
	;movlw	.0
	banksel	PORTB
	bcf		PWM1

_duty2
	movlw	.0	
	banksel	PWM2_duty
	xorwf	PWM2_duty, w
	btfsc	STATUS, Z
	goto	_duty2_off

	;banksel	PWM2_duty
	;decfsz	PWM2_duty, f
	decf	PWM2_duty, f
	goto	_duty_done

_duty2_off
	banksel	PORTB
	bcf		PWM2
	
_duty_done
	; Enabling Interrupts Again
	banksel	TMR0	
	clrf	TMR0
	banksel	INTCON
	bcf		INTCON, TMR0IF

    movf    pclath_temp,w   ; retrieve copy of PCLATH register
    movwf   PCLATH          ; restore pre-isr PCLATH register contents
    movf    status_temp,w   ; retrieve copy of STATUS register
    movwf   STATUS          ; restore pre-isr STATUS register contents
    swapf   w_temp,f
    swapf   w_temp,w        ; restore pre-isr W register contents
    retfie                  ; return from interrupt

MAIN_PROG       CODE

start

    nop             ; code starts here (example)
    ;banksel count           ; example
    ;clrf    count           ; example
	call	init

; remaining code goes here

    goto $

;----------------------------------------------------
; Initialization of the device
;----------------------------------------------------
init
	banksel	sPORTB
	clrf	sPORTB

	; Switching to bank 0
	bcf	STATUS, RP0
	bcf	STATUS, RP1

	clrf	PORTB
	;movlw	0
	;movwf	PWM1

	; Switching to bank 1
	bsf	STATUS, RP0
	;bcf	STATUS, RP1

	;movlw	b'11111001'
	;movwf	TRISB
	bcf		PWM1_TRIS
	bcf		PWM2_TRIS

	; Switching to bank 0
	bcf	STATUS, RP0

	; Setting TMR0 Interrupt
	; 1:2 Prescalar -> 0.2us * 2 * 256 = 100us
	movlw	b'00000000'
	banksel	OPTION_REG
	movwf	OPTION_REG

	; Enabling GIE & TMR0IE
	movlw 	b'10100000'
	banksel	INTCON
	movwf	INTCON
	
	; Initializing variables
	banksel	periodc
	clrf	periodc
	;movlw	.25
	;movwf	periodc

	;movlw	.15
	;banksel	PWM1_duty
	;movwf	PWM1_duty

	;banksel	PORTB
	;bsf		PWM1

	;movlw	.0
	;banksel	PWM2_duty
	;movwf	PWM2_duty	

	clrf	TMR0

	return
;----------------------------------------------------

    END                       ; directive 'end of program'

================================================================

;**********************************************************************
;   This file is a basic code template for object module code         *
;   generation on the PIC16F877A. This file contains the              *
;   basic code building blocks to build upon.                         *
;                                                                     *
;   Refer to the MPASM User's Guide for additional information on     *
;   features of the assembler and linker (Document DS33014).          *
;                                                                     *
;   Refer to the respective PIC data sheet for additional             *
;   information on the instruction set.                               *
;                                                                     *
;**********************************************************************
;                                                                     *
;    Filename:      xxx.asm                                           *
;    Date:                                                            *
;    File Version:                                                    *
;                                                                     *
;    Author:                                                          *
;    Company:                                                         *
;                                                                     * 
;                                                                     *
;**********************************************************************
;                                                                     *
;    Files required: P16F877A.INC                                     *
;                                                                     *
;                                                                     *
;                                                                     *
;**********************************************************************
;                                                                     *
;    Notes:                                                           *
;                                                                     *
;                                                                     *
;                                                                     *
;                                                                     *
;**********************************************************************


    list        p=16f877a   ; list directive to define processor
    #include    <p16f877a.inc>  ; processor specific variable definitions
    
    ;__CONFIG _CP_OFF & _WDT_OFF & _BODEN_OFF & _PWRTE_ON & _RC_OSC & _WRT_OFF & _LVP_ON & _CPD_OFF
	__CONFIG  _FOSC_HS & _WRT_OFF & _LVP_OFF & _CPD_OFF & _CP_OFF & _WDT_OFF & _BODEN_OFF & _PWRTE_ON


; '__CONFIG' directive is used to embed configuration data within .asm file.
; The labels following the directive are located in the respective .inc file.
; See respective data sheet for additional information on configuration word.

;***** VARIABLE DEFINITIONS (examples)

#define PWM1		PORTB, RB1
#define PWM1_TRIS	TRISB, RB1

#define PWM2		PORTB, RB2
#define PWM2_TRIS	TRISB, RB2

; example of using Shared Uninitialized Data Section
INT_VAR     UDATA_SHR      
w_temp      RES     1       ; variable used for context saving 
status_temp RES     1       ; variable used for context saving
pclath_temp RES	    1       ; variable used for context saving

; example of using Uninitialized Data Section
TEMP_VAR    UDATA           ; explicit address specified is not required
sPORTB		RES		1		; Shadow PORTB
temp_count  RES     1       ; temporary variable (example)
periodc		RES		1		; Period Counter
PWM1_duty	RES		1		; PWM1 duty counter
PWM2_duty	RES		1		; PWM2 duty counter

PWM1_value 	RES		1
PWM2_value 	RES		1

; example of using Overlayed Uninitialized Data Section
; in this example both variables are assigned the same GPR location by linker
G_DATA      UDATA_OVR       ; explicit address can be specified
flag        RES 2           ; temporary variable (shared locations - G_DATA)

G_DATA      UDATA_OVR   
count       RES 2           ; temporary variable (shared locations - G_DATA)

;**********************************************************************
RESET_VECTOR    CODE    0x0000 ; processor reset vector
    nop                        ; nop for icd
    pagesel start
    goto    start              ; go to beginning of program


INT_VECTOR      CODE    0x0004 ; interrupt vector location

INTERRUPT

    movwf   w_temp          ; save off current W register contents
    movf    STATUS,w        ; move status register into W register
    movwf   status_temp     ; save off contents of STATUS register
    movf    PCLATH,w        ; move pclath register into w register
    movwf   pclath_temp     ; save off contents of PCLATH register

	banksel	periodc
	decfsz	periodc, f
	goto	_check_duty

	movlw	.100
	movwf	periodc

	banksel PWM1_value
	movf	PWM1_value, w
	;movlw	.10
	banksel	PWM1_duty
	movwf	PWM1_duty

	;banksel	PORTB
	;bsf		PWM1
	;bsf		PWM2
	movlw	b'00000110'
	banksel	sPORTB
	movwf	sPORTB

	banksel PWM2_value
	movf	PWM2_value, w
	;movlw	.100
	banksel	PWM2_duty
	movwf	PWM2_duty

	;goto	_duty_done

	;banksel	PORTB
	;bsf		PWM2

_check_duty
	movlw	.0	
	banksel	PWM1_duty
	xorwf	PWM1_duty, w
	btfsc	STATUS, Z
	goto	_duty1_off	

	;banksel	PWM1_duty
	;decfsz	PWM1_duty, f
	decf	PWM1_duty, f
	goto	_duty2

_duty1_off
	;movlw	.0
	;banksel	PORTB
	;bcf		PWM1
	banksel	sPORTB
	bcf		sPORTB, 1

_duty2
	movlw	.0	
	banksel	PWM2_duty
	xorwf	PWM2_duty, w
	btfsc	STATUS, Z
	goto	_duty2_off

	;banksel	PWM2_duty
	;decfsz	PWM2_duty, f
	decf	PWM2_duty, f
	goto	_duty_done

_duty2_off
	;banksel	PORTB
	;bcf		PWM2
	banksel	sPORTB
	bcf		sPORTB, 2
	
_duty_done
	banksel	sPORTB
	movf	sPORTB, w
	banksel	PORTB
	movwf	PORTB

	; Enabling Interrupts Again
	movlw	.230
	banksel	TMR0	
	;clrf	TMR0
	movwf	TMR0

	banksel	INTCON
	bcf		INTCON, TMR0IF

    movf    pclath_temp,w   ; retrieve copy of PCLATH register
    movwf   PCLATH          ; restore pre-isr PCLATH register contents
    movf    status_temp,w   ; retrieve copy of STATUS register
    movwf   STATUS          ; restore pre-isr STATUS register contents
    swapf   w_temp,f
    swapf   w_temp,w        ; restore pre-isr W register contents
    retfie                  ; return from interrupt

MAIN_PROG       CODE

start

    nop             ; code starts here (example)
    ;banksel count           ; example
    ;clrf    count           ; example
	call	init

loop
; A/D Conversion ------------------------------------
	banksel	ADCON0
	bsf		ADCON0, GO_DONE

	btfsc	ADCON0, GO_DONE
	goto	$-1

	banksel	ADRESH
	movf	ADRESH, w
;----------------------------------------------------
	;banksel PWM1_value
	;movf	PWM1_value, w
	;banksel 
	;movlw	.70
	banksel	PWM1_value
	movwf	PWM1_value

	movlw	.10
	banksel	PWM2_value
	movwf	PWM2_value

    goto loop

;----------------------------------------------------
; Initialization of the device
;----------------------------------------------------
init
	banksel	sPORTB
	clrf	sPORTB

	; Switching to bank 0
	bcf	STATUS, RP0
	bcf	STATUS, RP1

	clrf	PORTB
	;movlw	0
	;movwf	PWM1

	; Switching to bank 1
	bsf	STATUS, RP0
	;bcf	STATUS, RP1

	;movlw	b'11111001'
	;movwf	TRISB
	bcf		PWM1_TRIS
	bcf		PWM2_TRIS

	; Switching to bank 0
	bcf	STATUS, RP0

;----------------------------------------------------
	banksel	TRISA
	bsf		TRISA, RA0

	; Setting up A/D
	movlw	b'00001110'
	banksel	ADCON1
	movwf	ADCON1

	movlw	b'10000001'
	banksel	ADCON0
	movwf	ADCON0
	
	nop
	nop
	nop
	nop
	nop

;----------------------------------------------------

	; Setting TMR0 Interrupt
	; 1:2 Prescalar -> 0.2us * 2 * 256 = 100us
	movlw	b'00000000'
	banksel	OPTION_REG
	movwf	OPTION_REG

	; Enabling GIE & TMR0IE
	movlw 	b'10100000'
	banksel	INTCON
	movwf	INTCON
	
	; Initializing variables
	banksel	periodc
	clrf	periodc

	banksel	PWM1_value
	clrf	PWM1_value

	banksel	PWM2_value
	clrf	PWM2_value
	;movlw	.25
	;movwf	periodc

	;movlw	.15
	;banksel	PWM1_duty
	;movwf	PWM1_duty

	;banksel	PORTB
	;bsf		PWM1

	;movlw	.0
	;banksel	PWM2_duty
	;movwf	PWM2_duty

	; 256 - 230 = 26
	movlw	.230	
	banksel	TMR0
	;clrf	TMR0
	movwf	TMR0


	return
;----------------------------------------------------

    END                       ; directive 'end of program'

